%%--------------------------------------------------------------%
%%-------------- Kalman Filter (single iteration) --------------%
%%--------------------------------------------------------------%

%%-------------- I/O matrices & vectors ------------------------%

Vector u(@m) <Input>;         								%% Control vector
Vector x(@n) <InOut>;         								%% A posteriori state estimate
Vector y(@n) <InOut>;         								%% Predicted (a priori) state estimate
Vector z(@k) <Input>;         								%% State observation

Matrix F(@n,@n) <Input>;         							%% State-transition model
Matrix B(@n,@m) <Input>;         							%% Control-input model
Matrix H(@k,@n) <Input>;         							%% Observation model
Matrix P(@n,@n) <InOut, Symmetric, SPD, UpperStorage>;      %% A posteriori estimate covariance
Matrix Q(@n,@n) <Input, Symmetric, SPD, UpperStorage>;      %% Covariance of the process noise
Matrix R(@k,@k) <Input, Symmetric, SPD, UpperStorage>;      %% Covariance of the observation noise
Matrix Y(@n,@n) <InOut, Symmetric, SPD, UpperStorage>;      %% Predicted (a priori) estimate covariance

%% temps

Vector v0(@k) <InOut>;
Vector v1(@k) <Input,  overwrites(v0)>;
Vector v2(@k) <Output, overwrites(v1)>;
Vector v3(@k) <Input,  overwrites(v0)>;
Vector v4(@k) <Output, overwrites(v3)>;

Matrix M0(@n,@n) <InOut>;   
Matrix M1(@k,@n) <InOut>;
Matrix M2(@n,@k) <InOut>; 
Matrix M3(@k,@k) <InOut,  Symmetric, SPD, UpperStorage>;
Matrix M4(@k,@k) <Input,  Symmetric, SPD, UpperStorage, overwrites(M3)>;
Matrix U(@k,@k)  <Output, UpperTriangular, Non-singular, overwrites(M4)>;
Matrix U0(@k,@k) <Input,  UpperTriangular, Non-singular, overwrites(M3)>;
Matrix M5(@k,@n) <Input,  overwrites(M1)>;
Matrix M6(@k,@n) <Output, overwrites(M5)>;
Matrix M7(@k,@n) <Input,  overwrites(M1)>;
Matrix M8(@k,@n) <Output, overwrites(M7)>;


%%-------------- Equations -------------------------------------%%

%% Predict
%% y = F*x + B*u;
%% Y = F*P*F^T + Q;

%% Update
%% x = y + Y*H^T*(H*Y*H^T + R)^-1*( z - H*y );
%% P = Y - Y*H^T*(H*Y*H^T + R)^-1*H*Y;


%%-------------- LA statements ---------------------------------%%
%%inoutorder:   y F x B u M0 P Y Q v0 z H M1 M2 M3 R (16)
%%kernelorder:  F B u Q z H R // y x M0 P Y v0 M1 M2 M3 (7 + 9)
				
%% Predict

y = F*x + B*u;           %%  2*n*n + 2*n*m
M0 = F*P;                %%  2*n*n*n
Y = M0*trans(F) + Q;     %%  n*n*n

%% Update

v0 = z - H*y;            %%  2*k*n
M1 = H*Y;                %%  2*k*n*n
M2 = Y*trans(H);         %%  2*k*n*n
M3 = M1*trans(H) + R;    %%  k*k*n

trans(U)*U   = M4;       %% k*k*k/3 
trans(U0)*v2 = v1;       %% k*k
U0*v4        = v3;       %% k*k

trans(U0)*M6 = M5;       %% n*k*k
U0*M8        = M7;       %% n*k*k

x = y + M2*v0;           %% 2*n*k
P = Y - M2*M1;           %% n*n*k


