
%% Equal( NL[ L_11, U_11 ], Assign_Mul_LowerUnitTriangular_UpperTriangular_SquaredMatrix( A_11 ) )
[@out0@[h(min(@nb@,@m0@),@m0@,0), h(min(@nb@,@m0@),@m0@,0)]#LowerTriangular#, @out1@[h(min(@nb@,@m0@),@m0@,0), h(min(@nb@,@m0@),@m0@,0)]#UpperTriangular#] = Assign_Mul_LowerUnitTriangular_UpperTriangular_SquaredMatrix_opt(min(@nb@,@m0@), min(@nb@,@m0@); @op0@[h(min(@nb@,@m0@),@m0@,0), h(min(@nb@,@m0@),@m0@,0)]);
For[ @it@; @nb@; @m0@-(@nb@); @nb@ ]
{
	%% Equal( NL[ U_01 ], ldiv_lni_ow( L_00, A_01 ) )
	@out1@[h(@it@,@m0@,0), h(@nb@,@m0@,@it@)] = ldiv_lni_ow_opt(@it@, @nb@; @out0@[h(@it@,@m0@,0), h(@it@,@m0@,0)]#LowerTriangular#, @op0@[h(@it@,@m0@,0), h(@nb@,@m0@,@it@)]);
	%% Equal( NL[ L_10 ], rdiv_unn_ow( U_00, A_10 ) )
	@out0@[h(@nb@,@m0@,@it@), h(@it@,@m0@,0)] = rdiv_unn_ow_opt(@nb@, @it@; @out1@[h(@it@,@m0@,0), h(@it@,@m0@,0)]#UpperTriangular#, @op0@[h(@nb@,@m0@,@it@), h(@it@,@m0@,0)]);
	%% Equal( NL[ A_11 ], Plus( Times( Minus( L_10 ), U_01 ), A_11 ) )
	@op0@[h(@nb@,@m0@,@it@), h(@nb@,@m0@,@it@)] = @op0@[h(@nb@,@m0@,@it@), h(@nb@,@m0@,@it@)] + -@out0@[h(@nb@,@m0@,@it@), h(@it@,@m0@,0)] * @out1@[h(@it@,@m0@,0), h(@nb@,@m0@,@it@)];
	%% Equal( NL[ L_11, U_11 ], Assign_Mul_LowerUnitTriangular_UpperTriangular_SquaredMatrix( A_11 ) )
	[@out0@[h(@nb@,@m0@,@it@), h(@nb@,@m0@,@it@)]#LowerTriangular#, @out1@[h(@nb@,@m0@,@it@), h(@nb@,@m0@,@it@)]#UpperTriangular#] = Assign_Mul_LowerUnitTriangular_UpperTriangular_SquaredMatrix_opt(@nb@, @nb@; @op0@[h(@nb@,@m0@,@it@), h(@nb@,@m0@,@it@)]);
};

