
For[ @it@; 0; @m@-(@nb@+1); @nb@ ]
{
	%% Equal( NL[ X_11 ], tril_inv_ow( L_11 ) )
	@out0@[h(@nb@,@m@,@it@), h(@nb@,@m@,@it@)]#LowerTriangular# = tril_inv_ow_opt(@nb@, @nb@; @op0@[h(@nb@,@m@,@it@), h(@nb@,@m@,@it@)]#LowerTriangular#);
	%% Equal( NL[ X_21 ], Minus( ldiv_ln_ow( L_22, L_21 ) ) )
	@out0@[h(@m@-(@it@+@nb@),@m@,@it@+@nb@), h(@nb@,@m@,@it@)] = -ldiv_ln_ow_opt(@m@, @m@; @op0@[h(@m@-(@it@+@nb@),@m@,@it@+@nb@), h(@m@-(@it@+@nb@),@m@,@it@+@nb@)]#LowerTriangular#, @op0@[h(@m@-(@it@+@nb@),@m@,@it@+@nb@), h(@nb@,@m@,@it@)]);
	%% Equal( NL[ X_21 ], Times( X_21, X_11 ) )
	@out0@[h(@m@-(@it@+@nb@),@m@,@it@+@nb@), h(@nb@,@m@,@it@)] = @out0@[h(@m@-(@it@+@nb@),@m@,@it@+@nb@), h(@nb@,@m@,@it@)] * @out0@[h(@nb@,@m@,@it@), h(@nb@,@m@,@it@)]#LowerTriangular#;
};
%% Equal( NL[ X_11 ], tril_inv_ow( L_11 ) )
@out0@[h(@nb@,@m@,max(@m@-@nb@, 0)), h(@nb@,@m@,max(@m@-@nb@, 0))]#LowerTriangular# = tril_inv_ow_opt(@nb@, @nb@; @op0@[h(@nb@,@m@,max(@m@-@nb@, 0)), h(@nb@,@m@,max(@m@-@nb@, 0))]#LowerTriangular#);

