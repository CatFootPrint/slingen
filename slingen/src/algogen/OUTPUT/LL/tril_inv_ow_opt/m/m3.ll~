
For[ @it@; 0; @m@-(@nb@+1); @nb@ ]
{
	%% Equal( NL[ X_11 ], tril_inv_ow( L_11 ) )
	@out0@[h(@nb@,@m@,@m@-(@it@+@nb@)), h(@nb@,@m@,@m@-(@it@+@nb@))]#LowerTriangular# = tril_inv_ow_opt(@nb@, @nb@; @op0@[h(@nb@,@m@,@m@-(@it@+@nb@)), h(@nb@,@m@,@m@-(@it@+@nb@))]#LowerTriangular#);
	%% Equal( NL[ X_10 ], Times( Minus( X_11 ), L_10 ) )
	@out0@[h(@nb@,@m@,@m@-(@it@+@nb@)), h(@m@-(@it@+@nb@),@m@,0)] = -@out0@[h(@nb@,@m@,@m@-(@it@+@nb@)), h(@nb@,@m@,@m@-(@it@+@nb@))]#LowerTriangular# * @op0@[h(@nb@,@m@,@m@-(@it@+@nb@)), h(@m@-(@it@+@nb@),@m@,0)];
	%% Equal( NL[ X_10 ], rdiv_ln_ow( L_00, X_10 ) )
	@out0@[h(@nb@,@m@,@m@-(@it@+@nb@)), h(@m@-(@it@+@nb@),@m@,0)] = rdiv_ln_ow_opt(@nb@, @m@-(@it@+@nb@); @op0@[h(@m@-(@it@+@nb@),@m@,0), h(@m@-(@it@+@nb@),@m@,0)]#LowerTriangular#, @out0@[h(@nb@,@m@,@m@-(@it@+@nb@)), h(@m@-(@it@+@nb@),@m@,0)]);
};
%% Equal( NL[ X_11 ], tril_inv_ow( L_11 ) )
@out0@[h(@nb@,@m@,@m@-(max(@m@-@nb@, 0)+@nb@)), h(@nb@,@m@,@m@-(max(@m@-@nb@, 0)+@nb@))]#LowerTriangular# = tril_inv_ow_opt(@nb@, @nb@; @op0@[h(@nb@,@m@,@m@-(max(@m@-@nb@, 0)+@nb@)), h(@nb@,@m@,@m@-(max(@m@-@nb@, 0)+@nb@))]#LowerTriangular#);

