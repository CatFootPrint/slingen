Using part. schemes: Assign_Mul_T_UpperTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_T_UpperTriangular_SquaredMatrix_SquaredMatrix_opt_m04_m21_Assign_Mul_T_UpperTriangular_UpperTriangular_Symmetric_opt_m02_Assign_Mul_UpperTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_UpperTriangular_SquaredMatrix_SquaredMatrix_opt_m04_m21_ldiv_utn_ow_opt_m4_n1

================================================================================

  y = ( ( F * x ) + ( B * u ) );
  M0 = ( F * P );
  Y = ( ( M0 * trans( F ) ) + Q );
  v0 = ( z - ( H * y ) );
  M1 = ( H * Y );
  M2 = ( Y * trans( H ) );
  M3 = ( ( M1 * trans( H ) ) + R );
  U[h(1, 4, 0),h(1, 4, 0)] = sqrt( U[h(1, 4, 0),h(1, 4, 0)] );
  U[h(1, 4, 0),h(1, 4, 1)] = ( U[h(1, 4, 0),h(1, 4, 1)] / U[h(1, 4, 0),h(1, 4, 0)] );
  U[h(1, 4, 0),h(1, 4, 2)] = ( U[h(1, 4, 0),h(1, 4, 2)] / U[h(1, 4, 0),h(1, 4, 0)] );
  U[h(1, 4, 0),h(1, 4, 3)] = ( U[h(1, 4, 0),h(1, 4, 3)] / U[h(1, 4, 0),h(1, 4, 0)] );
  U[h(1, 4, 1),h(1, 4, 1)] = ( ( -( trans( U[h(1, 4, 0),h(1, 4, 1)] ) ) * U[h(1, 4, 0),h(1, 4, 1)] ) + M4[h(1, 4, 1),h(1, 4, 1)] );
  U[h(1, 4, 1),h(1, 4, 1)] = sqrt( U[h(1, 4, 1),h(1, 4, 1)] );
  U[h(1, 4, 1),h(2, 4, 2)] = ( ( -( trans( U[h(1, 4, 0),h(1, 4, 1)] ) ) * U[h(1, 4, 0),h(2, 4, 2)] ) + M4[h(1, 4, 1),h(2, 4, 2)] );
  U[h(1, 4, 1),h(1, 4, 2)] = ( U[h(1, 4, 1),h(1, 4, 2)] / U[h(1, 4, 1),h(1, 4, 1)] );
  U[h(1, 4, 1),h(1, 4, 3)] = ( U[h(1, 4, 1),h(1, 4, 3)] / U[h(1, 4, 1),h(1, 4, 1)] );
  U[h(1, 4, 2),h(1, 4, 2)] = ( ( -( trans( U[h(2, 4, 0),h(1, 4, 2)] ) ) * U[h(2, 4, 0),h(1, 4, 2)] ) + M4[h(1, 4, 2),h(1, 4, 2)] );
  U[h(1, 4, 2),h(1, 4, 2)] = sqrt( U[h(1, 4, 2),h(1, 4, 2)] );
  U[h(1, 4, 2),h(1, 4, 3)] = ( ( -( trans( U[h(2, 4, 0),h(1, 4, 2)] ) ) * U[h(2, 4, 0),h(1, 4, 3)] ) + M4[h(1, 4, 2),h(1, 4, 3)] );
  U[h(1, 4, 2),h(1, 4, 3)] = ( U[h(1, 4, 2),h(1, 4, 3)] / U[h(1, 4, 2),h(1, 4, 2)] );
  U[h(1, 4, 3),h(1, 4, 3)] = ( ( -( trans( U[h(3, 4, 0),h(1, 4, 3)] ) ) * U[h(3, 4, 0),h(1, 4, 3)] ) + M4[h(1, 4, 3),h(1, 4, 3)] );
  U[h(1, 4, 3),h(1, 4, 3)] = sqrt( U[h(1, 4, 3),h(1, 4, 3)] );
  v2[h(1, 4, 0),h(1, 1, 0)] = ( v2[h(1, 4, 0),h(1, 1, 0)] / U0[h(1, 4, 0),h(1, 4, 0)] );
  v2[h(3, 4, 1),h(1, 1, 0)] = ( ( -( trans( U0[h(1, 4, 0),h(3, 4, 1)] ) ) * v2[h(1, 4, 0),h(1, 1, 0)] ) + v2[h(3, 4, 1),h(1, 1, 0)] );
  v2[h(1, 4, 1),h(1, 1, 0)] = ( v2[h(1, 4, 1),h(1, 1, 0)] / U0[h(1, 4, 1),h(1, 4, 1)] );
  v2[h(2, 4, 2),h(1, 1, 0)] = ( ( -( trans( U0[h(1, 4, 1),h(2, 4, 2)] ) ) * v2[h(1, 4, 1),h(1, 1, 0)] ) + v2[h(2, 4, 2),h(1, 1, 0)] );
  v2[h(1, 4, 2),h(1, 1, 0)] = ( v2[h(1, 4, 2),h(1, 1, 0)] / U0[h(1, 4, 2),h(1, 4, 2)] );
  v2[h(1, 4, 3),h(1, 1, 0)] = ( ( -( trans( U0[h(1, 4, 2),h(1, 4, 3)] ) ) * v2[h(1, 4, 2),h(1, 1, 0)] ) + v2[h(1, 4, 3),h(1, 1, 0)] );
  v2[h(1, 4, 3),h(1, 1, 0)] = ( v2[h(1, 4, 3),h(1, 1, 0)] / U0[h(1, 4, 3),h(1, 4, 3)] );
  v4[h(1, 4, 3),h(1, 1, 0)] = ( v4[h(1, 4, 3),h(1, 1, 0)] / U0[h(1, 4, 3),h(1, 4, 3)] );
  v4[h(3, 4, 0),h(1, 1, 0)] = ( ( -( U0[h(3, 4, 0),h(1, 4, 3)] ) * v4[h(1, 4, 3),h(1, 1, 0)] ) + v4[h(3, 4, 0),h(1, 1, 0)] );
  v4[h(1, 4, 2),h(1, 1, 0)] = ( v4[h(1, 4, 2),h(1, 1, 0)] / U0[h(1, 4, 2),h(1, 4, 2)] );
  v4[h(2, 4, 0),h(1, 1, 0)] = ( ( -( U0[h(2, 4, 0),h(1, 4, 2)] ) * v4[h(1, 4, 2),h(1, 1, 0)] ) + v4[h(2, 4, 0),h(1, 1, 0)] );
  v4[h(1, 4, 1),h(1, 1, 0)] = ( v4[h(1, 4, 1),h(1, 1, 0)] / U0[h(1, 4, 1),h(1, 4, 1)] );
  v4[h(1, 4, 0),h(1, 1, 0)] = ( ( -( U0[h(1, 4, 0),h(1, 4, 1)] ) * v4[h(1, 4, 1),h(1, 1, 0)] ) + v4[h(1, 4, 0),h(1, 1, 0)] );
  v4[h(1, 4, 0),h(1, 1, 0)] = ( v4[h(1, 4, 0),h(1, 1, 0)] / U0[h(1, 4, 0),h(1, 4, 0)] );
  M6[h(1, 4, 0),h(1, 4, 0)] = ( M6[h(1, 4, 0),h(1, 4, 0)] / U0[h(1, 4, 0),h(1, 4, 0)] );
  M6[h(1, 4, 0),h(1, 4, 1)] = ( M6[h(1, 4, 0),h(1, 4, 1)] / U0[h(1, 4, 0),h(1, 4, 0)] );
  M6[h(1, 4, 0),h(1, 4, 2)] = ( M6[h(1, 4, 0),h(1, 4, 2)] / U0[h(1, 4, 0),h(1, 4, 0)] );
  M6[h(1, 4, 0),h(1, 4, 3)] = ( M6[h(1, 4, 0),h(1, 4, 3)] / U0[h(1, 4, 0),h(1, 4, 0)] );
  M6[h(3, 4, 1),h(4, 4, 0)] = ( ( -( trans( U0[h(1, 4, 0),h(3, 4, 1)] ) ) * M6[h(1, 4, 0),h(4, 4, 0)] ) + M6[h(3, 4, 1),h(4, 4, 0)] );
  M6[h(1, 4, 1),h(1, 4, 0)] = ( M6[h(1, 4, 1),h(1, 4, 0)] / U0[h(1, 4, 1),h(1, 4, 1)] );
  M6[h(1, 4, 1),h(1, 4, 1)] = ( M6[h(1, 4, 1),h(1, 4, 1)] / U0[h(1, 4, 1),h(1, 4, 1)] );
  M6[h(1, 4, 1),h(1, 4, 2)] = ( M6[h(1, 4, 1),h(1, 4, 2)] / U0[h(1, 4, 1),h(1, 4, 1)] );
  M6[h(1, 4, 1),h(1, 4, 3)] = ( M6[h(1, 4, 1),h(1, 4, 3)] / U0[h(1, 4, 1),h(1, 4, 1)] );
  M6[h(2, 4, 2),h(4, 4, 0)] = ( ( -( trans( U0[h(1, 4, 1),h(2, 4, 2)] ) ) * M6[h(1, 4, 1),h(4, 4, 0)] ) + M6[h(2, 4, 2),h(4, 4, 0)] );
  M6[h(1, 4, 2),h(1, 4, 0)] = ( M6[h(1, 4, 2),h(1, 4, 0)] / U0[h(1, 4, 2),h(1, 4, 2)] );
  M6[h(1, 4, 2),h(1, 4, 1)] = ( M6[h(1, 4, 2),h(1, 4, 1)] / U0[h(1, 4, 2),h(1, 4, 2)] );
  M6[h(1, 4, 2),h(1, 4, 2)] = ( M6[h(1, 4, 2),h(1, 4, 2)] / U0[h(1, 4, 2),h(1, 4, 2)] );
  M6[h(1, 4, 2),h(1, 4, 3)] = ( M6[h(1, 4, 2),h(1, 4, 3)] / U0[h(1, 4, 2),h(1, 4, 2)] );
  M6[h(1, 4, 3),h(4, 4, 0)] = ( ( -( trans( U0[h(1, 4, 2),h(1, 4, 3)] ) ) * M6[h(1, 4, 2),h(4, 4, 0)] ) + M6[h(1, 4, 3),h(4, 4, 0)] );
  M6[h(1, 4, 3),h(1, 4, 0)] = ( M6[h(1, 4, 3),h(1, 4, 0)] / U0[h(1, 4, 3),h(1, 4, 3)] );
  M6[h(1, 4, 3),h(1, 4, 1)] = ( M6[h(1, 4, 3),h(1, 4, 1)] / U0[h(1, 4, 3),h(1, 4, 3)] );
  M6[h(1, 4, 3),h(1, 4, 2)] = ( M6[h(1, 4, 3),h(1, 4, 2)] / U0[h(1, 4, 3),h(1, 4, 3)] );
  M6[h(1, 4, 3),h(1, 4, 3)] = ( M6[h(1, 4, 3),h(1, 4, 3)] / U0[h(1, 4, 3),h(1, 4, 3)] );
  M8[h(1, 4, 3),h(1, 4, 0)] = ( M8[h(1, 4, 3),h(1, 4, 0)] / U0[h(1, 4, 3),h(1, 4, 3)] );
  M8[h(1, 4, 3),h(1, 4, 1)] = ( M8[h(1, 4, 3),h(1, 4, 1)] / U0[h(1, 4, 3),h(1, 4, 3)] );
  M8[h(1, 4, 3),h(1, 4, 2)] = ( M8[h(1, 4, 3),h(1, 4, 2)] / U0[h(1, 4, 3),h(1, 4, 3)] );
  M8[h(1, 4, 3),h(1, 4, 3)] = ( M8[h(1, 4, 3),h(1, 4, 3)] / U0[h(1, 4, 3),h(1, 4, 3)] );
  M8[h(3, 4, 0),h(4, 4, 0)] = ( ( -( U0[h(3, 4, 0),h(1, 4, 3)] ) * M8[h(1, 4, 3),h(4, 4, 0)] ) + M8[h(3, 4, 0),h(4, 4, 0)] );
  M8[h(1, 4, 2),h(1, 4, 0)] = ( M8[h(1, 4, 2),h(1, 4, 0)] / U0[h(1, 4, 2),h(1, 4, 2)] );
  M8[h(1, 4, 2),h(1, 4, 1)] = ( M8[h(1, 4, 2),h(1, 4, 1)] / U0[h(1, 4, 2),h(1, 4, 2)] );
  M8[h(1, 4, 2),h(1, 4, 2)] = ( M8[h(1, 4, 2),h(1, 4, 2)] / U0[h(1, 4, 2),h(1, 4, 2)] );
  M8[h(1, 4, 2),h(1, 4, 3)] = ( M8[h(1, 4, 2),h(1, 4, 3)] / U0[h(1, 4, 2),h(1, 4, 2)] );
  M8[h(2, 4, 0),h(4, 4, 0)] = ( ( -( U0[h(2, 4, 0),h(1, 4, 2)] ) * M8[h(1, 4, 2),h(4, 4, 0)] ) + M8[h(2, 4, 0),h(4, 4, 0)] );
  M8[h(1, 4, 1),h(1, 4, 0)] = ( M8[h(1, 4, 1),h(1, 4, 0)] / U0[h(1, 4, 1),h(1, 4, 1)] );
  M8[h(1, 4, 1),h(1, 4, 1)] = ( M8[h(1, 4, 1),h(1, 4, 1)] / U0[h(1, 4, 1),h(1, 4, 1)] );
  M8[h(1, 4, 1),h(1, 4, 2)] = ( M8[h(1, 4, 1),h(1, 4, 2)] / U0[h(1, 4, 1),h(1, 4, 1)] );
  M8[h(1, 4, 1),h(1, 4, 3)] = ( M8[h(1, 4, 1),h(1, 4, 3)] / U0[h(1, 4, 1),h(1, 4, 1)] );
  M8[h(1, 4, 0),h(4, 4, 0)] = ( ( -( U0[h(1, 4, 0),h(1, 4, 1)] ) * M8[h(1, 4, 1),h(4, 4, 0)] ) + M8[h(1, 4, 0),h(4, 4, 0)] );
  M8[h(1, 4, 0),h(1, 4, 0)] = ( M8[h(1, 4, 0),h(1, 4, 0)] / U0[h(1, 4, 0),h(1, 4, 0)] );
  M8[h(1, 4, 0),h(1, 4, 1)] = ( M8[h(1, 4, 0),h(1, 4, 1)] / U0[h(1, 4, 0),h(1, 4, 0)] );
  M8[h(1, 4, 0),h(1, 4, 2)] = ( M8[h(1, 4, 0),h(1, 4, 2)] / U0[h(1, 4, 0),h(1, 4, 0)] );
  M8[h(1, 4, 0),h(1, 4, 3)] = ( M8[h(1, 4, 0),h(1, 4, 3)] / U0[h(1, 4, 0),h(1, 4, 0)] );
  x = ( y + ( M2 * v0 ) );
  P = ( Y - ( M2 * M1 ) );
