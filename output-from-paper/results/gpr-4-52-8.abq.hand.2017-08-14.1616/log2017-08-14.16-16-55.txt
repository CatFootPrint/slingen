  Starting compiler at 2017-08-14 16:16:55.522562 ----------------------------------------

  Decl { {u'a': Matrix[a, (4, 1), GenMatAccess], u'L0': LowerTriangular[L0, (4, 4), GenMatAccess], u'f': Scalar[f, (1, 1), GenMatAccess], u'K': Symmetric[K, (4, 4), LSMatAccess], u't2': Matrix[t2, (4, 1), GenMatAccess], u'L': LowerTriangular[L, (4, 4), GenMatAccess], u't0': Matrix[t0, (4, 1), GenMatAccess], u't1': Matrix[t1, (4, 1), GenMatAccess], u'X': SquaredMatrix[X, (4, 4), GenMatAccess], u'y': Matrix[y, (4, 1), GenMatAccess], u'lp': Scalar[lp, (1, 1), GenMatAccess], u'v': Matrix[v, (4, 1), GenMatAccess], u'var': Scalar[var, (1, 1), GenMatAccess], u'x': Matrix[x, (4, 1), GenMatAccess], u'kx': Matrix[kx, (4, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Entry 0:
Eq: ( L[4,4] * T( L[4,4] ) ) = K[4,4]
Eq.ann: {}
Entry 1:
Eq: ( L0[4,4] * t0[4,1] ) = y[4,1]
Eq.ann: {}
Entry 2:
Eq: ( T( L0[4,4] ) * a[4,1] ) = t1[4,1]
Eq.ann: {}
Entry 3:
Eq: kx[4,1] = ( X[4,4] * x[4,1] )
Eq.ann: {}
Entry 4:
Eq: f[1,1] = ( T( kx[4,1] ) * y[4,1] )
Eq.ann: {}
Entry 5:
Eq: ( L0[4,4] * v[4,1] ) = t2[4,1]
Eq.ann: {}
Entry 6:
Eq: var[1,1] = ( ( T( x[4,1] ) * x[4,1] ) - ( T( kx[4,1] ) * kx[4,1] ) )
Eq.ann: {}
Entry 7:
Eq: lp[1,1] = ( T( y[4,1] ) * y[4,1] )
Eq.ann: {}
 : VALIDATED.



  4, Decl { {u'a': Matrix[a, (4, 1), GenMatAccess], u'x': Matrix[x, (4, 1), GenMatAccess], u'lp': Scalar[lp, (1, 1), GenMatAccess], u'f': Scalar[f, (1, 1), GenMatAccess], u'K': Symmetric[K, (4, 4), LSMatAccess], u't2': Matrix[t2, (4, 1), GenMatAccess], u'L': LowerTriangular[L, (4, 4), GenMatAccess], u't0': Matrix[t0, (4, 1), GenMatAccess], u't1': Matrix[t1, (4, 1), GenMatAccess], u'var': Scalar[var, (1, 1), GenMatAccess], u'L0': LowerTriangular[L0, (4, 4), GenMatAccess], u'v': Matrix[v, (4, 1), GenMatAccess], u'y': Matrix[y, (4, 1), GenMatAccess], u'X': SquaredMatrix[X, (4, 4), GenMatAccess], u'kx': Matrix[kx, (4, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {'part_schemes': {'Assign_Mul_T_LowerTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_LowerTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'rdiv_ltn_ow_opt': {'m': 'm1.ll', 'n': 'n4.ll'}, 'Assign_Mul_LowerTriangular_T_LowerTriangular_Symmetric_opt': {'m0': 'm01.ll'}}, 'cl1ck_v': 0, 'variant_tag': 'Assign_Mul_LowerTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_LowerTriangular_T_LowerTriangular_Symmetric_opt_m01_Assign_Mul_T_LowerTriangular_Matrix_Matrix_opt_m04_m21_rdiv_ltn_ow_opt_m1_n4'}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Eq: Tile( (1, 1), G(h(1, 4, 0), L[4,4],h(1, 4, 0)) ) = Sqrt( Tile( (1, 1), G(h(1, 4, 0), L[4,4],h(1, 4, 0)) ) )
Eq.ann: {}
Entry 1:
For_{fi18;1;3;1} ( Entry 0:
For_{fi43;0;fi18 - 2;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 4, fi18), L[4,4],h(1, 4, fi43)) ) = ( Tile( (1, 1), G(h(1, 4, fi18), L[4,4],h(1, 4, fi43)) ) Div Tile( (1, 1), G(h(1, 4, fi43), L[4,4],h(1, 4, fi43)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(1, 4, fi18), L[4,4],h(fi18 - fi43 - 1, 4, fi43 + 1)) ) = ( Tile( (1, 1), G(h(1, 4, fi18), L[4,4],h(fi18 - fi43 - 1, 4, fi43 + 1)) ) - ( Tile( (1, 1), G(h(1, 4, fi18), L[4,4],h(1, 4, fi43)) ) Kro T( Tile( (1, 1), G(h(fi18 - fi43 - 1, 4, fi43 + 1), L[4,4],h(1, 4, fi43)) ) ) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(1, 4, fi18), L[4,4],h(1, 4, Max(0, fi18 - 1))) ) = ( Tile( (1, 1), G(h(1, 4, fi18), L[4,4],h(1, 4, Max(0, fi18 - 1))) ) Div Tile( (1, 1), G(h(1, 4, Max(0, fi18 - 1)), L[4,4],h(1, 4, Max(0, fi18 - 1))) ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), G(h(1, 4, fi18), L[4,4],h(1, 4, fi18)) ) = ( Tile( (1, 1), G(h(1, 4, fi18), K[4,4],h(1, 4, fi18)) ) - ( Tile( (1, 1), G(h(1, 4, fi18), L[4,4],h(fi18, 4, 0)) ) * T( Tile( (1, 1), G(h(1, 4, fi18), L[4,4],h(fi18, 4, 0)) ) ) ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), G(h(1, 4, fi18), L[4,4],h(1, 4, fi18)) ) = Sqrt( Tile( (1, 1), G(h(1, 4, fi18), L[4,4],h(1, 4, fi18)) ) )
Eq.ann: {}
 )Entry 2:
For_{fi75;0;2;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 4, fi75), t0[4,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 4, fi75), t0[4,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 4, fi75), L0[4,4],h(1, 4, fi75)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi75 + 3, 4, fi75 + 1), t0[4,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi75 + 3, 4, fi75 + 1), t0[4,1],h(1, 1, 0)) ) - ( Tile( (1, 1), G(h(-fi75 + 3, 4, fi75 + 1), L0[4,4],h(1, 4, fi75)) ) Kro Tile( (1, 1), G(h(1, 4, fi75), t0[4,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 3:
Eq: Tile( (1, 1), G(h(1, 4, 3), t0[4,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 4, 3), t0[4,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 4, 3), L0[4,4],h(1, 4, 3)) ) )
Eq.ann: {}
Entry 4:
For_{fi104;0;2;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 4, -fi104 + 3), a[4,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 4, -fi104 + 3), a[4,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 4, -fi104 + 3), L0[4,4],h(1, 4, -fi104 + 3)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi104 + 3, 4, 0), a[4,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi104 + 3, 4, 0), a[4,1],h(1, 1, 0)) ) - ( T( Tile( (1, 1), G(h(1, 4, -fi104 + 3), L0[4,4],h(-fi104 + 3, 4, 0)) ) ) Kro Tile( (1, 1), G(h(1, 4, -fi104 + 3), a[4,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 5:
Eq: Tile( (1, 1), G(h(1, 4, 0), a[4,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 4, 0), a[4,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 4, 0), L0[4,4],h(1, 4, 0)) ) )
Eq.ann: {}
Entry 6:
Eq: Tile( (1, 1), kx[4,1] ) = ( Tile( (1, 1), X[4,4] ) * Tile( (1, 1), x[4,1] ) )
Eq.ann: {}
Entry 7:
Eq: Tile( (1, 1), f[1,1] ) = ( T( Tile( (1, 1), kx[4,1] ) ) * Tile( (1, 1), y[4,1] ) )
Eq.ann: {}
Entry 8:
For_{fi133;0;2;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 4, fi133), v[4,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 4, fi133), v[4,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 4, fi133), L0[4,4],h(1, 4, fi133)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi133 + 3, 4, fi133 + 1), v[4,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi133 + 3, 4, fi133 + 1), v[4,1],h(1, 1, 0)) ) - ( Tile( (1, 1), G(h(-fi133 + 3, 4, fi133 + 1), L0[4,4],h(1, 4, fi133)) ) Kro Tile( (1, 1), G(h(1, 4, fi133), v[4,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 9:
Eq: Tile( (1, 1), G(h(1, 4, 3), v[4,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 4, 3), v[4,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 4, 3), L0[4,4],h(1, 4, 3)) ) )
Eq.ann: {}
Entry 10:
Eq: Tile( (1, 1), var[1,1] ) = ( ( T( Tile( (1, 1), x[4,1] ) ) * Tile( (1, 1), x[4,1] ) ) - ( T( Tile( (1, 1), kx[4,1] ) ) * Tile( (1, 1), kx[4,1] ) ) )
Eq.ann: {}
Entry 11:
Eq: Tile( (1, 1), lp[1,1] ) = ( T( Tile( (1, 1), y[4,1] ) ) * Tile( (1, 1), y[4,1] ) )
Eq.ann: {}
, 0.258658953437 f/c -- folder: /tmp/lgen/gpr-4-52-8.hand.abq.2017-08-14.2445562228



  Compiling took 0:00:25.809615 ----------------------------------------------------------

  Starting compiler at 2017-08-14 16:17:22.395766 ----------------------------------------

  Decl { {u'a': Matrix[a, (12, 1), GenMatAccess], u'L0': LowerTriangular[L0, (12, 12), GenMatAccess], u'f': Scalar[f, (1, 1), GenMatAccess], u'K': Symmetric[K, (12, 12), LSMatAccess], u't2': Matrix[t2, (12, 1), GenMatAccess], u'L': LowerTriangular[L, (12, 12), GenMatAccess], u't0': Matrix[t0, (12, 1), GenMatAccess], u't1': Matrix[t1, (12, 1), GenMatAccess], u'X': SquaredMatrix[X, (12, 12), GenMatAccess], u'y': Matrix[y, (12, 1), GenMatAccess], u'lp': Scalar[lp, (1, 1), GenMatAccess], u'v': Matrix[v, (12, 1), GenMatAccess], u'var': Scalar[var, (1, 1), GenMatAccess], u'x': Matrix[x, (12, 1), GenMatAccess], u'kx': Matrix[kx, (12, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Entry 0:
Eq: ( L[12,12] * T( L[12,12] ) ) = K[12,12]
Eq.ann: {}
Entry 1:
Eq: ( L0[12,12] * t0[12,1] ) = y[12,1]
Eq.ann: {}
Entry 2:
Eq: ( T( L0[12,12] ) * a[12,1] ) = t1[12,1]
Eq.ann: {}
Entry 3:
Eq: kx[12,1] = ( X[12,12] * x[12,1] )
Eq.ann: {}
Entry 4:
Eq: f[1,1] = ( T( kx[12,1] ) * y[12,1] )
Eq.ann: {}
Entry 5:
Eq: ( L0[12,12] * v[12,1] ) = t2[12,1]
Eq.ann: {}
Entry 6:
Eq: var[1,1] = ( ( T( x[12,1] ) * x[12,1] ) - ( T( kx[12,1] ) * kx[12,1] ) )
Eq.ann: {}
Entry 7:
Eq: lp[1,1] = ( T( y[12,1] ) * y[12,1] )
Eq.ann: {}
 : VALIDATED.



  12, Decl { {u'a': Matrix[a, (12, 1), GenMatAccess], u'x': Matrix[x, (12, 1), GenMatAccess], u'lp': Scalar[lp, (1, 1), GenMatAccess], u'f': Scalar[f, (1, 1), GenMatAccess], u'K': Symmetric[K, (12, 12), LSMatAccess], u't2': Matrix[t2, (12, 1), GenMatAccess], u'L': LowerTriangular[L, (12, 12), GenMatAccess], u't0': Matrix[t0, (12, 1), GenMatAccess], u't1': Matrix[t1, (12, 1), GenMatAccess], u'var': Scalar[var, (1, 1), GenMatAccess], u'L0': LowerTriangular[L0, (12, 12), GenMatAccess], u'v': Matrix[v, (12, 1), GenMatAccess], u'y': Matrix[y, (12, 1), GenMatAccess], u'X': SquaredMatrix[X, (12, 12), GenMatAccess], u'kx': Matrix[kx, (12, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {'part_schemes': {'Assign_Mul_T_LowerTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_LowerTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'rdiv_ltn_ow_opt': {'m': 'm1.ll', 'n': 'n4.ll'}, 'Assign_Mul_LowerTriangular_T_LowerTriangular_Symmetric_opt': {'m0': 'm01.ll'}}, 'cl1ck_v': 0, 'variant_tag': 'Assign_Mul_LowerTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_LowerTriangular_T_LowerTriangular_Symmetric_opt_m01_Assign_Mul_T_LowerTriangular_Matrix_Matrix_opt_m04_m21_rdiv_ltn_ow_opt_m1_n4'}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Eq: Tile( (1, 1), G(h(1, 12, 0), L[12,12],h(1, 12, 0)) ) = Sqrt( Tile( (1, 1), G(h(1, 12, 0), L[12,12],h(1, 12, 0)) ) )
Eq.ann: {}
Entry 1:
For_{fi18;1;11;1} ( Entry 0:
For_{fi43;0;fi18 - 2;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 12, fi18), L[12,12],h(1, 12, fi43)) ) = ( Tile( (1, 1), G(h(1, 12, fi18), L[12,12],h(1, 12, fi43)) ) Div Tile( (1, 1), G(h(1, 12, fi43), L[12,12],h(1, 12, fi43)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(1, 12, fi18), L[12,12],h(fi18 - fi43 - 1, 12, fi43 + 1)) ) = ( Tile( (1, 1), G(h(1, 12, fi18), L[12,12],h(fi18 - fi43 - 1, 12, fi43 + 1)) ) - ( Tile( (1, 1), G(h(1, 12, fi18), L[12,12],h(1, 12, fi43)) ) Kro T( Tile( (1, 1), G(h(fi18 - fi43 - 1, 12, fi43 + 1), L[12,12],h(1, 12, fi43)) ) ) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(1, 12, fi18), L[12,12],h(1, 12, Max(0, fi18 - 1))) ) = ( Tile( (1, 1), G(h(1, 12, fi18), L[12,12],h(1, 12, Max(0, fi18 - 1))) ) Div Tile( (1, 1), G(h(1, 12, Max(0, fi18 - 1)), L[12,12],h(1, 12, Max(0, fi18 - 1))) ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), G(h(1, 12, fi18), L[12,12],h(1, 12, fi18)) ) = ( Tile( (1, 1), G(h(1, 12, fi18), K[12,12],h(1, 12, fi18)) ) - ( Tile( (1, 1), G(h(1, 12, fi18), L[12,12],h(fi18, 12, 0)) ) * T( Tile( (1, 1), G(h(1, 12, fi18), L[12,12],h(fi18, 12, 0)) ) ) ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), G(h(1, 12, fi18), L[12,12],h(1, 12, fi18)) ) = Sqrt( Tile( (1, 1), G(h(1, 12, fi18), L[12,12],h(1, 12, fi18)) ) )
Eq.ann: {}
 )Entry 2:
For_{fi75;0;10;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 12, fi75), t0[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, fi75), t0[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, fi75), L0[12,12],h(1, 12, fi75)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi75 + 11, 12, fi75 + 1), t0[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi75 + 11, 12, fi75 + 1), t0[12,1],h(1, 1, 0)) ) - ( Tile( (1, 1), G(h(-fi75 + 11, 12, fi75 + 1), L0[12,12],h(1, 12, fi75)) ) Kro Tile( (1, 1), G(h(1, 12, fi75), t0[12,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 3:
Eq: Tile( (1, 1), G(h(1, 12, 11), t0[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, 11), t0[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, 11), L0[12,12],h(1, 12, 11)) ) )
Eq.ann: {}
Entry 4:
For_{fi104;0;10;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 12, -fi104 + 11), a[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, -fi104 + 11), a[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, -fi104 + 11), L0[12,12],h(1, 12, -fi104 + 11)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi104 + 11, 12, 0), a[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi104 + 11, 12, 0), a[12,1],h(1, 1, 0)) ) - ( T( Tile( (1, 1), G(h(1, 12, -fi104 + 11), L0[12,12],h(-fi104 + 11, 12, 0)) ) ) Kro Tile( (1, 1), G(h(1, 12, -fi104 + 11), a[12,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 5:
Eq: Tile( (1, 1), G(h(1, 12, 0), a[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, 0), a[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, 0), L0[12,12],h(1, 12, 0)) ) )
Eq.ann: {}
Entry 6:
Eq: Tile( (1, 1), kx[12,1] ) = ( Tile( (1, 1), X[12,12] ) * Tile( (1, 1), x[12,1] ) )
Eq.ann: {}
Entry 7:
Eq: Tile( (1, 1), f[1,1] ) = ( T( Tile( (1, 1), kx[12,1] ) ) * Tile( (1, 1), y[12,1] ) )
Eq.ann: {}
Entry 8:
For_{fi133;0;10;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 12, fi133), v[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, fi133), v[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, fi133), L0[12,12],h(1, 12, fi133)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi133 + 11, 12, fi133 + 1), v[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi133 + 11, 12, fi133 + 1), v[12,1],h(1, 1, 0)) ) - ( Tile( (1, 1), G(h(-fi133 + 11, 12, fi133 + 1), L0[12,12],h(1, 12, fi133)) ) Kro Tile( (1, 1), G(h(1, 12, fi133), v[12,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 9:
Eq: Tile( (1, 1), G(h(1, 12, 11), v[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, 11), v[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, 11), L0[12,12],h(1, 12, 11)) ) )
Eq.ann: {}
Entry 10:
Eq: Tile( (1, 1), var[1,1] ) = ( ( T( Tile( (1, 1), x[12,1] ) ) * Tile( (1, 1), x[12,1] ) ) - ( T( Tile( (1, 1), kx[12,1] ) ) * Tile( (1, 1), kx[12,1] ) ) )
Eq.ann: {}
Entry 11:
Eq: Tile( (1, 1), lp[1,1] ) = ( T( Tile( (1, 1), y[12,1] ) ) * Tile( (1, 1), y[12,1] ) )
Eq.ann: {}
, 0.329764829349 f/c -- folder: /tmp/lgen/gpr-4-52-8.hand.abq.2017-08-14.2445562228



  Compiling took 0:00:26.236917 ----------------------------------------------------------

  Starting compiler at 2017-08-14 16:17:49.601382 ----------------------------------------

  Decl { {u'a': Matrix[a, (20, 1), GenMatAccess], u'L0': LowerTriangular[L0, (20, 20), GenMatAccess], u'f': Scalar[f, (1, 1), GenMatAccess], u'K': Symmetric[K, (20, 20), LSMatAccess], u't2': Matrix[t2, (20, 1), GenMatAccess], u'L': LowerTriangular[L, (20, 20), GenMatAccess], u't0': Matrix[t0, (20, 1), GenMatAccess], u't1': Matrix[t1, (20, 1), GenMatAccess], u'X': SquaredMatrix[X, (20, 20), GenMatAccess], u'y': Matrix[y, (20, 1), GenMatAccess], u'lp': Scalar[lp, (1, 1), GenMatAccess], u'v': Matrix[v, (20, 1), GenMatAccess], u'var': Scalar[var, (1, 1), GenMatAccess], u'x': Matrix[x, (20, 1), GenMatAccess], u'kx': Matrix[kx, (20, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Entry 0:
Eq: ( L[20,20] * T( L[20,20] ) ) = K[20,20]
Eq.ann: {}
Entry 1:
Eq: ( L0[20,20] * t0[20,1] ) = y[20,1]
Eq.ann: {}
Entry 2:
Eq: ( T( L0[20,20] ) * a[20,1] ) = t1[20,1]
Eq.ann: {}
Entry 3:
Eq: kx[20,1] = ( X[20,20] * x[20,1] )
Eq.ann: {}
Entry 4:
Eq: f[1,1] = ( T( kx[20,1] ) * y[20,1] )
Eq.ann: {}
Entry 5:
Eq: ( L0[20,20] * v[20,1] ) = t2[20,1]
Eq.ann: {}
Entry 6:
Eq: var[1,1] = ( ( T( x[20,1] ) * x[20,1] ) - ( T( kx[20,1] ) * kx[20,1] ) )
Eq.ann: {}
Entry 7:
Eq: lp[1,1] = ( T( y[20,1] ) * y[20,1] )
Eq.ann: {}
 : VALIDATED.



  20, Decl { {u'a': Matrix[a, (20, 1), GenMatAccess], u'x': Matrix[x, (20, 1), GenMatAccess], u'lp': Scalar[lp, (1, 1), GenMatAccess], u'f': Scalar[f, (1, 1), GenMatAccess], u'K': Symmetric[K, (20, 20), LSMatAccess], u't2': Matrix[t2, (20, 1), GenMatAccess], u'L': LowerTriangular[L, (20, 20), GenMatAccess], u't0': Matrix[t0, (20, 1), GenMatAccess], u't1': Matrix[t1, (20, 1), GenMatAccess], u'var': Scalar[var, (1, 1), GenMatAccess], u'L0': LowerTriangular[L0, (20, 20), GenMatAccess], u'v': Matrix[v, (20, 1), GenMatAccess], u'y': Matrix[y, (20, 1), GenMatAccess], u'X': SquaredMatrix[X, (20, 20), GenMatAccess], u'kx': Matrix[kx, (20, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {'part_schemes': {'Assign_Mul_T_LowerTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_LowerTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'rdiv_ltn_ow_opt': {'m': 'm1.ll', 'n': 'n4.ll'}, 'Assign_Mul_LowerTriangular_T_LowerTriangular_Symmetric_opt': {'m0': 'm01.ll'}}, 'cl1ck_v': 0, 'variant_tag': 'Assign_Mul_LowerTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_LowerTriangular_T_LowerTriangular_Symmetric_opt_m01_Assign_Mul_T_LowerTriangular_Matrix_Matrix_opt_m04_m21_rdiv_ltn_ow_opt_m1_n4'}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Eq: Tile( (1, 1), G(h(1, 20, 0), L[20,20],h(1, 20, 0)) ) = Sqrt( Tile( (1, 1), G(h(1, 20, 0), L[20,20],h(1, 20, 0)) ) )
Eq.ann: {}
Entry 1:
For_{fi18;1;19;1} ( Entry 0:
For_{fi43;0;fi18 - 2;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 20, fi18), L[20,20],h(1, 20, fi43)) ) = ( Tile( (1, 1), G(h(1, 20, fi18), L[20,20],h(1, 20, fi43)) ) Div Tile( (1, 1), G(h(1, 20, fi43), L[20,20],h(1, 20, fi43)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(1, 20, fi18), L[20,20],h(fi18 - fi43 - 1, 20, fi43 + 1)) ) = ( Tile( (1, 1), G(h(1, 20, fi18), L[20,20],h(fi18 - fi43 - 1, 20, fi43 + 1)) ) - ( Tile( (1, 1), G(h(1, 20, fi18), L[20,20],h(1, 20, fi43)) ) Kro T( Tile( (1, 1), G(h(fi18 - fi43 - 1, 20, fi43 + 1), L[20,20],h(1, 20, fi43)) ) ) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(1, 20, fi18), L[20,20],h(1, 20, Max(0, fi18 - 1))) ) = ( Tile( (1, 1), G(h(1, 20, fi18), L[20,20],h(1, 20, Max(0, fi18 - 1))) ) Div Tile( (1, 1), G(h(1, 20, Max(0, fi18 - 1)), L[20,20],h(1, 20, Max(0, fi18 - 1))) ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), G(h(1, 20, fi18), L[20,20],h(1, 20, fi18)) ) = ( Tile( (1, 1), G(h(1, 20, fi18), K[20,20],h(1, 20, fi18)) ) - ( Tile( (1, 1), G(h(1, 20, fi18), L[20,20],h(fi18, 20, 0)) ) * T( Tile( (1, 1), G(h(1, 20, fi18), L[20,20],h(fi18, 20, 0)) ) ) ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), G(h(1, 20, fi18), L[20,20],h(1, 20, fi18)) ) = Sqrt( Tile( (1, 1), G(h(1, 20, fi18), L[20,20],h(1, 20, fi18)) ) )
Eq.ann: {}
 )Entry 2:
For_{fi75;0;18;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 20, fi75), t0[20,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 20, fi75), t0[20,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 20, fi75), L0[20,20],h(1, 20, fi75)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi75 + 19, 20, fi75 + 1), t0[20,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi75 + 19, 20, fi75 + 1), t0[20,1],h(1, 1, 0)) ) - ( Tile( (1, 1), G(h(-fi75 + 19, 20, fi75 + 1), L0[20,20],h(1, 20, fi75)) ) Kro Tile( (1, 1), G(h(1, 20, fi75), t0[20,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 3:
Eq: Tile( (1, 1), G(h(1, 20, 19), t0[20,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 20, 19), t0[20,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 20, 19), L0[20,20],h(1, 20, 19)) ) )
Eq.ann: {}
Entry 4:
For_{fi104;0;18;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 20, -fi104 + 19), a[20,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 20, -fi104 + 19), a[20,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 20, -fi104 + 19), L0[20,20],h(1, 20, -fi104 + 19)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi104 + 19, 20, 0), a[20,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi104 + 19, 20, 0), a[20,1],h(1, 1, 0)) ) - ( T( Tile( (1, 1), G(h(1, 20, -fi104 + 19), L0[20,20],h(-fi104 + 19, 20, 0)) ) ) Kro Tile( (1, 1), G(h(1, 20, -fi104 + 19), a[20,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 5:
Eq: Tile( (1, 1), G(h(1, 20, 0), a[20,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 20, 0), a[20,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 20, 0), L0[20,20],h(1, 20, 0)) ) )
Eq.ann: {}
Entry 6:
Eq: Tile( (1, 1), kx[20,1] ) = ( Tile( (1, 1), X[20,20] ) * Tile( (1, 1), x[20,1] ) )
Eq.ann: {}
Entry 7:
Eq: Tile( (1, 1), f[1,1] ) = ( T( Tile( (1, 1), kx[20,1] ) ) * Tile( (1, 1), y[20,1] ) )
Eq.ann: {}
Entry 8:
For_{fi133;0;18;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 20, fi133), v[20,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 20, fi133), v[20,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 20, fi133), L0[20,20],h(1, 20, fi133)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi133 + 19, 20, fi133 + 1), v[20,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi133 + 19, 20, fi133 + 1), v[20,1],h(1, 1, 0)) ) - ( Tile( (1, 1), G(h(-fi133 + 19, 20, fi133 + 1), L0[20,20],h(1, 20, fi133)) ) Kro Tile( (1, 1), G(h(1, 20, fi133), v[20,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 9:
Eq: Tile( (1, 1), G(h(1, 20, 19), v[20,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 20, 19), v[20,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 20, 19), L0[20,20],h(1, 20, 19)) ) )
Eq.ann: {}
Entry 10:
Eq: Tile( (1, 1), var[1,1] ) = ( ( T( Tile( (1, 1), x[20,1] ) ) * Tile( (1, 1), x[20,1] ) ) - ( T( Tile( (1, 1), kx[20,1] ) ) * Tile( (1, 1), kx[20,1] ) ) )
Eq.ann: {}
Entry 11:
Eq: Tile( (1, 1), lp[1,1] ) = ( T( Tile( (1, 1), y[20,1] ) ) * Tile( (1, 1), y[20,1] ) )
Eq.ann: {}
, 0.386013163893 f/c -- folder: /tmp/lgen/gpr-4-52-8.hand.abq.2017-08-14.2445562228



  Compiling took 0:00:25.799627 ----------------------------------------------------------

  Starting compiler at 2017-08-14 16:18:16.373984 ----------------------------------------

  Decl { {u'a': Matrix[a, (28, 1), GenMatAccess], u'L0': LowerTriangular[L0, (28, 28), GenMatAccess], u'f': Scalar[f, (1, 1), GenMatAccess], u'K': Symmetric[K, (28, 28), LSMatAccess], u't2': Matrix[t2, (28, 1), GenMatAccess], u'L': LowerTriangular[L, (28, 28), GenMatAccess], u't0': Matrix[t0, (28, 1), GenMatAccess], u't1': Matrix[t1, (28, 1), GenMatAccess], u'X': SquaredMatrix[X, (28, 28), GenMatAccess], u'y': Matrix[y, (28, 1), GenMatAccess], u'lp': Scalar[lp, (1, 1), GenMatAccess], u'v': Matrix[v, (28, 1), GenMatAccess], u'var': Scalar[var, (1, 1), GenMatAccess], u'x': Matrix[x, (28, 1), GenMatAccess], u'kx': Matrix[kx, (28, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Entry 0:
Eq: ( L[28,28] * T( L[28,28] ) ) = K[28,28]
Eq.ann: {}
Entry 1:
Eq: ( L0[28,28] * t0[28,1] ) = y[28,1]
Eq.ann: {}
Entry 2:
Eq: ( T( L0[28,28] ) * a[28,1] ) = t1[28,1]
Eq.ann: {}
Entry 3:
Eq: kx[28,1] = ( X[28,28] * x[28,1] )
Eq.ann: {}
Entry 4:
Eq: f[1,1] = ( T( kx[28,1] ) * y[28,1] )
Eq.ann: {}
Entry 5:
Eq: ( L0[28,28] * v[28,1] ) = t2[28,1]
Eq.ann: {}
Entry 6:
Eq: var[1,1] = ( ( T( x[28,1] ) * x[28,1] ) - ( T( kx[28,1] ) * kx[28,1] ) )
Eq.ann: {}
Entry 7:
Eq: lp[1,1] = ( T( y[28,1] ) * y[28,1] )
Eq.ann: {}
 : VALIDATED.



  28, Decl { {u'a': Matrix[a, (28, 1), GenMatAccess], u'x': Matrix[x, (28, 1), GenMatAccess], u'lp': Scalar[lp, (1, 1), GenMatAccess], u'f': Scalar[f, (1, 1), GenMatAccess], u'K': Symmetric[K, (28, 28), LSMatAccess], u't2': Matrix[t2, (28, 1), GenMatAccess], u'L': LowerTriangular[L, (28, 28), GenMatAccess], u't0': Matrix[t0, (28, 1), GenMatAccess], u't1': Matrix[t1, (28, 1), GenMatAccess], u'var': Scalar[var, (1, 1), GenMatAccess], u'L0': LowerTriangular[L0, (28, 28), GenMatAccess], u'v': Matrix[v, (28, 1), GenMatAccess], u'y': Matrix[y, (28, 1), GenMatAccess], u'X': SquaredMatrix[X, (28, 28), GenMatAccess], u'kx': Matrix[kx, (28, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {'part_schemes': {'Assign_Mul_T_LowerTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_LowerTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'rdiv_ltn_ow_opt': {'m': 'm1.ll', 'n': 'n4.ll'}, 'Assign_Mul_LowerTriangular_T_LowerTriangular_Symmetric_opt': {'m0': 'm01.ll'}}, 'cl1ck_v': 0, 'variant_tag': 'Assign_Mul_LowerTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_LowerTriangular_T_LowerTriangular_Symmetric_opt_m01_Assign_Mul_T_LowerTriangular_Matrix_Matrix_opt_m04_m21_rdiv_ltn_ow_opt_m1_n4'}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Eq: Tile( (1, 1), G(h(1, 28, 0), L[28,28],h(1, 28, 0)) ) = Sqrt( Tile( (1, 1), G(h(1, 28, 0), L[28,28],h(1, 28, 0)) ) )
Eq.ann: {}
Entry 1:
For_{fi18;1;27;1} ( Entry 0:
For_{fi43;0;fi18 - 2;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 28, fi18), L[28,28],h(1, 28, fi43)) ) = ( Tile( (1, 1), G(h(1, 28, fi18), L[28,28],h(1, 28, fi43)) ) Div Tile( (1, 1), G(h(1, 28, fi43), L[28,28],h(1, 28, fi43)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(1, 28, fi18), L[28,28],h(fi18 - fi43 - 1, 28, fi43 + 1)) ) = ( Tile( (1, 1), G(h(1, 28, fi18), L[28,28],h(fi18 - fi43 - 1, 28, fi43 + 1)) ) - ( Tile( (1, 1), G(h(1, 28, fi18), L[28,28],h(1, 28, fi43)) ) Kro T( Tile( (1, 1), G(h(fi18 - fi43 - 1, 28, fi43 + 1), L[28,28],h(1, 28, fi43)) ) ) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(1, 28, fi18), L[28,28],h(1, 28, Max(0, fi18 - 1))) ) = ( Tile( (1, 1), G(h(1, 28, fi18), L[28,28],h(1, 28, Max(0, fi18 - 1))) ) Div Tile( (1, 1), G(h(1, 28, Max(0, fi18 - 1)), L[28,28],h(1, 28, Max(0, fi18 - 1))) ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), G(h(1, 28, fi18), L[28,28],h(1, 28, fi18)) ) = ( Tile( (1, 1), G(h(1, 28, fi18), K[28,28],h(1, 28, fi18)) ) - ( Tile( (1, 1), G(h(1, 28, fi18), L[28,28],h(fi18, 28, 0)) ) * T( Tile( (1, 1), G(h(1, 28, fi18), L[28,28],h(fi18, 28, 0)) ) ) ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), G(h(1, 28, fi18), L[28,28],h(1, 28, fi18)) ) = Sqrt( Tile( (1, 1), G(h(1, 28, fi18), L[28,28],h(1, 28, fi18)) ) )
Eq.ann: {}
 )Entry 2:
For_{fi75;0;26;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 28, fi75), t0[28,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 28, fi75), t0[28,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 28, fi75), L0[28,28],h(1, 28, fi75)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi75 + 27, 28, fi75 + 1), t0[28,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi75 + 27, 28, fi75 + 1), t0[28,1],h(1, 1, 0)) ) - ( Tile( (1, 1), G(h(-fi75 + 27, 28, fi75 + 1), L0[28,28],h(1, 28, fi75)) ) Kro Tile( (1, 1), G(h(1, 28, fi75), t0[28,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 3:
Eq: Tile( (1, 1), G(h(1, 28, 27), t0[28,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 28, 27), t0[28,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 28, 27), L0[28,28],h(1, 28, 27)) ) )
Eq.ann: {}
Entry 4:
For_{fi104;0;26;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 28, -fi104 + 27), a[28,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 28, -fi104 + 27), a[28,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 28, -fi104 + 27), L0[28,28],h(1, 28, -fi104 + 27)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi104 + 27, 28, 0), a[28,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi104 + 27, 28, 0), a[28,1],h(1, 1, 0)) ) - ( T( Tile( (1, 1), G(h(1, 28, -fi104 + 27), L0[28,28],h(-fi104 + 27, 28, 0)) ) ) Kro Tile( (1, 1), G(h(1, 28, -fi104 + 27), a[28,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 5:
Eq: Tile( (1, 1), G(h(1, 28, 0), a[28,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 28, 0), a[28,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 28, 0), L0[28,28],h(1, 28, 0)) ) )
Eq.ann: {}
Entry 6:
Eq: Tile( (1, 1), kx[28,1] ) = ( Tile( (1, 1), X[28,28] ) * Tile( (1, 1), x[28,1] ) )
Eq.ann: {}
Entry 7:
Eq: Tile( (1, 1), f[1,1] ) = ( T( Tile( (1, 1), kx[28,1] ) ) * Tile( (1, 1), y[28,1] ) )
Eq.ann: {}
Entry 8:
For_{fi133;0;26;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 28, fi133), v[28,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 28, fi133), v[28,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 28, fi133), L0[28,28],h(1, 28, fi133)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi133 + 27, 28, fi133 + 1), v[28,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi133 + 27, 28, fi133 + 1), v[28,1],h(1, 1, 0)) ) - ( Tile( (1, 1), G(h(-fi133 + 27, 28, fi133 + 1), L0[28,28],h(1, 28, fi133)) ) Kro Tile( (1, 1), G(h(1, 28, fi133), v[28,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 9:
Eq: Tile( (1, 1), G(h(1, 28, 27), v[28,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 28, 27), v[28,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 28, 27), L0[28,28],h(1, 28, 27)) ) )
Eq.ann: {}
Entry 10:
Eq: Tile( (1, 1), var[1,1] ) = ( ( T( Tile( (1, 1), x[28,1] ) ) * Tile( (1, 1), x[28,1] ) ) - ( T( Tile( (1, 1), kx[28,1] ) ) * Tile( (1, 1), kx[28,1] ) ) )
Eq.ann: {}
Entry 11:
Eq: Tile( (1, 1), lp[1,1] ) = ( T( Tile( (1, 1), y[28,1] ) ) * Tile( (1, 1), y[28,1] ) )
Eq.ann: {}
, 0.437923880192 f/c -- folder: /tmp/lgen/gpr-4-52-8.hand.abq.2017-08-14.2445562228



  Compiling took 0:00:26.005087 ----------------------------------------------------------

  Starting compiler at 2017-08-14 16:18:43.359779 ----------------------------------------

  Decl { {u'a': Matrix[a, (36, 1), GenMatAccess], u'L0': LowerTriangular[L0, (36, 36), GenMatAccess], u'f': Scalar[f, (1, 1), GenMatAccess], u'K': Symmetric[K, (36, 36), LSMatAccess], u't2': Matrix[t2, (36, 1), GenMatAccess], u'L': LowerTriangular[L, (36, 36), GenMatAccess], u't0': Matrix[t0, (36, 1), GenMatAccess], u't1': Matrix[t1, (36, 1), GenMatAccess], u'X': SquaredMatrix[X, (36, 36), GenMatAccess], u'y': Matrix[y, (36, 1), GenMatAccess], u'lp': Scalar[lp, (1, 1), GenMatAccess], u'v': Matrix[v, (36, 1), GenMatAccess], u'var': Scalar[var, (1, 1), GenMatAccess], u'x': Matrix[x, (36, 1), GenMatAccess], u'kx': Matrix[kx, (36, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Entry 0:
Eq: ( L[36,36] * T( L[36,36] ) ) = K[36,36]
Eq.ann: {}
Entry 1:
Eq: ( L0[36,36] * t0[36,1] ) = y[36,1]
Eq.ann: {}
Entry 2:
Eq: ( T( L0[36,36] ) * a[36,1] ) = t1[36,1]
Eq.ann: {}
Entry 3:
Eq: kx[36,1] = ( X[36,36] * x[36,1] )
Eq.ann: {}
Entry 4:
Eq: f[1,1] = ( T( kx[36,1] ) * y[36,1] )
Eq.ann: {}
Entry 5:
Eq: ( L0[36,36] * v[36,1] ) = t2[36,1]
Eq.ann: {}
Entry 6:
Eq: var[1,1] = ( ( T( x[36,1] ) * x[36,1] ) - ( T( kx[36,1] ) * kx[36,1] ) )
Eq.ann: {}
Entry 7:
Eq: lp[1,1] = ( T( y[36,1] ) * y[36,1] )
Eq.ann: {}
 : VALIDATED.



  36, Decl { {u'a': Matrix[a, (36, 1), GenMatAccess], u'x': Matrix[x, (36, 1), GenMatAccess], u'lp': Scalar[lp, (1, 1), GenMatAccess], u'f': Scalar[f, (1, 1), GenMatAccess], u'K': Symmetric[K, (36, 36), LSMatAccess], u't2': Matrix[t2, (36, 1), GenMatAccess], u'L': LowerTriangular[L, (36, 36), GenMatAccess], u't0': Matrix[t0, (36, 1), GenMatAccess], u't1': Matrix[t1, (36, 1), GenMatAccess], u'var': Scalar[var, (1, 1), GenMatAccess], u'L0': LowerTriangular[L0, (36, 36), GenMatAccess], u'v': Matrix[v, (36, 1), GenMatAccess], u'y': Matrix[y, (36, 1), GenMatAccess], u'X': SquaredMatrix[X, (36, 36), GenMatAccess], u'kx': Matrix[kx, (36, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {'part_schemes': {'Assign_Mul_T_LowerTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_LowerTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'rdiv_ltn_ow_opt': {'m': 'm1.ll', 'n': 'n4.ll'}, 'Assign_Mul_LowerTriangular_T_LowerTriangular_Symmetric_opt': {'m0': 'm01.ll'}}, 'cl1ck_v': 0, 'variant_tag': 'Assign_Mul_LowerTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_LowerTriangular_T_LowerTriangular_Symmetric_opt_m01_Assign_Mul_T_LowerTriangular_Matrix_Matrix_opt_m04_m21_rdiv_ltn_ow_opt_m1_n4'}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Eq: Tile( (1, 1), G(h(1, 36, 0), L[36,36],h(1, 36, 0)) ) = Sqrt( Tile( (1, 1), G(h(1, 36, 0), L[36,36],h(1, 36, 0)) ) )
Eq.ann: {}
Entry 1:
For_{fi18;1;35;1} ( Entry 0:
For_{fi43;0;fi18 - 2;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 36, fi18), L[36,36],h(1, 36, fi43)) ) = ( Tile( (1, 1), G(h(1, 36, fi18), L[36,36],h(1, 36, fi43)) ) Div Tile( (1, 1), G(h(1, 36, fi43), L[36,36],h(1, 36, fi43)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(1, 36, fi18), L[36,36],h(fi18 - fi43 - 1, 36, fi43 + 1)) ) = ( Tile( (1, 1), G(h(1, 36, fi18), L[36,36],h(fi18 - fi43 - 1, 36, fi43 + 1)) ) - ( Tile( (1, 1), G(h(1, 36, fi18), L[36,36],h(1, 36, fi43)) ) Kro T( Tile( (1, 1), G(h(fi18 - fi43 - 1, 36, fi43 + 1), L[36,36],h(1, 36, fi43)) ) ) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(1, 36, fi18), L[36,36],h(1, 36, Max(0, fi18 - 1))) ) = ( Tile( (1, 1), G(h(1, 36, fi18), L[36,36],h(1, 36, Max(0, fi18 - 1))) ) Div Tile( (1, 1), G(h(1, 36, Max(0, fi18 - 1)), L[36,36],h(1, 36, Max(0, fi18 - 1))) ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), G(h(1, 36, fi18), L[36,36],h(1, 36, fi18)) ) = ( Tile( (1, 1), G(h(1, 36, fi18), K[36,36],h(1, 36, fi18)) ) - ( Tile( (1, 1), G(h(1, 36, fi18), L[36,36],h(fi18, 36, 0)) ) * T( Tile( (1, 1), G(h(1, 36, fi18), L[36,36],h(fi18, 36, 0)) ) ) ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), G(h(1, 36, fi18), L[36,36],h(1, 36, fi18)) ) = Sqrt( Tile( (1, 1), G(h(1, 36, fi18), L[36,36],h(1, 36, fi18)) ) )
Eq.ann: {}
 )Entry 2:
For_{fi75;0;34;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 36, fi75), t0[36,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 36, fi75), t0[36,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 36, fi75), L0[36,36],h(1, 36, fi75)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi75 + 35, 36, fi75 + 1), t0[36,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi75 + 35, 36, fi75 + 1), t0[36,1],h(1, 1, 0)) ) - ( Tile( (1, 1), G(h(-fi75 + 35, 36, fi75 + 1), L0[36,36],h(1, 36, fi75)) ) Kro Tile( (1, 1), G(h(1, 36, fi75), t0[36,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 3:
Eq: Tile( (1, 1), G(h(1, 36, 35), t0[36,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 36, 35), t0[36,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 36, 35), L0[36,36],h(1, 36, 35)) ) )
Eq.ann: {}
Entry 4:
For_{fi104;0;34;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 36, -fi104 + 35), a[36,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 36, -fi104 + 35), a[36,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 36, -fi104 + 35), L0[36,36],h(1, 36, -fi104 + 35)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi104 + 35, 36, 0), a[36,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi104 + 35, 36, 0), a[36,1],h(1, 1, 0)) ) - ( T( Tile( (1, 1), G(h(1, 36, -fi104 + 35), L0[36,36],h(-fi104 + 35, 36, 0)) ) ) Kro Tile( (1, 1), G(h(1, 36, -fi104 + 35), a[36,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 5:
Eq: Tile( (1, 1), G(h(1, 36, 0), a[36,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 36, 0), a[36,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 36, 0), L0[36,36],h(1, 36, 0)) ) )
Eq.ann: {}
Entry 6:
Eq: Tile( (1, 1), kx[36,1] ) = ( Tile( (1, 1), X[36,36] ) * Tile( (1, 1), x[36,1] ) )
Eq.ann: {}
Entry 7:
Eq: Tile( (1, 1), f[1,1] ) = ( T( Tile( (1, 1), kx[36,1] ) ) * Tile( (1, 1), y[36,1] ) )
Eq.ann: {}
Entry 8:
For_{fi133;0;34;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 36, fi133), v[36,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 36, fi133), v[36,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 36, fi133), L0[36,36],h(1, 36, fi133)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi133 + 35, 36, fi133 + 1), v[36,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi133 + 35, 36, fi133 + 1), v[36,1],h(1, 1, 0)) ) - ( Tile( (1, 1), G(h(-fi133 + 35, 36, fi133 + 1), L0[36,36],h(1, 36, fi133)) ) Kro Tile( (1, 1), G(h(1, 36, fi133), v[36,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 9:
Eq: Tile( (1, 1), G(h(1, 36, 35), v[36,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 36, 35), v[36,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 36, 35), L0[36,36],h(1, 36, 35)) ) )
Eq.ann: {}
Entry 10:
Eq: Tile( (1, 1), var[1,1] ) = ( ( T( Tile( (1, 1), x[36,1] ) ) * Tile( (1, 1), x[36,1] ) ) - ( T( Tile( (1, 1), kx[36,1] ) ) * Tile( (1, 1), kx[36,1] ) ) )
Eq.ann: {}
Entry 11:
Eq: Tile( (1, 1), lp[1,1] ) = ( T( Tile( (1, 1), y[36,1] ) ) * Tile( (1, 1), y[36,1] ) )
Eq.ann: {}
, 0.48058600487 f/c -- folder: /tmp/lgen/gpr-4-52-8.hand.abq.2017-08-14.2445562228



  Compiling took 0:00:25.918497 ----------------------------------------------------------

  Starting compiler at 2017-08-14 16:19:10.449714 ----------------------------------------

  Decl { {u'a': Matrix[a, (44, 1), GenMatAccess], u'L0': LowerTriangular[L0, (44, 44), GenMatAccess], u'f': Scalar[f, (1, 1), GenMatAccess], u'K': Symmetric[K, (44, 44), LSMatAccess], u't2': Matrix[t2, (44, 1), GenMatAccess], u'L': LowerTriangular[L, (44, 44), GenMatAccess], u't0': Matrix[t0, (44, 1), GenMatAccess], u't1': Matrix[t1, (44, 1), GenMatAccess], u'X': SquaredMatrix[X, (44, 44), GenMatAccess], u'y': Matrix[y, (44, 1), GenMatAccess], u'lp': Scalar[lp, (1, 1), GenMatAccess], u'v': Matrix[v, (44, 1), GenMatAccess], u'var': Scalar[var, (1, 1), GenMatAccess], u'x': Matrix[x, (44, 1), GenMatAccess], u'kx': Matrix[kx, (44, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Entry 0:
Eq: ( L[44,44] * T( L[44,44] ) ) = K[44,44]
Eq.ann: {}
Entry 1:
Eq: ( L0[44,44] * t0[44,1] ) = y[44,1]
Eq.ann: {}
Entry 2:
Eq: ( T( L0[44,44] ) * a[44,1] ) = t1[44,1]
Eq.ann: {}
Entry 3:
Eq: kx[44,1] = ( X[44,44] * x[44,1] )
Eq.ann: {}
Entry 4:
Eq: f[1,1] = ( T( kx[44,1] ) * y[44,1] )
Eq.ann: {}
Entry 5:
Eq: ( L0[44,44] * v[44,1] ) = t2[44,1]
Eq.ann: {}
Entry 6:
Eq: var[1,1] = ( ( T( x[44,1] ) * x[44,1] ) - ( T( kx[44,1] ) * kx[44,1] ) )
Eq.ann: {}
Entry 7:
Eq: lp[1,1] = ( T( y[44,1] ) * y[44,1] )
Eq.ann: {}
 : VALIDATED.



  44, Decl { {u'a': Matrix[a, (44, 1), GenMatAccess], u'x': Matrix[x, (44, 1), GenMatAccess], u'lp': Scalar[lp, (1, 1), GenMatAccess], u'f': Scalar[f, (1, 1), GenMatAccess], u'K': Symmetric[K, (44, 44), LSMatAccess], u't2': Matrix[t2, (44, 1), GenMatAccess], u'L': LowerTriangular[L, (44, 44), GenMatAccess], u't0': Matrix[t0, (44, 1), GenMatAccess], u't1': Matrix[t1, (44, 1), GenMatAccess], u'var': Scalar[var, (1, 1), GenMatAccess], u'L0': LowerTriangular[L0, (44, 44), GenMatAccess], u'v': Matrix[v, (44, 1), GenMatAccess], u'y': Matrix[y, (44, 1), GenMatAccess], u'X': SquaredMatrix[X, (44, 44), GenMatAccess], u'kx': Matrix[kx, (44, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {'part_schemes': {'Assign_Mul_T_LowerTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_LowerTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'rdiv_ltn_ow_opt': {'m': 'm1.ll', 'n': 'n4.ll'}, 'Assign_Mul_LowerTriangular_T_LowerTriangular_Symmetric_opt': {'m0': 'm01.ll'}}, 'cl1ck_v': 0, 'variant_tag': 'Assign_Mul_LowerTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_LowerTriangular_T_LowerTriangular_Symmetric_opt_m01_Assign_Mul_T_LowerTriangular_Matrix_Matrix_opt_m04_m21_rdiv_ltn_ow_opt_m1_n4'}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Eq: Tile( (1, 1), G(h(1, 44, 0), L[44,44],h(1, 44, 0)) ) = Sqrt( Tile( (1, 1), G(h(1, 44, 0), L[44,44],h(1, 44, 0)) ) )
Eq.ann: {}
Entry 1:
For_{fi18;1;43;1} ( Entry 0:
For_{fi43;0;fi18 - 2;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 44, fi18), L[44,44],h(1, 44, fi43)) ) = ( Tile( (1, 1), G(h(1, 44, fi18), L[44,44],h(1, 44, fi43)) ) Div Tile( (1, 1), G(h(1, 44, fi43), L[44,44],h(1, 44, fi43)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(1, 44, fi18), L[44,44],h(fi18 - fi43 - 1, 44, fi43 + 1)) ) = ( Tile( (1, 1), G(h(1, 44, fi18), L[44,44],h(fi18 - fi43 - 1, 44, fi43 + 1)) ) - ( Tile( (1, 1), G(h(1, 44, fi18), L[44,44],h(1, 44, fi43)) ) Kro T( Tile( (1, 1), G(h(fi18 - fi43 - 1, 44, fi43 + 1), L[44,44],h(1, 44, fi43)) ) ) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(1, 44, fi18), L[44,44],h(1, 44, Max(0, fi18 - 1))) ) = ( Tile( (1, 1), G(h(1, 44, fi18), L[44,44],h(1, 44, Max(0, fi18 - 1))) ) Div Tile( (1, 1), G(h(1, 44, Max(0, fi18 - 1)), L[44,44],h(1, 44, Max(0, fi18 - 1))) ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), G(h(1, 44, fi18), L[44,44],h(1, 44, fi18)) ) = ( Tile( (1, 1), G(h(1, 44, fi18), K[44,44],h(1, 44, fi18)) ) - ( Tile( (1, 1), G(h(1, 44, fi18), L[44,44],h(fi18, 44, 0)) ) * T( Tile( (1, 1), G(h(1, 44, fi18), L[44,44],h(fi18, 44, 0)) ) ) ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), G(h(1, 44, fi18), L[44,44],h(1, 44, fi18)) ) = Sqrt( Tile( (1, 1), G(h(1, 44, fi18), L[44,44],h(1, 44, fi18)) ) )
Eq.ann: {}
 )Entry 2:
For_{fi75;0;42;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 44, fi75), t0[44,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 44, fi75), t0[44,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 44, fi75), L0[44,44],h(1, 44, fi75)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi75 + 43, 44, fi75 + 1), t0[44,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi75 + 43, 44, fi75 + 1), t0[44,1],h(1, 1, 0)) ) - ( Tile( (1, 1), G(h(-fi75 + 43, 44, fi75 + 1), L0[44,44],h(1, 44, fi75)) ) Kro Tile( (1, 1), G(h(1, 44, fi75), t0[44,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 3:
Eq: Tile( (1, 1), G(h(1, 44, 43), t0[44,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 44, 43), t0[44,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 44, 43), L0[44,44],h(1, 44, 43)) ) )
Eq.ann: {}
Entry 4:
For_{fi104;0;42;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 44, -fi104 + 43), a[44,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 44, -fi104 + 43), a[44,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 44, -fi104 + 43), L0[44,44],h(1, 44, -fi104 + 43)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi104 + 43, 44, 0), a[44,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi104 + 43, 44, 0), a[44,1],h(1, 1, 0)) ) - ( T( Tile( (1, 1), G(h(1, 44, -fi104 + 43), L0[44,44],h(-fi104 + 43, 44, 0)) ) ) Kro Tile( (1, 1), G(h(1, 44, -fi104 + 43), a[44,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 5:
Eq: Tile( (1, 1), G(h(1, 44, 0), a[44,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 44, 0), a[44,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 44, 0), L0[44,44],h(1, 44, 0)) ) )
Eq.ann: {}
Entry 6:
Eq: Tile( (1, 1), kx[44,1] ) = ( Tile( (1, 1), X[44,44] ) * Tile( (1, 1), x[44,1] ) )
Eq.ann: {}
Entry 7:
Eq: Tile( (1, 1), f[1,1] ) = ( T( Tile( (1, 1), kx[44,1] ) ) * Tile( (1, 1), y[44,1] ) )
Eq.ann: {}
Entry 8:
For_{fi133;0;42;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 44, fi133), v[44,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 44, fi133), v[44,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 44, fi133), L0[44,44],h(1, 44, fi133)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi133 + 43, 44, fi133 + 1), v[44,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi133 + 43, 44, fi133 + 1), v[44,1],h(1, 1, 0)) ) - ( Tile( (1, 1), G(h(-fi133 + 43, 44, fi133 + 1), L0[44,44],h(1, 44, fi133)) ) Kro Tile( (1, 1), G(h(1, 44, fi133), v[44,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 9:
Eq: Tile( (1, 1), G(h(1, 44, 43), v[44,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 44, 43), v[44,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 44, 43), L0[44,44],h(1, 44, 43)) ) )
Eq.ann: {}
Entry 10:
Eq: Tile( (1, 1), var[1,1] ) = ( ( T( Tile( (1, 1), x[44,1] ) ) * Tile( (1, 1), x[44,1] ) ) - ( T( Tile( (1, 1), kx[44,1] ) ) * Tile( (1, 1), kx[44,1] ) ) )
Eq.ann: {}
Entry 11:
Eq: Tile( (1, 1), lp[1,1] ) = ( T( Tile( (1, 1), y[44,1] ) ) * Tile( (1, 1), y[44,1] ) )
Eq.ann: {}
, 0.503165514162 f/c -- folder: /tmp/lgen/gpr-4-52-8.hand.abq.2017-08-14.2445562228



  Compiling took 0:00:25.821873 ----------------------------------------------------------

  Starting compiler at 2017-08-14 16:19:37.246695 ----------------------------------------

  Decl { {u'a': Matrix[a, (52, 1), GenMatAccess], u'L0': LowerTriangular[L0, (52, 52), GenMatAccess], u'f': Scalar[f, (1, 1), GenMatAccess], u'K': Symmetric[K, (52, 52), LSMatAccess], u't2': Matrix[t2, (52, 1), GenMatAccess], u'L': LowerTriangular[L, (52, 52), GenMatAccess], u't0': Matrix[t0, (52, 1), GenMatAccess], u't1': Matrix[t1, (52, 1), GenMatAccess], u'X': SquaredMatrix[X, (52, 52), GenMatAccess], u'y': Matrix[y, (52, 1), GenMatAccess], u'lp': Scalar[lp, (1, 1), GenMatAccess], u'v': Matrix[v, (52, 1), GenMatAccess], u'var': Scalar[var, (1, 1), GenMatAccess], u'x': Matrix[x, (52, 1), GenMatAccess], u'kx': Matrix[kx, (52, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Entry 0:
Eq: ( L[52,52] * T( L[52,52] ) ) = K[52,52]
Eq.ann: {}
Entry 1:
Eq: ( L0[52,52] * t0[52,1] ) = y[52,1]
Eq.ann: {}
Entry 2:
Eq: ( T( L0[52,52] ) * a[52,1] ) = t1[52,1]
Eq.ann: {}
Entry 3:
Eq: kx[52,1] = ( X[52,52] * x[52,1] )
Eq.ann: {}
Entry 4:
Eq: f[1,1] = ( T( kx[52,1] ) * y[52,1] )
Eq.ann: {}
Entry 5:
Eq: ( L0[52,52] * v[52,1] ) = t2[52,1]
Eq.ann: {}
Entry 6:
Eq: var[1,1] = ( ( T( x[52,1] ) * x[52,1] ) - ( T( kx[52,1] ) * kx[52,1] ) )
Eq.ann: {}
Entry 7:
Eq: lp[1,1] = ( T( y[52,1] ) * y[52,1] )
Eq.ann: {}
 : VALIDATED.



  52, Decl { {u'a': Matrix[a, (52, 1), GenMatAccess], u'x': Matrix[x, (52, 1), GenMatAccess], u'lp': Scalar[lp, (1, 1), GenMatAccess], u'f': Scalar[f, (1, 1), GenMatAccess], u'K': Symmetric[K, (52, 52), LSMatAccess], u't2': Matrix[t2, (52, 1), GenMatAccess], u'L': LowerTriangular[L, (52, 52), GenMatAccess], u't0': Matrix[t0, (52, 1), GenMatAccess], u't1': Matrix[t1, (52, 1), GenMatAccess], u'var': Scalar[var, (1, 1), GenMatAccess], u'L0': LowerTriangular[L0, (52, 52), GenMatAccess], u'v': Matrix[v, (52, 1), GenMatAccess], u'y': Matrix[y, (52, 1), GenMatAccess], u'X': SquaredMatrix[X, (52, 52), GenMatAccess], u'kx': Matrix[kx, (52, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {'part_schemes': {'Assign_Mul_T_LowerTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_LowerTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'rdiv_ltn_ow_opt': {'m': 'm1.ll', 'n': 'n4.ll'}, 'Assign_Mul_LowerTriangular_T_LowerTriangular_Symmetric_opt': {'m0': 'm01.ll'}}, 'cl1ck_v': 0, 'variant_tag': 'Assign_Mul_LowerTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_LowerTriangular_T_LowerTriangular_Symmetric_opt_m01_Assign_Mul_T_LowerTriangular_Matrix_Matrix_opt_m04_m21_rdiv_ltn_ow_opt_m1_n4'}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Eq: Tile( (1, 1), G(h(1, 52, 0), L[52,52],h(1, 52, 0)) ) = Sqrt( Tile( (1, 1), G(h(1, 52, 0), L[52,52],h(1, 52, 0)) ) )
Eq.ann: {}
Entry 1:
For_{fi18;1;51;1} ( Entry 0:
For_{fi43;0;fi18 - 2;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 52, fi18), L[52,52],h(1, 52, fi43)) ) = ( Tile( (1, 1), G(h(1, 52, fi18), L[52,52],h(1, 52, fi43)) ) Div Tile( (1, 1), G(h(1, 52, fi43), L[52,52],h(1, 52, fi43)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(1, 52, fi18), L[52,52],h(fi18 - fi43 - 1, 52, fi43 + 1)) ) = ( Tile( (1, 1), G(h(1, 52, fi18), L[52,52],h(fi18 - fi43 - 1, 52, fi43 + 1)) ) - ( Tile( (1, 1), G(h(1, 52, fi18), L[52,52],h(1, 52, fi43)) ) Kro T( Tile( (1, 1), G(h(fi18 - fi43 - 1, 52, fi43 + 1), L[52,52],h(1, 52, fi43)) ) ) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(1, 52, fi18), L[52,52],h(1, 52, Max(0, fi18 - 1))) ) = ( Tile( (1, 1), G(h(1, 52, fi18), L[52,52],h(1, 52, Max(0, fi18 - 1))) ) Div Tile( (1, 1), G(h(1, 52, Max(0, fi18 - 1)), L[52,52],h(1, 52, Max(0, fi18 - 1))) ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), G(h(1, 52, fi18), L[52,52],h(1, 52, fi18)) ) = ( Tile( (1, 1), G(h(1, 52, fi18), K[52,52],h(1, 52, fi18)) ) - ( Tile( (1, 1), G(h(1, 52, fi18), L[52,52],h(fi18, 52, 0)) ) * T( Tile( (1, 1), G(h(1, 52, fi18), L[52,52],h(fi18, 52, 0)) ) ) ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), G(h(1, 52, fi18), L[52,52],h(1, 52, fi18)) ) = Sqrt( Tile( (1, 1), G(h(1, 52, fi18), L[52,52],h(1, 52, fi18)) ) )
Eq.ann: {}
 )Entry 2:
For_{fi75;0;50;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 52, fi75), t0[52,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 52, fi75), t0[52,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 52, fi75), L0[52,52],h(1, 52, fi75)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi75 + 51, 52, fi75 + 1), t0[52,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi75 + 51, 52, fi75 + 1), t0[52,1],h(1, 1, 0)) ) - ( Tile( (1, 1), G(h(-fi75 + 51, 52, fi75 + 1), L0[52,52],h(1, 52, fi75)) ) Kro Tile( (1, 1), G(h(1, 52, fi75), t0[52,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 3:
Eq: Tile( (1, 1), G(h(1, 52, 51), t0[52,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 52, 51), t0[52,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 52, 51), L0[52,52],h(1, 52, 51)) ) )
Eq.ann: {}
Entry 4:
For_{fi104;0;50;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 52, -fi104 + 51), a[52,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 52, -fi104 + 51), a[52,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 52, -fi104 + 51), L0[52,52],h(1, 52, -fi104 + 51)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi104 + 51, 52, 0), a[52,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi104 + 51, 52, 0), a[52,1],h(1, 1, 0)) ) - ( T( Tile( (1, 1), G(h(1, 52, -fi104 + 51), L0[52,52],h(-fi104 + 51, 52, 0)) ) ) Kro Tile( (1, 1), G(h(1, 52, -fi104 + 51), a[52,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 5:
Eq: Tile( (1, 1), G(h(1, 52, 0), a[52,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 52, 0), a[52,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 52, 0), L0[52,52],h(1, 52, 0)) ) )
Eq.ann: {}
Entry 6:
Eq: Tile( (1, 1), kx[52,1] ) = ( Tile( (1, 1), X[52,52] ) * Tile( (1, 1), x[52,1] ) )
Eq.ann: {}
Entry 7:
Eq: Tile( (1, 1), f[1,1] ) = ( T( Tile( (1, 1), kx[52,1] ) ) * Tile( (1, 1), y[52,1] ) )
Eq.ann: {}
Entry 8:
For_{fi133;0;50;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 52, fi133), v[52,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 52, fi133), v[52,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 52, fi133), L0[52,52],h(1, 52, fi133)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi133 + 51, 52, fi133 + 1), v[52,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi133 + 51, 52, fi133 + 1), v[52,1],h(1, 1, 0)) ) - ( Tile( (1, 1), G(h(-fi133 + 51, 52, fi133 + 1), L0[52,52],h(1, 52, fi133)) ) Kro Tile( (1, 1), G(h(1, 52, fi133), v[52,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 9:
Eq: Tile( (1, 1), G(h(1, 52, 51), v[52,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 52, 51), v[52,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 52, 51), L0[52,52],h(1, 52, 51)) ) )
Eq.ann: {}
Entry 10:
Eq: Tile( (1, 1), var[1,1] ) = ( ( T( Tile( (1, 1), x[52,1] ) ) * Tile( (1, 1), x[52,1] ) ) - ( T( Tile( (1, 1), kx[52,1] ) ) * Tile( (1, 1), kx[52,1] ) ) )
Eq.ann: {}
Entry 11:
Eq: Tile( (1, 1), lp[1,1] ) = ( T( Tile( (1, 1), y[52,1] ) ) * Tile( (1, 1), y[52,1] ) )
Eq.ann: {}
, 0.531598503261 f/c -- folder: /tmp/lgen/gpr-4-52-8.hand.abq.2017-08-14.2445562228



  Compiling took 0:00:26.011777 ----------------------------------------------------------

