  Starting compiler at 2017-08-17 14:14:00.119748 ----------------------------------------

  Decl { {u'B': SquaredMatrix[B, (28, 28), GenMatAccess], u'F': SquaredMatrix[F, (28, 28), GenMatAccess], u'H': SquaredMatrix[H, (28, 28), GenMatAccess], u'U0': UpperTriangular[U0, (28, 28), GenMatAccess], u'M5': SquaredMatrix[M5, (28, 28), GenMatAccess], u'M4': Symmetric[M4, (28, 28), USMatAccess], u'M7': SquaredMatrix[M7, (28, 28), GenMatAccess], u'M6': SquaredMatrix[M6, (28, 28), GenMatAccess], u'M1': SquaredMatrix[M1, (28, 28), GenMatAccess], u'M0': SquaredMatrix[M0, (28, 28), GenMatAccess], u'M3': Symmetric[M3, (28, 28), USMatAccess], u'M2': SquaredMatrix[M2, (28, 28), GenMatAccess], u'Y': Symmetric[Y, (28, 28), USMatAccess], u'R': Symmetric[R, (28, 28), USMatAccess], u'U': UpperTriangular[U, (28, 28), GenMatAccess], u'M8': SquaredMatrix[M8, (28, 28), GenMatAccess], u'v0': Matrix[v0, (28, 1), GenMatAccess], u'u': Matrix[u, (28, 1), GenMatAccess], u'P': Symmetric[P, (28, 28), USMatAccess], u'v2': Matrix[v2, (28, 1), GenMatAccess], u'v1': Matrix[v1, (28, 1), GenMatAccess], u'v3': Matrix[v3, (28, 1), GenMatAccess], u'Q': Symmetric[Q, (28, 28), USMatAccess], u'x': Matrix[x, (28, 1), GenMatAccess], u'y': Matrix[y, (28, 1), GenMatAccess], u'v4': Matrix[v4, (28, 1), GenMatAccess], u'z': Matrix[z, (28, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Entry 0:
Eq: y[28,1] = ( ( F[28,28] * x[28,1] ) + ( B[28,28] * u[28,1] ) )
Eq.ann: {}
Entry 1:
Eq: M0[28,28] = ( F[28,28] * P[28,28] )
Eq.ann: {}
Entry 2:
Eq: Y[28,28] = ( ( M0[28,28] * T( F[28,28] ) ) + Q[28,28] )
Eq.ann: {}
Entry 3:
Eq: v0[28,1] = ( z[28,1] - ( H[28,28] * y[28,1] ) )
Eq.ann: {}
Entry 4:
Eq: M1[28,28] = ( H[28,28] * Y[28,28] )
Eq.ann: {}
Entry 5:
Eq: M2[28,28] = ( Y[28,28] * T( H[28,28] ) )
Eq.ann: {}
Entry 6:
Eq: M3[28,28] = ( ( M1[28,28] * T( H[28,28] ) ) + R[28,28] )
Eq.ann: {}
Entry 7:
Eq: ( T( U[28,28] ) * U[28,28] ) = M4[28,28]
Eq.ann: {}
Entry 8:
Eq: ( T( U0[28,28] ) * v2[28,1] ) = v1[28,1]
Eq.ann: {}
Entry 9:
Eq: ( U0[28,28] * v4[28,1] ) = v3[28,1]
Eq.ann: {}
Entry 10:
Eq: ( T( U0[28,28] ) * M6[28,28] ) = M5[28,28]
Eq.ann: {}
Entry 11:
Eq: ( U0[28,28] * M8[28,28] ) = M7[28,28]
Eq.ann: {}
Entry 12:
Eq: x[28,1] = ( y[28,1] + ( M2[28,28] * v0[28,1] ) )
Eq.ann: {}
Entry 13:
Eq: P[28,28] = ( Y[28,28] - ( M2[28,28] * M1[28,28] ) )
Eq.ann: {}
 : VALIDATED.



  28, Decl { {u'B': SquaredMatrix[B, (28, 28), GenMatAccess], u'F': SquaredMatrix[F, (28, 28), GenMatAccess], u'H': SquaredMatrix[H, (28, 28), GenMatAccess], u'U0': UpperTriangular[U0, (28, 28), GenMatAccess], u'M5': SquaredMatrix[M5, (28, 28), GenMatAccess], u'P': Symmetric[P, (28, 28), USMatAccess], u'M7': SquaredMatrix[M7, (28, 28), GenMatAccess], u'M6': SquaredMatrix[M6, (28, 28), GenMatAccess], u'v4': Matrix[v4, (28, 1), GenMatAccess], u'M0': SquaredMatrix[M0, (28, 28), GenMatAccess], u'M3': Symmetric[M3, (28, 28), USMatAccess], u'M2': SquaredMatrix[M2, (28, 28), GenMatAccess], u'Y': Symmetric[Y, (28, 28), USMatAccess], u'R': Symmetric[R, (28, 28), USMatAccess], u'U': UpperTriangular[U, (28, 28), GenMatAccess], u'M8': SquaredMatrix[M8, (28, 28), GenMatAccess], u'v0': Matrix[v0, (28, 1), GenMatAccess], u'u': Matrix[u, (28, 1), GenMatAccess], u'M4': Symmetric[M4, (28, 28), USMatAccess], u'v2': Matrix[v2, (28, 1), GenMatAccess], u'v1': Matrix[v1, (28, 1), GenMatAccess], u'v3': Matrix[v3, (28, 1), GenMatAccess], u'Q': Symmetric[Q, (28, 28), USMatAccess], u'x': Matrix[x, (28, 1), GenMatAccess], u'y': Matrix[y, (28, 1), GenMatAccess], u'M1': SquaredMatrix[M1, (28, 28), GenMatAccess], u'z': Matrix[z, (28, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {'part_schemes': {'Assign_Mul_UpperTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_T_UpperTriangular_UpperTriangular_Symmetric_opt': {'m0': 'm01.ll'}, 'ldiv_utn_ow_opt': {'m': 'm4.ll', 'n': 'n1.ll'}, 'Assign_Mul_T_UpperTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_T_UpperTriangular_SquaredMatrix_SquaredMatrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_UpperTriangular_SquaredMatrix_SquaredMatrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}}, 'cl1ck_v': 0, 'variant_tag': 'Assign_Mul_T_UpperTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_T_UpperTriangular_SquaredMatrix_SquaredMatrix_opt_m04_m21_Assign_Mul_T_UpperTriangular_UpperTriangular_Symmetric_opt_m01_Assign_Mul_UpperTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_UpperTriangular_SquaredMatrix_SquaredMatrix_opt_m04_m21_ldiv_utn_ow_opt_m4_n1'}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Eq: Tile( (1, 1), y[28,1] ) = ( ( Tile( (1, 1), F[28,28] ) * Tile( (1, 1), x[28,1] ) ) + ( Tile( (1, 1), B[28,28] ) * Tile( (1, 1), u[28,1] ) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), M0[28,28] ) = ( Tile( (1, 1), F[28,28] ) * Tile( (1, 1), P[28,28] ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), Y[28,28] ) = ( ( Tile( (1, 1), M0[28,28] ) * T( Tile( (1, 1), F[28,28] ) ) ) + Tile( (1, 1), Q[28,28] ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), v0[28,1] ) = ( Tile( (1, 1), z[28,1] ) - ( Tile( (1, 1), H[28,28] ) * Tile( (1, 1), y[28,1] ) ) )
Eq.ann: {}
Entry 4:
Eq: Tile( (1, 1), M1[28,28] ) = ( Tile( (1, 1), H[28,28] ) * Tile( (1, 1), Y[28,28] ) )
Eq.ann: {}
Entry 5:
Eq: Tile( (1, 1), M2[28,28] ) = ( Tile( (1, 1), Y[28,28] ) * T( Tile( (1, 1), H[28,28] ) ) )
Eq.ann: {}
Entry 6:
Eq: Tile( (1, 1), M3[28,28] ) = ( ( Tile( (1, 1), M1[28,28] ) * T( Tile( (1, 1), H[28,28] ) ) ) + Tile( (1, 1), R[28,28] ) )
Eq.ann: {}
Entry 7:
Eq: Tile( (1, 1), G(h(1, 28, 0), U[28,28],h(1, 28, 0)) ) = Sqrt( Tile( (1, 1), G(h(1, 28, 0), U[28,28],h(1, 28, 0)) ) )
Eq.ann: {}
Entry 8:
For_{fi35;1;27;1} ( Entry 0:
For_{fi60;0;fi35 - 2;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 28, fi60), U[28,28],h(1, 28, fi35)) ) = ( Tile( (1, 1), G(h(1, 28, fi60), U[28,28],h(1, 28, fi35)) ) Div Tile( (1, 1), G(h(1, 28, fi60), U[28,28],h(1, 28, fi60)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(fi35 - fi60 - 1, 28, fi60 + 1), U[28,28],h(1, 28, fi35)) ) = ( Tile( (1, 1), G(h(fi35 - fi60 - 1, 28, fi60 + 1), U[28,28],h(1, 28, fi35)) ) - ( T( Tile( (1, 1), G(h(1, 28, fi60), U[28,28],h(fi35 - fi60 - 1, 28, fi60 + 1)) ) ) Kro Tile( (1, 1), G(h(1, 28, fi60), U[28,28],h(1, 28, fi35)) ) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(1, 28, Max(0, fi35 - 1)), U[28,28],h(1, 28, fi35)) ) = ( Tile( (1, 1), G(h(1, 28, Max(0, fi35 - 1)), U[28,28],h(1, 28, fi35)) ) Div Tile( (1, 1), G(h(1, 28, Max(0, fi35 - 1)), U[28,28],h(1, 28, Max(0, fi35 - 1))) ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), G(h(1, 28, fi35), U[28,28],h(1, 28, fi35)) ) = ( Tile( (1, 1), G(h(1, 28, fi35), M4[28,28],h(1, 28, fi35)) ) - ( T( Tile( (1, 1), G(h(fi35, 28, 0), U[28,28],h(1, 28, fi35)) ) ) * Tile( (1, 1), G(h(fi35, 28, 0), U[28,28],h(1, 28, fi35)) ) ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), G(h(1, 28, fi35), U[28,28],h(1, 28, fi35)) ) = Sqrt( Tile( (1, 1), G(h(1, 28, fi35), U[28,28],h(1, 28, fi35)) ) )
Eq.ann: {}
 )Entry 9:
For_{fi92;0;26;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 28, fi92), v2[28,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 28, fi92), v2[28,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 28, fi92), U0[28,28],h(1, 28, fi92)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi92 + 27, 28, fi92 + 1), v2[28,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi92 + 27, 28, fi92 + 1), v2[28,1],h(1, 1, 0)) ) - ( T( Tile( (1, 1), G(h(1, 28, fi92), U0[28,28],h(-fi92 + 27, 28, fi92 + 1)) ) ) Kro Tile( (1, 1), G(h(1, 28, fi92), v2[28,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 10:
Eq: Tile( (1, 1), G(h(1, 28, 27), v2[28,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 28, 27), v2[28,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 28, 27), U0[28,28],h(1, 28, 27)) ) )
Eq.ann: {}
Entry 11:
For_{fi121;0;26;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 28, -fi121 + 27), v4[28,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 28, -fi121 + 27), v4[28,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 28, -fi121 + 27), U0[28,28],h(1, 28, -fi121 + 27)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi121 + 27, 28, 0), v4[28,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi121 + 27, 28, 0), v4[28,1],h(1, 1, 0)) ) - ( Tile( (1, 1), G(h(-fi121 + 27, 28, 0), U0[28,28],h(1, 28, -fi121 + 27)) ) Kro Tile( (1, 1), G(h(1, 28, -fi121 + 27), v4[28,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 12:
Eq: Tile( (1, 1), G(h(1, 28, 0), v4[28,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 28, 0), v4[28,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 28, 0), U0[28,28],h(1, 28, 0)) ) )
Eq.ann: {}
Entry 13:
For_{fi150;0;26;1} ( Entry 0:
For_{fi169;0;27;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 28, fi150), M6[28,28],h(1, 28, fi169)) ) = ( Tile( (1, 1), G(h(1, 28, fi150), M6[28,28],h(1, 28, fi169)) ) Div Tile( (1, 1), G(h(1, 28, fi150), U0[28,28],h(1, 28, fi150)) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(-fi150 + 27, 28, fi150 + 1), M6[28,28],h(28, 28, 0)) ) = ( Tile( (1, 1), G(h(-fi150 + 27, 28, fi150 + 1), M6[28,28],h(28, 28, 0)) ) - ( T( Tile( (1, 1), G(h(1, 28, fi150), U0[28,28],h(-fi150 + 27, 28, fi150 + 1)) ) ) * Tile( (1, 1), G(h(1, 28, fi150), M6[28,28],h(28, 28, 0)) ) ) )
Eq.ann: {}
 )Entry 14:
For_{fi180;0;27;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 28, 27), M6[28,28],h(1, 28, fi180)) ) = ( Tile( (1, 1), G(h(1, 28, 27), M6[28,28],h(1, 28, fi180)) ) Div Tile( (1, 1), G(h(1, 28, 27), U0[28,28],h(1, 28, 27)) ) )
Eq.ann: {}
 )Entry 15:
For_{fi191;0;26;1} ( Entry 0:
For_{fi210;0;27;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 28, -fi191 + 27), M8[28,28],h(1, 28, fi210)) ) = ( Tile( (1, 1), G(h(1, 28, -fi191 + 27), M8[28,28],h(1, 28, fi210)) ) Div Tile( (1, 1), G(h(1, 28, -fi191 + 27), U0[28,28],h(1, 28, -fi191 + 27)) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(-fi191 + 27, 28, 0), M8[28,28],h(28, 28, 0)) ) = ( Tile( (1, 1), G(h(-fi191 + 27, 28, 0), M8[28,28],h(28, 28, 0)) ) - ( Tile( (1, 1), G(h(-fi191 + 27, 28, 0), U0[28,28],h(1, 28, -fi191 + 27)) ) * Tile( (1, 1), G(h(1, 28, -fi191 + 27), M8[28,28],h(28, 28, 0)) ) ) )
Eq.ann: {}
 )Entry 16:
For_{fi221;0;27;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 28, 0), M8[28,28],h(1, 28, fi221)) ) = ( Tile( (1, 1), G(h(1, 28, 0), M8[28,28],h(1, 28, fi221)) ) Div Tile( (1, 1), G(h(1, 28, 0), U0[28,28],h(1, 28, 0)) ) )
Eq.ann: {}
 )Entry 17:
Eq: Tile( (1, 1), x[28,1] ) = ( Tile( (1, 1), y[28,1] ) + ( Tile( (1, 1), M2[28,28] ) * Tile( (1, 1), v0[28,1] ) ) )
Eq.ann: {}
Entry 18:
Eq: Tile( (1, 1), P[28,28] ) = ( Tile( (1, 1), Y[28,28] ) - ( Tile( (1, 1), M2[28,28] ) * Tile( (1, 1), M1[28,28] ) ) )
Eq.ann: {}
, 0.726315342598 f/c -- folder: /tmp/lgen/kf-28-52-8.abq.2017-08-17.2438149353



  Compiling took 0:00:51.169083 ----------------------------------------------------------

  Starting compiler at 2017-08-17 14:14:52.644330 ----------------------------------------

  Decl { {u'B': SquaredMatrix[B, (36, 36), GenMatAccess], u'F': SquaredMatrix[F, (36, 36), GenMatAccess], u'H': SquaredMatrix[H, (36, 36), GenMatAccess], u'U0': UpperTriangular[U0, (36, 36), GenMatAccess], u'M5': SquaredMatrix[M5, (36, 36), GenMatAccess], u'M4': Symmetric[M4, (36, 36), USMatAccess], u'M7': SquaredMatrix[M7, (36, 36), GenMatAccess], u'M6': SquaredMatrix[M6, (36, 36), GenMatAccess], u'M1': SquaredMatrix[M1, (36, 36), GenMatAccess], u'M0': SquaredMatrix[M0, (36, 36), GenMatAccess], u'M3': Symmetric[M3, (36, 36), USMatAccess], u'M2': SquaredMatrix[M2, (36, 36), GenMatAccess], u'Y': Symmetric[Y, (36, 36), USMatAccess], u'R': Symmetric[R, (36, 36), USMatAccess], u'U': UpperTriangular[U, (36, 36), GenMatAccess], u'M8': SquaredMatrix[M8, (36, 36), GenMatAccess], u'v0': Matrix[v0, (36, 1), GenMatAccess], u'u': Matrix[u, (36, 1), GenMatAccess], u'P': Symmetric[P, (36, 36), USMatAccess], u'v2': Matrix[v2, (36, 1), GenMatAccess], u'v1': Matrix[v1, (36, 1), GenMatAccess], u'v3': Matrix[v3, (36, 1), GenMatAccess], u'Q': Symmetric[Q, (36, 36), USMatAccess], u'x': Matrix[x, (36, 1), GenMatAccess], u'y': Matrix[y, (36, 1), GenMatAccess], u'v4': Matrix[v4, (36, 1), GenMatAccess], u'z': Matrix[z, (36, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Entry 0:
Eq: y[36,1] = ( ( F[36,36] * x[36,1] ) + ( B[36,36] * u[36,1] ) )
Eq.ann: {}
Entry 1:
Eq: M0[36,36] = ( F[36,36] * P[36,36] )
Eq.ann: {}
Entry 2:
Eq: Y[36,36] = ( ( M0[36,36] * T( F[36,36] ) ) + Q[36,36] )
Eq.ann: {}
Entry 3:
Eq: v0[36,1] = ( z[36,1] - ( H[36,36] * y[36,1] ) )
Eq.ann: {}
Entry 4:
Eq: M1[36,36] = ( H[36,36] * Y[36,36] )
Eq.ann: {}
Entry 5:
Eq: M2[36,36] = ( Y[36,36] * T( H[36,36] ) )
Eq.ann: {}
Entry 6:
Eq: M3[36,36] = ( ( M1[36,36] * T( H[36,36] ) ) + R[36,36] )
Eq.ann: {}
Entry 7:
Eq: ( T( U[36,36] ) * U[36,36] ) = M4[36,36]
Eq.ann: {}
Entry 8:
Eq: ( T( U0[36,36] ) * v2[36,1] ) = v1[36,1]
Eq.ann: {}
Entry 9:
Eq: ( U0[36,36] * v4[36,1] ) = v3[36,1]
Eq.ann: {}
Entry 10:
Eq: ( T( U0[36,36] ) * M6[36,36] ) = M5[36,36]
Eq.ann: {}
Entry 11:
Eq: ( U0[36,36] * M8[36,36] ) = M7[36,36]
Eq.ann: {}
Entry 12:
Eq: x[36,1] = ( y[36,1] + ( M2[36,36] * v0[36,1] ) )
Eq.ann: {}
Entry 13:
Eq: P[36,36] = ( Y[36,36] - ( M2[36,36] * M1[36,36] ) )
Eq.ann: {}
 : VALIDATED.



  36, Decl { {u'B': SquaredMatrix[B, (36, 36), GenMatAccess], u'F': SquaredMatrix[F, (36, 36), GenMatAccess], u'H': SquaredMatrix[H, (36, 36), GenMatAccess], u'U0': UpperTriangular[U0, (36, 36), GenMatAccess], u'M5': SquaredMatrix[M5, (36, 36), GenMatAccess], u'P': Symmetric[P, (36, 36), USMatAccess], u'M7': SquaredMatrix[M7, (36, 36), GenMatAccess], u'M6': SquaredMatrix[M6, (36, 36), GenMatAccess], u'v4': Matrix[v4, (36, 1), GenMatAccess], u'M0': SquaredMatrix[M0, (36, 36), GenMatAccess], u'M3': Symmetric[M3, (36, 36), USMatAccess], u'M2': SquaredMatrix[M2, (36, 36), GenMatAccess], u'Y': Symmetric[Y, (36, 36), USMatAccess], u'R': Symmetric[R, (36, 36), USMatAccess], u'U': UpperTriangular[U, (36, 36), GenMatAccess], u'M8': SquaredMatrix[M8, (36, 36), GenMatAccess], u'v0': Matrix[v0, (36, 1), GenMatAccess], u'u': Matrix[u, (36, 1), GenMatAccess], u'M4': Symmetric[M4, (36, 36), USMatAccess], u'v2': Matrix[v2, (36, 1), GenMatAccess], u'v1': Matrix[v1, (36, 1), GenMatAccess], u'v3': Matrix[v3, (36, 1), GenMatAccess], u'Q': Symmetric[Q, (36, 36), USMatAccess], u'x': Matrix[x, (36, 1), GenMatAccess], u'y': Matrix[y, (36, 1), GenMatAccess], u'M1': SquaredMatrix[M1, (36, 36), GenMatAccess], u'z': Matrix[z, (36, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {'part_schemes': {'Assign_Mul_UpperTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_T_UpperTriangular_UpperTriangular_Symmetric_opt': {'m0': 'm01.ll'}, 'ldiv_utn_ow_opt': {'m': 'm4.ll', 'n': 'n1.ll'}, 'Assign_Mul_T_UpperTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_T_UpperTriangular_SquaredMatrix_SquaredMatrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_UpperTriangular_SquaredMatrix_SquaredMatrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}}, 'cl1ck_v': 0, 'variant_tag': 'Assign_Mul_T_UpperTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_T_UpperTriangular_SquaredMatrix_SquaredMatrix_opt_m04_m21_Assign_Mul_T_UpperTriangular_UpperTriangular_Symmetric_opt_m01_Assign_Mul_UpperTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_UpperTriangular_SquaredMatrix_SquaredMatrix_opt_m04_m21_ldiv_utn_ow_opt_m4_n1'}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Eq: Tile( (1, 1), y[36,1] ) = ( ( Tile( (1, 1), F[36,36] ) * Tile( (1, 1), x[36,1] ) ) + ( Tile( (1, 1), B[36,36] ) * Tile( (1, 1), u[36,1] ) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), M0[36,36] ) = ( Tile( (1, 1), F[36,36] ) * Tile( (1, 1), P[36,36] ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), Y[36,36] ) = ( ( Tile( (1, 1), M0[36,36] ) * T( Tile( (1, 1), F[36,36] ) ) ) + Tile( (1, 1), Q[36,36] ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), v0[36,1] ) = ( Tile( (1, 1), z[36,1] ) - ( Tile( (1, 1), H[36,36] ) * Tile( (1, 1), y[36,1] ) ) )
Eq.ann: {}
Entry 4:
Eq: Tile( (1, 1), M1[36,36] ) = ( Tile( (1, 1), H[36,36] ) * Tile( (1, 1), Y[36,36] ) )
Eq.ann: {}
Entry 5:
Eq: Tile( (1, 1), M2[36,36] ) = ( Tile( (1, 1), Y[36,36] ) * T( Tile( (1, 1), H[36,36] ) ) )
Eq.ann: {}
Entry 6:
Eq: Tile( (1, 1), M3[36,36] ) = ( ( Tile( (1, 1), M1[36,36] ) * T( Tile( (1, 1), H[36,36] ) ) ) + Tile( (1, 1), R[36,36] ) )
Eq.ann: {}
Entry 7:
Eq: Tile( (1, 1), G(h(1, 36, 0), U[36,36],h(1, 36, 0)) ) = Sqrt( Tile( (1, 1), G(h(1, 36, 0), U[36,36],h(1, 36, 0)) ) )
Eq.ann: {}
Entry 8:
For_{fi35;1;35;1} ( Entry 0:
For_{fi60;0;fi35 - 2;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 36, fi60), U[36,36],h(1, 36, fi35)) ) = ( Tile( (1, 1), G(h(1, 36, fi60), U[36,36],h(1, 36, fi35)) ) Div Tile( (1, 1), G(h(1, 36, fi60), U[36,36],h(1, 36, fi60)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(fi35 - fi60 - 1, 36, fi60 + 1), U[36,36],h(1, 36, fi35)) ) = ( Tile( (1, 1), G(h(fi35 - fi60 - 1, 36, fi60 + 1), U[36,36],h(1, 36, fi35)) ) - ( T( Tile( (1, 1), G(h(1, 36, fi60), U[36,36],h(fi35 - fi60 - 1, 36, fi60 + 1)) ) ) Kro Tile( (1, 1), G(h(1, 36, fi60), U[36,36],h(1, 36, fi35)) ) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(1, 36, Max(0, fi35 - 1)), U[36,36],h(1, 36, fi35)) ) = ( Tile( (1, 1), G(h(1, 36, Max(0, fi35 - 1)), U[36,36],h(1, 36, fi35)) ) Div Tile( (1, 1), G(h(1, 36, Max(0, fi35 - 1)), U[36,36],h(1, 36, Max(0, fi35 - 1))) ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), G(h(1, 36, fi35), U[36,36],h(1, 36, fi35)) ) = ( Tile( (1, 1), G(h(1, 36, fi35), M4[36,36],h(1, 36, fi35)) ) - ( T( Tile( (1, 1), G(h(fi35, 36, 0), U[36,36],h(1, 36, fi35)) ) ) * Tile( (1, 1), G(h(fi35, 36, 0), U[36,36],h(1, 36, fi35)) ) ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), G(h(1, 36, fi35), U[36,36],h(1, 36, fi35)) ) = Sqrt( Tile( (1, 1), G(h(1, 36, fi35), U[36,36],h(1, 36, fi35)) ) )
Eq.ann: {}
 )Entry 9:
For_{fi92;0;34;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 36, fi92), v2[36,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 36, fi92), v2[36,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 36, fi92), U0[36,36],h(1, 36, fi92)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi92 + 35, 36, fi92 + 1), v2[36,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi92 + 35, 36, fi92 + 1), v2[36,1],h(1, 1, 0)) ) - ( T( Tile( (1, 1), G(h(1, 36, fi92), U0[36,36],h(-fi92 + 35, 36, fi92 + 1)) ) ) Kro Tile( (1, 1), G(h(1, 36, fi92), v2[36,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 10:
Eq: Tile( (1, 1), G(h(1, 36, 35), v2[36,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 36, 35), v2[36,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 36, 35), U0[36,36],h(1, 36, 35)) ) )
Eq.ann: {}
Entry 11:
For_{fi121;0;34;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 36, -fi121 + 35), v4[36,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 36, -fi121 + 35), v4[36,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 36, -fi121 + 35), U0[36,36],h(1, 36, -fi121 + 35)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi121 + 35, 36, 0), v4[36,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi121 + 35, 36, 0), v4[36,1],h(1, 1, 0)) ) - ( Tile( (1, 1), G(h(-fi121 + 35, 36, 0), U0[36,36],h(1, 36, -fi121 + 35)) ) Kro Tile( (1, 1), G(h(1, 36, -fi121 + 35), v4[36,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 12:
Eq: Tile( (1, 1), G(h(1, 36, 0), v4[36,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 36, 0), v4[36,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 36, 0), U0[36,36],h(1, 36, 0)) ) )
Eq.ann: {}
Entry 13:
For_{fi150;0;34;1} ( Entry 0:
For_{fi169;0;35;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 36, fi150), M6[36,36],h(1, 36, fi169)) ) = ( Tile( (1, 1), G(h(1, 36, fi150), M6[36,36],h(1, 36, fi169)) ) Div Tile( (1, 1), G(h(1, 36, fi150), U0[36,36],h(1, 36, fi150)) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(-fi150 + 35, 36, fi150 + 1), M6[36,36],h(36, 36, 0)) ) = ( Tile( (1, 1), G(h(-fi150 + 35, 36, fi150 + 1), M6[36,36],h(36, 36, 0)) ) - ( T( Tile( (1, 1), G(h(1, 36, fi150), U0[36,36],h(-fi150 + 35, 36, fi150 + 1)) ) ) * Tile( (1, 1), G(h(1, 36, fi150), M6[36,36],h(36, 36, 0)) ) ) )
Eq.ann: {}
 )Entry 14:
For_{fi180;0;35;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 36, 35), M6[36,36],h(1, 36, fi180)) ) = ( Tile( (1, 1), G(h(1, 36, 35), M6[36,36],h(1, 36, fi180)) ) Div Tile( (1, 1), G(h(1, 36, 35), U0[36,36],h(1, 36, 35)) ) )
Eq.ann: {}
 )Entry 15:
For_{fi191;0;34;1} ( Entry 0:
For_{fi210;0;35;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 36, -fi191 + 35), M8[36,36],h(1, 36, fi210)) ) = ( Tile( (1, 1), G(h(1, 36, -fi191 + 35), M8[36,36],h(1, 36, fi210)) ) Div Tile( (1, 1), G(h(1, 36, -fi191 + 35), U0[36,36],h(1, 36, -fi191 + 35)) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(-fi191 + 35, 36, 0), M8[36,36],h(36, 36, 0)) ) = ( Tile( (1, 1), G(h(-fi191 + 35, 36, 0), M8[36,36],h(36, 36, 0)) ) - ( Tile( (1, 1), G(h(-fi191 + 35, 36, 0), U0[36,36],h(1, 36, -fi191 + 35)) ) * Tile( (1, 1), G(h(1, 36, -fi191 + 35), M8[36,36],h(36, 36, 0)) ) ) )
Eq.ann: {}
 )Entry 16:
For_{fi221;0;35;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 36, 0), M8[36,36],h(1, 36, fi221)) ) = ( Tile( (1, 1), G(h(1, 36, 0), M8[36,36],h(1, 36, fi221)) ) Div Tile( (1, 1), G(h(1, 36, 0), U0[36,36],h(1, 36, 0)) ) )
Eq.ann: {}
 )Entry 17:
Eq: Tile( (1, 1), x[36,1] ) = ( Tile( (1, 1), y[36,1] ) + ( Tile( (1, 1), M2[36,36] ) * Tile( (1, 1), v0[36,1] ) ) )
Eq.ann: {}
Entry 18:
Eq: Tile( (1, 1), P[36,36] ) = ( Tile( (1, 1), Y[36,36] ) - ( Tile( (1, 1), M2[36,36] ) * Tile( (1, 1), M1[36,36] ) ) )
Eq.ann: {}
, 0.735539793402 f/c -- folder: /tmp/lgen/kf-28-52-8.abq.2017-08-17.2438149353



  Compiling took 0:00:50.272813 ----------------------------------------------------------

  Starting compiler at 2017-08-17 14:15:44.259022 ----------------------------------------

  Decl { {u'B': SquaredMatrix[B, (44, 44), GenMatAccess], u'F': SquaredMatrix[F, (44, 44), GenMatAccess], u'H': SquaredMatrix[H, (44, 44), GenMatAccess], u'U0': UpperTriangular[U0, (44, 44), GenMatAccess], u'M5': SquaredMatrix[M5, (44, 44), GenMatAccess], u'M4': Symmetric[M4, (44, 44), USMatAccess], u'M7': SquaredMatrix[M7, (44, 44), GenMatAccess], u'M6': SquaredMatrix[M6, (44, 44), GenMatAccess], u'M1': SquaredMatrix[M1, (44, 44), GenMatAccess], u'M0': SquaredMatrix[M0, (44, 44), GenMatAccess], u'M3': Symmetric[M3, (44, 44), USMatAccess], u'M2': SquaredMatrix[M2, (44, 44), GenMatAccess], u'Y': Symmetric[Y, (44, 44), USMatAccess], u'R': Symmetric[R, (44, 44), USMatAccess], u'U': UpperTriangular[U, (44, 44), GenMatAccess], u'M8': SquaredMatrix[M8, (44, 44), GenMatAccess], u'v0': Matrix[v0, (44, 1), GenMatAccess], u'u': Matrix[u, (44, 1), GenMatAccess], u'P': Symmetric[P, (44, 44), USMatAccess], u'v2': Matrix[v2, (44, 1), GenMatAccess], u'v1': Matrix[v1, (44, 1), GenMatAccess], u'v3': Matrix[v3, (44, 1), GenMatAccess], u'Q': Symmetric[Q, (44, 44), USMatAccess], u'x': Matrix[x, (44, 1), GenMatAccess], u'y': Matrix[y, (44, 1), GenMatAccess], u'v4': Matrix[v4, (44, 1), GenMatAccess], u'z': Matrix[z, (44, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Entry 0:
Eq: y[44,1] = ( ( F[44,44] * x[44,1] ) + ( B[44,44] * u[44,1] ) )
Eq.ann: {}
Entry 1:
Eq: M0[44,44] = ( F[44,44] * P[44,44] )
Eq.ann: {}
Entry 2:
Eq: Y[44,44] = ( ( M0[44,44] * T( F[44,44] ) ) + Q[44,44] )
Eq.ann: {}
Entry 3:
Eq: v0[44,1] = ( z[44,1] - ( H[44,44] * y[44,1] ) )
Eq.ann: {}
Entry 4:
Eq: M1[44,44] = ( H[44,44] * Y[44,44] )
Eq.ann: {}
Entry 5:
Eq: M2[44,44] = ( Y[44,44] * T( H[44,44] ) )
Eq.ann: {}
Entry 6:
Eq: M3[44,44] = ( ( M1[44,44] * T( H[44,44] ) ) + R[44,44] )
Eq.ann: {}
Entry 7:
Eq: ( T( U[44,44] ) * U[44,44] ) = M4[44,44]
Eq.ann: {}
Entry 8:
Eq: ( T( U0[44,44] ) * v2[44,1] ) = v1[44,1]
Eq.ann: {}
Entry 9:
Eq: ( U0[44,44] * v4[44,1] ) = v3[44,1]
Eq.ann: {}
Entry 10:
Eq: ( T( U0[44,44] ) * M6[44,44] ) = M5[44,44]
Eq.ann: {}
Entry 11:
Eq: ( U0[44,44] * M8[44,44] ) = M7[44,44]
Eq.ann: {}
Entry 12:
Eq: x[44,1] = ( y[44,1] + ( M2[44,44] * v0[44,1] ) )
Eq.ann: {}
Entry 13:
Eq: P[44,44] = ( Y[44,44] - ( M2[44,44] * M1[44,44] ) )
Eq.ann: {}
 : VALIDATED.



  44, Decl { {u'B': SquaredMatrix[B, (44, 44), GenMatAccess], u'F': SquaredMatrix[F, (44, 44), GenMatAccess], u'H': SquaredMatrix[H, (44, 44), GenMatAccess], u'U0': UpperTriangular[U0, (44, 44), GenMatAccess], u'M5': SquaredMatrix[M5, (44, 44), GenMatAccess], u'P': Symmetric[P, (44, 44), USMatAccess], u'M7': SquaredMatrix[M7, (44, 44), GenMatAccess], u'M6': SquaredMatrix[M6, (44, 44), GenMatAccess], u'v4': Matrix[v4, (44, 1), GenMatAccess], u'M0': SquaredMatrix[M0, (44, 44), GenMatAccess], u'M3': Symmetric[M3, (44, 44), USMatAccess], u'M2': SquaredMatrix[M2, (44, 44), GenMatAccess], u'Y': Symmetric[Y, (44, 44), USMatAccess], u'R': Symmetric[R, (44, 44), USMatAccess], u'U': UpperTriangular[U, (44, 44), GenMatAccess], u'M8': SquaredMatrix[M8, (44, 44), GenMatAccess], u'v0': Matrix[v0, (44, 1), GenMatAccess], u'u': Matrix[u, (44, 1), GenMatAccess], u'M4': Symmetric[M4, (44, 44), USMatAccess], u'v2': Matrix[v2, (44, 1), GenMatAccess], u'v1': Matrix[v1, (44, 1), GenMatAccess], u'v3': Matrix[v3, (44, 1), GenMatAccess], u'Q': Symmetric[Q, (44, 44), USMatAccess], u'x': Matrix[x, (44, 1), GenMatAccess], u'y': Matrix[y, (44, 1), GenMatAccess], u'M1': SquaredMatrix[M1, (44, 44), GenMatAccess], u'z': Matrix[z, (44, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {'part_schemes': {'Assign_Mul_UpperTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_T_UpperTriangular_UpperTriangular_Symmetric_opt': {'m0': 'm01.ll'}, 'ldiv_utn_ow_opt': {'m': 'm4.ll', 'n': 'n1.ll'}, 'Assign_Mul_T_UpperTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_T_UpperTriangular_SquaredMatrix_SquaredMatrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_UpperTriangular_SquaredMatrix_SquaredMatrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}}, 'cl1ck_v': 0, 'variant_tag': 'Assign_Mul_T_UpperTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_T_UpperTriangular_SquaredMatrix_SquaredMatrix_opt_m04_m21_Assign_Mul_T_UpperTriangular_UpperTriangular_Symmetric_opt_m01_Assign_Mul_UpperTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_UpperTriangular_SquaredMatrix_SquaredMatrix_opt_m04_m21_ldiv_utn_ow_opt_m4_n1'}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Eq: Tile( (1, 1), y[44,1] ) = ( ( Tile( (1, 1), F[44,44] ) * Tile( (1, 1), x[44,1] ) ) + ( Tile( (1, 1), B[44,44] ) * Tile( (1, 1), u[44,1] ) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), M0[44,44] ) = ( Tile( (1, 1), F[44,44] ) * Tile( (1, 1), P[44,44] ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), Y[44,44] ) = ( ( Tile( (1, 1), M0[44,44] ) * T( Tile( (1, 1), F[44,44] ) ) ) + Tile( (1, 1), Q[44,44] ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), v0[44,1] ) = ( Tile( (1, 1), z[44,1] ) - ( Tile( (1, 1), H[44,44] ) * Tile( (1, 1), y[44,1] ) ) )
Eq.ann: {}
Entry 4:
Eq: Tile( (1, 1), M1[44,44] ) = ( Tile( (1, 1), H[44,44] ) * Tile( (1, 1), Y[44,44] ) )
Eq.ann: {}
Entry 5:
Eq: Tile( (1, 1), M2[44,44] ) = ( Tile( (1, 1), Y[44,44] ) * T( Tile( (1, 1), H[44,44] ) ) )
Eq.ann: {}
Entry 6:
Eq: Tile( (1, 1), M3[44,44] ) = ( ( Tile( (1, 1), M1[44,44] ) * T( Tile( (1, 1), H[44,44] ) ) ) + Tile( (1, 1), R[44,44] ) )
Eq.ann: {}
Entry 7:
Eq: Tile( (1, 1), G(h(1, 44, 0), U[44,44],h(1, 44, 0)) ) = Sqrt( Tile( (1, 1), G(h(1, 44, 0), U[44,44],h(1, 44, 0)) ) )
Eq.ann: {}
Entry 8:
For_{fi35;1;43;1} ( Entry 0:
For_{fi60;0;fi35 - 2;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 44, fi60), U[44,44],h(1, 44, fi35)) ) = ( Tile( (1, 1), G(h(1, 44, fi60), U[44,44],h(1, 44, fi35)) ) Div Tile( (1, 1), G(h(1, 44, fi60), U[44,44],h(1, 44, fi60)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(fi35 - fi60 - 1, 44, fi60 + 1), U[44,44],h(1, 44, fi35)) ) = ( Tile( (1, 1), G(h(fi35 - fi60 - 1, 44, fi60 + 1), U[44,44],h(1, 44, fi35)) ) - ( T( Tile( (1, 1), G(h(1, 44, fi60), U[44,44],h(fi35 - fi60 - 1, 44, fi60 + 1)) ) ) Kro Tile( (1, 1), G(h(1, 44, fi60), U[44,44],h(1, 44, fi35)) ) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(1, 44, Max(0, fi35 - 1)), U[44,44],h(1, 44, fi35)) ) = ( Tile( (1, 1), G(h(1, 44, Max(0, fi35 - 1)), U[44,44],h(1, 44, fi35)) ) Div Tile( (1, 1), G(h(1, 44, Max(0, fi35 - 1)), U[44,44],h(1, 44, Max(0, fi35 - 1))) ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), G(h(1, 44, fi35), U[44,44],h(1, 44, fi35)) ) = ( Tile( (1, 1), G(h(1, 44, fi35), M4[44,44],h(1, 44, fi35)) ) - ( T( Tile( (1, 1), G(h(fi35, 44, 0), U[44,44],h(1, 44, fi35)) ) ) * Tile( (1, 1), G(h(fi35, 44, 0), U[44,44],h(1, 44, fi35)) ) ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), G(h(1, 44, fi35), U[44,44],h(1, 44, fi35)) ) = Sqrt( Tile( (1, 1), G(h(1, 44, fi35), U[44,44],h(1, 44, fi35)) ) )
Eq.ann: {}
 )Entry 9:
For_{fi92;0;42;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 44, fi92), v2[44,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 44, fi92), v2[44,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 44, fi92), U0[44,44],h(1, 44, fi92)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi92 + 43, 44, fi92 + 1), v2[44,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi92 + 43, 44, fi92 + 1), v2[44,1],h(1, 1, 0)) ) - ( T( Tile( (1, 1), G(h(1, 44, fi92), U0[44,44],h(-fi92 + 43, 44, fi92 + 1)) ) ) Kro Tile( (1, 1), G(h(1, 44, fi92), v2[44,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 10:
Eq: Tile( (1, 1), G(h(1, 44, 43), v2[44,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 44, 43), v2[44,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 44, 43), U0[44,44],h(1, 44, 43)) ) )
Eq.ann: {}
Entry 11:
For_{fi121;0;42;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 44, -fi121 + 43), v4[44,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 44, -fi121 + 43), v4[44,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 44, -fi121 + 43), U0[44,44],h(1, 44, -fi121 + 43)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi121 + 43, 44, 0), v4[44,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi121 + 43, 44, 0), v4[44,1],h(1, 1, 0)) ) - ( Tile( (1, 1), G(h(-fi121 + 43, 44, 0), U0[44,44],h(1, 44, -fi121 + 43)) ) Kro Tile( (1, 1), G(h(1, 44, -fi121 + 43), v4[44,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 12:
Eq: Tile( (1, 1), G(h(1, 44, 0), v4[44,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 44, 0), v4[44,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 44, 0), U0[44,44],h(1, 44, 0)) ) )
Eq.ann: {}
Entry 13:
For_{fi150;0;42;1} ( Entry 0:
For_{fi169;0;43;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 44, fi150), M6[44,44],h(1, 44, fi169)) ) = ( Tile( (1, 1), G(h(1, 44, fi150), M6[44,44],h(1, 44, fi169)) ) Div Tile( (1, 1), G(h(1, 44, fi150), U0[44,44],h(1, 44, fi150)) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(-fi150 + 43, 44, fi150 + 1), M6[44,44],h(44, 44, 0)) ) = ( Tile( (1, 1), G(h(-fi150 + 43, 44, fi150 + 1), M6[44,44],h(44, 44, 0)) ) - ( T( Tile( (1, 1), G(h(1, 44, fi150), U0[44,44],h(-fi150 + 43, 44, fi150 + 1)) ) ) * Tile( (1, 1), G(h(1, 44, fi150), M6[44,44],h(44, 44, 0)) ) ) )
Eq.ann: {}
 )Entry 14:
For_{fi180;0;43;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 44, 43), M6[44,44],h(1, 44, fi180)) ) = ( Tile( (1, 1), G(h(1, 44, 43), M6[44,44],h(1, 44, fi180)) ) Div Tile( (1, 1), G(h(1, 44, 43), U0[44,44],h(1, 44, 43)) ) )
Eq.ann: {}
 )Entry 15:
For_{fi191;0;42;1} ( Entry 0:
For_{fi210;0;43;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 44, -fi191 + 43), M8[44,44],h(1, 44, fi210)) ) = ( Tile( (1, 1), G(h(1, 44, -fi191 + 43), M8[44,44],h(1, 44, fi210)) ) Div Tile( (1, 1), G(h(1, 44, -fi191 + 43), U0[44,44],h(1, 44, -fi191 + 43)) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(-fi191 + 43, 44, 0), M8[44,44],h(44, 44, 0)) ) = ( Tile( (1, 1), G(h(-fi191 + 43, 44, 0), M8[44,44],h(44, 44, 0)) ) - ( Tile( (1, 1), G(h(-fi191 + 43, 44, 0), U0[44,44],h(1, 44, -fi191 + 43)) ) * Tile( (1, 1), G(h(1, 44, -fi191 + 43), M8[44,44],h(44, 44, 0)) ) ) )
Eq.ann: {}
 )Entry 16:
For_{fi221;0;43;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 44, 0), M8[44,44],h(1, 44, fi221)) ) = ( Tile( (1, 1), G(h(1, 44, 0), M8[44,44],h(1, 44, fi221)) ) Div Tile( (1, 1), G(h(1, 44, 0), U0[44,44],h(1, 44, 0)) ) )
Eq.ann: {}
 )Entry 17:
Eq: Tile( (1, 1), x[44,1] ) = ( Tile( (1, 1), y[44,1] ) + ( Tile( (1, 1), M2[44,44] ) * Tile( (1, 1), v0[44,1] ) ) )
Eq.ann: {}
Entry 18:
Eq: Tile( (1, 1), P[44,44] ) = ( Tile( (1, 1), Y[44,44] ) - ( Tile( (1, 1), M2[44,44] ) * Tile( (1, 1), M1[44,44] ) ) )
Eq.ann: {}
, 0.755523077395 f/c -- folder: /tmp/lgen/kf-28-52-8.abq.2017-08-17.2438149353



  Compiling took 0:00:50.371227 ----------------------------------------------------------

  Starting compiler at 2017-08-17 14:16:35.976721 ----------------------------------------

  Decl { {u'B': SquaredMatrix[B, (52, 52), GenMatAccess], u'F': SquaredMatrix[F, (52, 52), GenMatAccess], u'H': SquaredMatrix[H, (52, 52), GenMatAccess], u'U0': UpperTriangular[U0, (52, 52), GenMatAccess], u'M5': SquaredMatrix[M5, (52, 52), GenMatAccess], u'M4': Symmetric[M4, (52, 52), USMatAccess], u'M7': SquaredMatrix[M7, (52, 52), GenMatAccess], u'M6': SquaredMatrix[M6, (52, 52), GenMatAccess], u'M1': SquaredMatrix[M1, (52, 52), GenMatAccess], u'M0': SquaredMatrix[M0, (52, 52), GenMatAccess], u'M3': Symmetric[M3, (52, 52), USMatAccess], u'M2': SquaredMatrix[M2, (52, 52), GenMatAccess], u'Y': Symmetric[Y, (52, 52), USMatAccess], u'R': Symmetric[R, (52, 52), USMatAccess], u'U': UpperTriangular[U, (52, 52), GenMatAccess], u'M8': SquaredMatrix[M8, (52, 52), GenMatAccess], u'v0': Matrix[v0, (52, 1), GenMatAccess], u'u': Matrix[u, (52, 1), GenMatAccess], u'P': Symmetric[P, (52, 52), USMatAccess], u'v2': Matrix[v2, (52, 1), GenMatAccess], u'v1': Matrix[v1, (52, 1), GenMatAccess], u'v3': Matrix[v3, (52, 1), GenMatAccess], u'Q': Symmetric[Q, (52, 52), USMatAccess], u'x': Matrix[x, (52, 1), GenMatAccess], u'y': Matrix[y, (52, 1), GenMatAccess], u'v4': Matrix[v4, (52, 1), GenMatAccess], u'z': Matrix[z, (52, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Entry 0:
Eq: y[52,1] = ( ( F[52,52] * x[52,1] ) + ( B[52,52] * u[52,1] ) )
Eq.ann: {}
Entry 1:
Eq: M0[52,52] = ( F[52,52] * P[52,52] )
Eq.ann: {}
Entry 2:
Eq: Y[52,52] = ( ( M0[52,52] * T( F[52,52] ) ) + Q[52,52] )
Eq.ann: {}
Entry 3:
Eq: v0[52,1] = ( z[52,1] - ( H[52,52] * y[52,1] ) )
Eq.ann: {}
Entry 4:
Eq: M1[52,52] = ( H[52,52] * Y[52,52] )
Eq.ann: {}
Entry 5:
Eq: M2[52,52] = ( Y[52,52] * T( H[52,52] ) )
Eq.ann: {}
Entry 6:
Eq: M3[52,52] = ( ( M1[52,52] * T( H[52,52] ) ) + R[52,52] )
Eq.ann: {}
Entry 7:
Eq: ( T( U[52,52] ) * U[52,52] ) = M4[52,52]
Eq.ann: {}
Entry 8:
Eq: ( T( U0[52,52] ) * v2[52,1] ) = v1[52,1]
Eq.ann: {}
Entry 9:
Eq: ( U0[52,52] * v4[52,1] ) = v3[52,1]
Eq.ann: {}
Entry 10:
Eq: ( T( U0[52,52] ) * M6[52,52] ) = M5[52,52]
Eq.ann: {}
Entry 11:
Eq: ( U0[52,52] * M8[52,52] ) = M7[52,52]
Eq.ann: {}
Entry 12:
Eq: x[52,1] = ( y[52,1] + ( M2[52,52] * v0[52,1] ) )
Eq.ann: {}
Entry 13:
Eq: P[52,52] = ( Y[52,52] - ( M2[52,52] * M1[52,52] ) )
Eq.ann: {}
 : VALIDATED.



  52, Decl { {u'B': SquaredMatrix[B, (52, 52), GenMatAccess], u'F': SquaredMatrix[F, (52, 52), GenMatAccess], u'H': SquaredMatrix[H, (52, 52), GenMatAccess], u'U0': UpperTriangular[U0, (52, 52), GenMatAccess], u'M5': SquaredMatrix[M5, (52, 52), GenMatAccess], u'P': Symmetric[P, (52, 52), USMatAccess], u'M7': SquaredMatrix[M7, (52, 52), GenMatAccess], u'M6': SquaredMatrix[M6, (52, 52), GenMatAccess], u'v4': Matrix[v4, (52, 1), GenMatAccess], u'M0': SquaredMatrix[M0, (52, 52), GenMatAccess], u'M3': Symmetric[M3, (52, 52), USMatAccess], u'M2': SquaredMatrix[M2, (52, 52), GenMatAccess], u'Y': Symmetric[Y, (52, 52), USMatAccess], u'R': Symmetric[R, (52, 52), USMatAccess], u'U': UpperTriangular[U, (52, 52), GenMatAccess], u'M8': SquaredMatrix[M8, (52, 52), GenMatAccess], u'v0': Matrix[v0, (52, 1), GenMatAccess], u'u': Matrix[u, (52, 1), GenMatAccess], u'M4': Symmetric[M4, (52, 52), USMatAccess], u'v2': Matrix[v2, (52, 1), GenMatAccess], u'v1': Matrix[v1, (52, 1), GenMatAccess], u'v3': Matrix[v3, (52, 1), GenMatAccess], u'Q': Symmetric[Q, (52, 52), USMatAccess], u'x': Matrix[x, (52, 1), GenMatAccess], u'y': Matrix[y, (52, 1), GenMatAccess], u'M1': SquaredMatrix[M1, (52, 52), GenMatAccess], u'z': Matrix[z, (52, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {'part_schemes': {'Assign_Mul_UpperTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_T_UpperTriangular_UpperTriangular_Symmetric_opt': {'m0': 'm01.ll'}, 'ldiv_utn_ow_opt': {'m': 'm4.ll', 'n': 'n1.ll'}, 'Assign_Mul_T_UpperTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_T_UpperTriangular_SquaredMatrix_SquaredMatrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_UpperTriangular_SquaredMatrix_SquaredMatrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}}, 'cl1ck_v': 0, 'variant_tag': 'Assign_Mul_T_UpperTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_T_UpperTriangular_SquaredMatrix_SquaredMatrix_opt_m04_m21_Assign_Mul_T_UpperTriangular_UpperTriangular_Symmetric_opt_m01_Assign_Mul_UpperTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_UpperTriangular_SquaredMatrix_SquaredMatrix_opt_m04_m21_ldiv_utn_ow_opt_m4_n1'}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Eq: Tile( (1, 1), y[52,1] ) = ( ( Tile( (1, 1), F[52,52] ) * Tile( (1, 1), x[52,1] ) ) + ( Tile( (1, 1), B[52,52] ) * Tile( (1, 1), u[52,1] ) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), M0[52,52] ) = ( Tile( (1, 1), F[52,52] ) * Tile( (1, 1), P[52,52] ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), Y[52,52] ) = ( ( Tile( (1, 1), M0[52,52] ) * T( Tile( (1, 1), F[52,52] ) ) ) + Tile( (1, 1), Q[52,52] ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), v0[52,1] ) = ( Tile( (1, 1), z[52,1] ) - ( Tile( (1, 1), H[52,52] ) * Tile( (1, 1), y[52,1] ) ) )
Eq.ann: {}
Entry 4:
Eq: Tile( (1, 1), M1[52,52] ) = ( Tile( (1, 1), H[52,52] ) * Tile( (1, 1), Y[52,52] ) )
Eq.ann: {}
Entry 5:
Eq: Tile( (1, 1), M2[52,52] ) = ( Tile( (1, 1), Y[52,52] ) * T( Tile( (1, 1), H[52,52] ) ) )
Eq.ann: {}
Entry 6:
Eq: Tile( (1, 1), M3[52,52] ) = ( ( Tile( (1, 1), M1[52,52] ) * T( Tile( (1, 1), H[52,52] ) ) ) + Tile( (1, 1), R[52,52] ) )
Eq.ann: {}
Entry 7:
Eq: Tile( (1, 1), G(h(1, 52, 0), U[52,52],h(1, 52, 0)) ) = Sqrt( Tile( (1, 1), G(h(1, 52, 0), U[52,52],h(1, 52, 0)) ) )
Eq.ann: {}
Entry 8:
For_{fi35;1;51;1} ( Entry 0:
For_{fi60;0;fi35 - 2;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 52, fi60), U[52,52],h(1, 52, fi35)) ) = ( Tile( (1, 1), G(h(1, 52, fi60), U[52,52],h(1, 52, fi35)) ) Div Tile( (1, 1), G(h(1, 52, fi60), U[52,52],h(1, 52, fi60)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(fi35 - fi60 - 1, 52, fi60 + 1), U[52,52],h(1, 52, fi35)) ) = ( Tile( (1, 1), G(h(fi35 - fi60 - 1, 52, fi60 + 1), U[52,52],h(1, 52, fi35)) ) - ( T( Tile( (1, 1), G(h(1, 52, fi60), U[52,52],h(fi35 - fi60 - 1, 52, fi60 + 1)) ) ) Kro Tile( (1, 1), G(h(1, 52, fi60), U[52,52],h(1, 52, fi35)) ) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(1, 52, Max(0, fi35 - 1)), U[52,52],h(1, 52, fi35)) ) = ( Tile( (1, 1), G(h(1, 52, Max(0, fi35 - 1)), U[52,52],h(1, 52, fi35)) ) Div Tile( (1, 1), G(h(1, 52, Max(0, fi35 - 1)), U[52,52],h(1, 52, Max(0, fi35 - 1))) ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), G(h(1, 52, fi35), U[52,52],h(1, 52, fi35)) ) = ( Tile( (1, 1), G(h(1, 52, fi35), M4[52,52],h(1, 52, fi35)) ) - ( T( Tile( (1, 1), G(h(fi35, 52, 0), U[52,52],h(1, 52, fi35)) ) ) * Tile( (1, 1), G(h(fi35, 52, 0), U[52,52],h(1, 52, fi35)) ) ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), G(h(1, 52, fi35), U[52,52],h(1, 52, fi35)) ) = Sqrt( Tile( (1, 1), G(h(1, 52, fi35), U[52,52],h(1, 52, fi35)) ) )
Eq.ann: {}
 )Entry 9:
For_{fi92;0;50;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 52, fi92), v2[52,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 52, fi92), v2[52,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 52, fi92), U0[52,52],h(1, 52, fi92)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi92 + 51, 52, fi92 + 1), v2[52,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi92 + 51, 52, fi92 + 1), v2[52,1],h(1, 1, 0)) ) - ( T( Tile( (1, 1), G(h(1, 52, fi92), U0[52,52],h(-fi92 + 51, 52, fi92 + 1)) ) ) Kro Tile( (1, 1), G(h(1, 52, fi92), v2[52,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 10:
Eq: Tile( (1, 1), G(h(1, 52, 51), v2[52,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 52, 51), v2[52,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 52, 51), U0[52,52],h(1, 52, 51)) ) )
Eq.ann: {}
Entry 11:
For_{fi121;0;50;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 52, -fi121 + 51), v4[52,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 52, -fi121 + 51), v4[52,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 52, -fi121 + 51), U0[52,52],h(1, 52, -fi121 + 51)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi121 + 51, 52, 0), v4[52,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi121 + 51, 52, 0), v4[52,1],h(1, 1, 0)) ) - ( Tile( (1, 1), G(h(-fi121 + 51, 52, 0), U0[52,52],h(1, 52, -fi121 + 51)) ) Kro Tile( (1, 1), G(h(1, 52, -fi121 + 51), v4[52,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 12:
Eq: Tile( (1, 1), G(h(1, 52, 0), v4[52,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 52, 0), v4[52,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 52, 0), U0[52,52],h(1, 52, 0)) ) )
Eq.ann: {}
Entry 13:
For_{fi150;0;50;1} ( Entry 0:
For_{fi169;0;51;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 52, fi150), M6[52,52],h(1, 52, fi169)) ) = ( Tile( (1, 1), G(h(1, 52, fi150), M6[52,52],h(1, 52, fi169)) ) Div Tile( (1, 1), G(h(1, 52, fi150), U0[52,52],h(1, 52, fi150)) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(-fi150 + 51, 52, fi150 + 1), M6[52,52],h(52, 52, 0)) ) = ( Tile( (1, 1), G(h(-fi150 + 51, 52, fi150 + 1), M6[52,52],h(52, 52, 0)) ) - ( T( Tile( (1, 1), G(h(1, 52, fi150), U0[52,52],h(-fi150 + 51, 52, fi150 + 1)) ) ) * Tile( (1, 1), G(h(1, 52, fi150), M6[52,52],h(52, 52, 0)) ) ) )
Eq.ann: {}
 )Entry 14:
For_{fi180;0;51;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 52, 51), M6[52,52],h(1, 52, fi180)) ) = ( Tile( (1, 1), G(h(1, 52, 51), M6[52,52],h(1, 52, fi180)) ) Div Tile( (1, 1), G(h(1, 52, 51), U0[52,52],h(1, 52, 51)) ) )
Eq.ann: {}
 )Entry 15:
For_{fi191;0;50;1} ( Entry 0:
For_{fi210;0;51;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 52, -fi191 + 51), M8[52,52],h(1, 52, fi210)) ) = ( Tile( (1, 1), G(h(1, 52, -fi191 + 51), M8[52,52],h(1, 52, fi210)) ) Div Tile( (1, 1), G(h(1, 52, -fi191 + 51), U0[52,52],h(1, 52, -fi191 + 51)) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(-fi191 + 51, 52, 0), M8[52,52],h(52, 52, 0)) ) = ( Tile( (1, 1), G(h(-fi191 + 51, 52, 0), M8[52,52],h(52, 52, 0)) ) - ( Tile( (1, 1), G(h(-fi191 + 51, 52, 0), U0[52,52],h(1, 52, -fi191 + 51)) ) * Tile( (1, 1), G(h(1, 52, -fi191 + 51), M8[52,52],h(52, 52, 0)) ) ) )
Eq.ann: {}
 )Entry 16:
For_{fi221;0;51;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 52, 0), M8[52,52],h(1, 52, fi221)) ) = ( Tile( (1, 1), G(h(1, 52, 0), M8[52,52],h(1, 52, fi221)) ) Div Tile( (1, 1), G(h(1, 52, 0), U0[52,52],h(1, 52, 0)) ) )
Eq.ann: {}
 )Entry 17:
Eq: Tile( (1, 1), x[52,1] ) = ( Tile( (1, 1), y[52,1] ) + ( Tile( (1, 1), M2[52,52] ) * Tile( (1, 1), v0[52,1] ) ) )
Eq.ann: {}
Entry 18:
Eq: Tile( (1, 1), P[52,52] ) = ( Tile( (1, 1), Y[52,52] ) - ( Tile( (1, 1), M2[52,52] ) * Tile( (1, 1), M1[52,52] ) ) )
Eq.ann: {}
, 0.819465724124 f/c -- folder: /tmp/lgen/kf-28-52-8.abq.2017-08-17.2438149353



  Compiling took 0:00:50.880357 ----------------------------------------------------------

