  Starting compiler at 2017-08-17 14:24:50.706092 ----------------------------------------

  Decl { {u'B': SquaredMatrix[B, (4, 4), GenMatAccess], u'F': SquaredMatrix[F, (4, 4), GenMatAccess], u'H': SquaredMatrix[H, (4, 4), GenMatAccess], u'U0': UpperTriangular[U0, (4, 4), GenMatAccess], u'M5': SquaredMatrix[M5, (4, 4), GenMatAccess], u'M4': Symmetric[M4, (4, 4), USMatAccess], u'M7': SquaredMatrix[M7, (4, 4), GenMatAccess], u'M6': SquaredMatrix[M6, (4, 4), GenMatAccess], u'M1': SquaredMatrix[M1, (4, 4), GenMatAccess], u'M0': SquaredMatrix[M0, (4, 4), GenMatAccess], u'M3': Symmetric[M3, (4, 4), USMatAccess], u'M2': SquaredMatrix[M2, (4, 4), GenMatAccess], u'Y': Symmetric[Y, (4, 4), USMatAccess], u'R': Symmetric[R, (4, 4), USMatAccess], u'U': UpperTriangular[U, (4, 4), GenMatAccess], u'M8': SquaredMatrix[M8, (4, 4), GenMatAccess], u'v0': Matrix[v0, (4, 1), GenMatAccess], u'u': Matrix[u, (4, 1), GenMatAccess], u'P': Symmetric[P, (4, 4), USMatAccess], u'v2': Matrix[v2, (4, 1), GenMatAccess], u'v1': Matrix[v1, (4, 1), GenMatAccess], u'v3': Matrix[v3, (4, 1), GenMatAccess], u'Q': Symmetric[Q, (4, 4), USMatAccess], u'x': Matrix[x, (4, 1), GenMatAccess], u'y': Matrix[y, (4, 1), GenMatAccess], u'v4': Matrix[v4, (4, 1), GenMatAccess], u'z': Matrix[z, (4, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Entry 0:
Eq: y[4,1] = ( ( F[4,4] * x[4,1] ) + ( B[4,4] * u[4,1] ) )
Eq.ann: {}
Entry 1:
Eq: M0[4,4] = ( F[4,4] * P[4,4] )
Eq.ann: {}
Entry 2:
Eq: Y[4,4] = ( ( M0[4,4] * T( F[4,4] ) ) + Q[4,4] )
Eq.ann: {}
Entry 3:
Eq: v0[4,1] = ( z[4,1] - ( H[4,4] * y[4,1] ) )
Eq.ann: {}
Entry 4:
Eq: M1[4,4] = ( H[4,4] * Y[4,4] )
Eq.ann: {}
Entry 5:
Eq: M2[4,4] = ( Y[4,4] * T( H[4,4] ) )
Eq.ann: {}
Entry 6:
Eq: M3[4,4] = ( ( M1[4,4] * T( H[4,4] ) ) + R[4,4] )
Eq.ann: {}
Entry 7:
Eq: ( T( U[4,4] ) * U[4,4] ) = M4[4,4]
Eq.ann: {}
Entry 8:
Eq: ( T( U0[4,4] ) * v2[4,1] ) = v1[4,1]
Eq.ann: {}
Entry 9:
Eq: ( U0[4,4] * v4[4,1] ) = v3[4,1]
Eq.ann: {}
Entry 10:
Eq: ( T( U0[4,4] ) * M6[4,4] ) = M5[4,4]
Eq.ann: {}
Entry 11:
Eq: ( U0[4,4] * M8[4,4] ) = M7[4,4]
Eq.ann: {}
Entry 12:
Eq: x[4,1] = ( y[4,1] + ( M2[4,4] * v0[4,1] ) )
Eq.ann: {}
Entry 13:
Eq: P[4,4] = ( Y[4,4] - ( M2[4,4] * M1[4,4] ) )
Eq.ann: {}
 : VALIDATED.



  4, Decl { {u'B': SquaredMatrix[B, (4, 4), GenMatAccess], u'F': SquaredMatrix[F, (4, 4), GenMatAccess], u'H': SquaredMatrix[H, (4, 4), GenMatAccess], u'U0': UpperTriangular[U0, (4, 4), GenMatAccess], u'M5': SquaredMatrix[M5, (4, 4), GenMatAccess], u'P': Symmetric[P, (4, 4), USMatAccess], u'M7': SquaredMatrix[M7, (4, 4), GenMatAccess], u'M6': SquaredMatrix[M6, (4, 4), GenMatAccess], u'v4': Matrix[v4, (4, 1), GenMatAccess], u'M0': SquaredMatrix[M0, (4, 4), GenMatAccess], u'M3': Symmetric[M3, (4, 4), USMatAccess], u'M2': SquaredMatrix[M2, (4, 4), GenMatAccess], u'Y': Symmetric[Y, (4, 4), USMatAccess], u'R': Symmetric[R, (4, 4), USMatAccess], u'U': UpperTriangular[U, (4, 4), GenMatAccess], u'M8': SquaredMatrix[M8, (4, 4), GenMatAccess], u'v0': Matrix[v0, (4, 1), GenMatAccess], u'u': Matrix[u, (4, 1), GenMatAccess], u'M4': Symmetric[M4, (4, 4), USMatAccess], u'v2': Matrix[v2, (4, 1), GenMatAccess], u'v1': Matrix[v1, (4, 1), GenMatAccess], u'v3': Matrix[v3, (4, 1), GenMatAccess], u'Q': Symmetric[Q, (4, 4), USMatAccess], u'x': Matrix[x, (4, 1), GenMatAccess], u'y': Matrix[y, (4, 1), GenMatAccess], u'M1': SquaredMatrix[M1, (4, 4), GenMatAccess], u'z': Matrix[z, (4, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {'part_schemes': {'Assign_Mul_UpperTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_T_UpperTriangular_UpperTriangular_Symmetric_opt': {'m0': 'm01.ll'}, 'ldiv_utn_ow_opt': {'m': 'm4.ll', 'n': 'n1.ll'}, 'Assign_Mul_T_UpperTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_T_UpperTriangular_SquaredMatrix_SquaredMatrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_UpperTriangular_SquaredMatrix_SquaredMatrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}}, 'cl1ck_v': 0, 'variant_tag': 'Assign_Mul_T_UpperTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_T_UpperTriangular_SquaredMatrix_SquaredMatrix_opt_m04_m21_Assign_Mul_T_UpperTriangular_UpperTriangular_Symmetric_opt_m01_Assign_Mul_UpperTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_UpperTriangular_SquaredMatrix_SquaredMatrix_opt_m04_m21_ldiv_utn_ow_opt_m4_n1'}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Eq: Tile( (1, 1), y[4,1] ) = ( ( Tile( (1, 1), F[4,4] ) * Tile( (1, 1), x[4,1] ) ) + ( Tile( (1, 1), B[4,4] ) * Tile( (1, 1), u[4,1] ) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), M0[4,4] ) = ( Tile( (1, 1), F[4,4] ) * Tile( (1, 1), P[4,4] ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), Y[4,4] ) = ( ( Tile( (1, 1), M0[4,4] ) * T( Tile( (1, 1), F[4,4] ) ) ) + Tile( (1, 1), Q[4,4] ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), v0[4,1] ) = ( Tile( (1, 1), z[4,1] ) - ( Tile( (1, 1), H[4,4] ) * Tile( (1, 1), y[4,1] ) ) )
Eq.ann: {}
Entry 4:
Eq: Tile( (1, 1), M1[4,4] ) = ( Tile( (1, 1), H[4,4] ) * Tile( (1, 1), Y[4,4] ) )
Eq.ann: {}
Entry 5:
Eq: Tile( (1, 1), M2[4,4] ) = ( Tile( (1, 1), Y[4,4] ) * T( Tile( (1, 1), H[4,4] ) ) )
Eq.ann: {}
Entry 6:
Eq: Tile( (1, 1), M3[4,4] ) = ( ( Tile( (1, 1), M1[4,4] ) * T( Tile( (1, 1), H[4,4] ) ) ) + Tile( (1, 1), R[4,4] ) )
Eq.ann: {}
Entry 7:
Eq: Tile( (1, 1), G(h(1, 4, 0), U[4,4],h(1, 4, 0)) ) = Sqrt( Tile( (1, 1), G(h(1, 4, 0), U[4,4],h(1, 4, 0)) ) )
Eq.ann: {}
Entry 8:
For_{fi35;1;3;1} ( Entry 0:
For_{fi60;0;fi35 - 2;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 4, fi60), U[4,4],h(1, 4, fi35)) ) = ( Tile( (1, 1), G(h(1, 4, fi60), U[4,4],h(1, 4, fi35)) ) Div Tile( (1, 1), G(h(1, 4, fi60), U[4,4],h(1, 4, fi60)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(fi35 - fi60 - 1, 4, fi60 + 1), U[4,4],h(1, 4, fi35)) ) = ( Tile( (1, 1), G(h(fi35 - fi60 - 1, 4, fi60 + 1), U[4,4],h(1, 4, fi35)) ) - ( T( Tile( (1, 1), G(h(1, 4, fi60), U[4,4],h(fi35 - fi60 - 1, 4, fi60 + 1)) ) ) Kro Tile( (1, 1), G(h(1, 4, fi60), U[4,4],h(1, 4, fi35)) ) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(1, 4, Max(0, fi35 - 1)), U[4,4],h(1, 4, fi35)) ) = ( Tile( (1, 1), G(h(1, 4, Max(0, fi35 - 1)), U[4,4],h(1, 4, fi35)) ) Div Tile( (1, 1), G(h(1, 4, Max(0, fi35 - 1)), U[4,4],h(1, 4, Max(0, fi35 - 1))) ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), G(h(1, 4, fi35), U[4,4],h(1, 4, fi35)) ) = ( Tile( (1, 1), G(h(1, 4, fi35), M4[4,4],h(1, 4, fi35)) ) - ( T( Tile( (1, 1), G(h(fi35, 4, 0), U[4,4],h(1, 4, fi35)) ) ) * Tile( (1, 1), G(h(fi35, 4, 0), U[4,4],h(1, 4, fi35)) ) ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), G(h(1, 4, fi35), U[4,4],h(1, 4, fi35)) ) = Sqrt( Tile( (1, 1), G(h(1, 4, fi35), U[4,4],h(1, 4, fi35)) ) )
Eq.ann: {}
 )Entry 9:
For_{fi92;0;2;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 4, fi92), v2[4,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 4, fi92), v2[4,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 4, fi92), U0[4,4],h(1, 4, fi92)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi92 + 3, 4, fi92 + 1), v2[4,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi92 + 3, 4, fi92 + 1), v2[4,1],h(1, 1, 0)) ) - ( T( Tile( (1, 1), G(h(1, 4, fi92), U0[4,4],h(-fi92 + 3, 4, fi92 + 1)) ) ) Kro Tile( (1, 1), G(h(1, 4, fi92), v2[4,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 10:
Eq: Tile( (1, 1), G(h(1, 4, 3), v2[4,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 4, 3), v2[4,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 4, 3), U0[4,4],h(1, 4, 3)) ) )
Eq.ann: {}
Entry 11:
For_{fi121;0;2;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 4, -fi121 + 3), v4[4,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 4, -fi121 + 3), v4[4,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 4, -fi121 + 3), U0[4,4],h(1, 4, -fi121 + 3)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi121 + 3, 4, 0), v4[4,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi121 + 3, 4, 0), v4[4,1],h(1, 1, 0)) ) - ( Tile( (1, 1), G(h(-fi121 + 3, 4, 0), U0[4,4],h(1, 4, -fi121 + 3)) ) Kro Tile( (1, 1), G(h(1, 4, -fi121 + 3), v4[4,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 12:
Eq: Tile( (1, 1), G(h(1, 4, 0), v4[4,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 4, 0), v4[4,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 4, 0), U0[4,4],h(1, 4, 0)) ) )
Eq.ann: {}
Entry 13:
For_{fi150;0;2;1} ( Entry 0:
For_{fi169;0;3;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 4, fi150), M6[4,4],h(1, 4, fi169)) ) = ( Tile( (1, 1), G(h(1, 4, fi150), M6[4,4],h(1, 4, fi169)) ) Div Tile( (1, 1), G(h(1, 4, fi150), U0[4,4],h(1, 4, fi150)) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(-fi150 + 3, 4, fi150 + 1), M6[4,4],h(4, 4, 0)) ) = ( Tile( (1, 1), G(h(-fi150 + 3, 4, fi150 + 1), M6[4,4],h(4, 4, 0)) ) - ( T( Tile( (1, 1), G(h(1, 4, fi150), U0[4,4],h(-fi150 + 3, 4, fi150 + 1)) ) ) * Tile( (1, 1), G(h(1, 4, fi150), M6[4,4],h(4, 4, 0)) ) ) )
Eq.ann: {}
 )Entry 14:
For_{fi180;0;3;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 4, 3), M6[4,4],h(1, 4, fi180)) ) = ( Tile( (1, 1), G(h(1, 4, 3), M6[4,4],h(1, 4, fi180)) ) Div Tile( (1, 1), G(h(1, 4, 3), U0[4,4],h(1, 4, 3)) ) )
Eq.ann: {}
 )Entry 15:
For_{fi191;0;2;1} ( Entry 0:
For_{fi210;0;3;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 4, -fi191 + 3), M8[4,4],h(1, 4, fi210)) ) = ( Tile( (1, 1), G(h(1, 4, -fi191 + 3), M8[4,4],h(1, 4, fi210)) ) Div Tile( (1, 1), G(h(1, 4, -fi191 + 3), U0[4,4],h(1, 4, -fi191 + 3)) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(-fi191 + 3, 4, 0), M8[4,4],h(4, 4, 0)) ) = ( Tile( (1, 1), G(h(-fi191 + 3, 4, 0), M8[4,4],h(4, 4, 0)) ) - ( Tile( (1, 1), G(h(-fi191 + 3, 4, 0), U0[4,4],h(1, 4, -fi191 + 3)) ) * Tile( (1, 1), G(h(1, 4, -fi191 + 3), M8[4,4],h(4, 4, 0)) ) ) )
Eq.ann: {}
 )Entry 16:
For_{fi221;0;3;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 4, 0), M8[4,4],h(1, 4, fi221)) ) = ( Tile( (1, 1), G(h(1, 4, 0), M8[4,4],h(1, 4, fi221)) ) Div Tile( (1, 1), G(h(1, 4, 0), U0[4,4],h(1, 4, 0)) ) )
Eq.ann: {}
 )Entry 17:
Eq: Tile( (1, 1), x[4,1] ) = ( Tile( (1, 1), y[4,1] ) + ( Tile( (1, 1), M2[4,4] ) * Tile( (1, 1), v0[4,1] ) ) )
Eq.ann: {}
Entry 18:
Eq: Tile( (1, 1), P[4,4] ) = ( Tile( (1, 1), Y[4,4] ) - ( Tile( (1, 1), M2[4,4] ) * Tile( (1, 1), M1[4,4] ) ) )
Eq.ann: {}
, 0.515216746102 f/c -- folder: /tmp/lgen/kf-4-20-8.abq.2017-08-17.342574144



  Compiling took 0:00:49.259999 ----------------------------------------------------------

  Starting compiler at 2017-08-17 14:25:41.304681 ----------------------------------------

  Decl { {u'B': SquaredMatrix[B, (12, 12), GenMatAccess], u'F': SquaredMatrix[F, (12, 12), GenMatAccess], u'H': SquaredMatrix[H, (12, 12), GenMatAccess], u'U0': UpperTriangular[U0, (12, 12), GenMatAccess], u'M5': SquaredMatrix[M5, (12, 12), GenMatAccess], u'M4': Symmetric[M4, (12, 12), USMatAccess], u'M7': SquaredMatrix[M7, (12, 12), GenMatAccess], u'M6': SquaredMatrix[M6, (12, 12), GenMatAccess], u'M1': SquaredMatrix[M1, (12, 12), GenMatAccess], u'M0': SquaredMatrix[M0, (12, 12), GenMatAccess], u'M3': Symmetric[M3, (12, 12), USMatAccess], u'M2': SquaredMatrix[M2, (12, 12), GenMatAccess], u'Y': Symmetric[Y, (12, 12), USMatAccess], u'R': Symmetric[R, (12, 12), USMatAccess], u'U': UpperTriangular[U, (12, 12), GenMatAccess], u'M8': SquaredMatrix[M8, (12, 12), GenMatAccess], u'v0': Matrix[v0, (12, 1), GenMatAccess], u'u': Matrix[u, (12, 1), GenMatAccess], u'P': Symmetric[P, (12, 12), USMatAccess], u'v2': Matrix[v2, (12, 1), GenMatAccess], u'v1': Matrix[v1, (12, 1), GenMatAccess], u'v3': Matrix[v3, (12, 1), GenMatAccess], u'Q': Symmetric[Q, (12, 12), USMatAccess], u'x': Matrix[x, (12, 1), GenMatAccess], u'y': Matrix[y, (12, 1), GenMatAccess], u'v4': Matrix[v4, (12, 1), GenMatAccess], u'z': Matrix[z, (12, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Entry 0:
Eq: y[12,1] = ( ( F[12,12] * x[12,1] ) + ( B[12,12] * u[12,1] ) )
Eq.ann: {}
Entry 1:
Eq: M0[12,12] = ( F[12,12] * P[12,12] )
Eq.ann: {}
Entry 2:
Eq: Y[12,12] = ( ( M0[12,12] * T( F[12,12] ) ) + Q[12,12] )
Eq.ann: {}
Entry 3:
Eq: v0[12,1] = ( z[12,1] - ( H[12,12] * y[12,1] ) )
Eq.ann: {}
Entry 4:
Eq: M1[12,12] = ( H[12,12] * Y[12,12] )
Eq.ann: {}
Entry 5:
Eq: M2[12,12] = ( Y[12,12] * T( H[12,12] ) )
Eq.ann: {}
Entry 6:
Eq: M3[12,12] = ( ( M1[12,12] * T( H[12,12] ) ) + R[12,12] )
Eq.ann: {}
Entry 7:
Eq: ( T( U[12,12] ) * U[12,12] ) = M4[12,12]
Eq.ann: {}
Entry 8:
Eq: ( T( U0[12,12] ) * v2[12,1] ) = v1[12,1]
Eq.ann: {}
Entry 9:
Eq: ( U0[12,12] * v4[12,1] ) = v3[12,1]
Eq.ann: {}
Entry 10:
Eq: ( T( U0[12,12] ) * M6[12,12] ) = M5[12,12]
Eq.ann: {}
Entry 11:
Eq: ( U0[12,12] * M8[12,12] ) = M7[12,12]
Eq.ann: {}
Entry 12:
Eq: x[12,1] = ( y[12,1] + ( M2[12,12] * v0[12,1] ) )
Eq.ann: {}
Entry 13:
Eq: P[12,12] = ( Y[12,12] - ( M2[12,12] * M1[12,12] ) )
Eq.ann: {}
 : VALIDATED.



  12, Decl { {u'B': SquaredMatrix[B, (12, 12), GenMatAccess], u'F': SquaredMatrix[F, (12, 12), GenMatAccess], u'H': SquaredMatrix[H, (12, 12), GenMatAccess], u'U0': UpperTriangular[U0, (12, 12), GenMatAccess], u'M5': SquaredMatrix[M5, (12, 12), GenMatAccess], u'P': Symmetric[P, (12, 12), USMatAccess], u'M7': SquaredMatrix[M7, (12, 12), GenMatAccess], u'M6': SquaredMatrix[M6, (12, 12), GenMatAccess], u'v4': Matrix[v4, (12, 1), GenMatAccess], u'M0': SquaredMatrix[M0, (12, 12), GenMatAccess], u'M3': Symmetric[M3, (12, 12), USMatAccess], u'M2': SquaredMatrix[M2, (12, 12), GenMatAccess], u'Y': Symmetric[Y, (12, 12), USMatAccess], u'R': Symmetric[R, (12, 12), USMatAccess], u'U': UpperTriangular[U, (12, 12), GenMatAccess], u'M8': SquaredMatrix[M8, (12, 12), GenMatAccess], u'v0': Matrix[v0, (12, 1), GenMatAccess], u'u': Matrix[u, (12, 1), GenMatAccess], u'M4': Symmetric[M4, (12, 12), USMatAccess], u'v2': Matrix[v2, (12, 1), GenMatAccess], u'v1': Matrix[v1, (12, 1), GenMatAccess], u'v3': Matrix[v3, (12, 1), GenMatAccess], u'Q': Symmetric[Q, (12, 12), USMatAccess], u'x': Matrix[x, (12, 1), GenMatAccess], u'y': Matrix[y, (12, 1), GenMatAccess], u'M1': SquaredMatrix[M1, (12, 12), GenMatAccess], u'z': Matrix[z, (12, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {'part_schemes': {'Assign_Mul_UpperTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_T_UpperTriangular_UpperTriangular_Symmetric_opt': {'m0': 'm01.ll'}, 'ldiv_utn_ow_opt': {'m': 'm4.ll', 'n': 'n1.ll'}, 'Assign_Mul_T_UpperTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_T_UpperTriangular_SquaredMatrix_SquaredMatrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_UpperTriangular_SquaredMatrix_SquaredMatrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}}, 'cl1ck_v': 0, 'variant_tag': 'Assign_Mul_T_UpperTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_T_UpperTriangular_SquaredMatrix_SquaredMatrix_opt_m04_m21_Assign_Mul_T_UpperTriangular_UpperTriangular_Symmetric_opt_m01_Assign_Mul_UpperTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_UpperTriangular_SquaredMatrix_SquaredMatrix_opt_m04_m21_ldiv_utn_ow_opt_m4_n1'}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Eq: Tile( (1, 1), y[12,1] ) = ( ( Tile( (1, 1), F[12,12] ) * Tile( (1, 1), x[12,1] ) ) + ( Tile( (1, 1), B[12,12] ) * Tile( (1, 1), u[12,1] ) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), M0[12,12] ) = ( Tile( (1, 1), F[12,12] ) * Tile( (1, 1), P[12,12] ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), Y[12,12] ) = ( ( Tile( (1, 1), M0[12,12] ) * T( Tile( (1, 1), F[12,12] ) ) ) + Tile( (1, 1), Q[12,12] ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), v0[12,1] ) = ( Tile( (1, 1), z[12,1] ) - ( Tile( (1, 1), H[12,12] ) * Tile( (1, 1), y[12,1] ) ) )
Eq.ann: {}
Entry 4:
Eq: Tile( (1, 1), M1[12,12] ) = ( Tile( (1, 1), H[12,12] ) * Tile( (1, 1), Y[12,12] ) )
Eq.ann: {}
Entry 5:
Eq: Tile( (1, 1), M2[12,12] ) = ( Tile( (1, 1), Y[12,12] ) * T( Tile( (1, 1), H[12,12] ) ) )
Eq.ann: {}
Entry 6:
Eq: Tile( (1, 1), M3[12,12] ) = ( ( Tile( (1, 1), M1[12,12] ) * T( Tile( (1, 1), H[12,12] ) ) ) + Tile( (1, 1), R[12,12] ) )
Eq.ann: {}
Entry 7:
Eq: Tile( (1, 1), G(h(1, 12, 0), U[12,12],h(1, 12, 0)) ) = Sqrt( Tile( (1, 1), G(h(1, 12, 0), U[12,12],h(1, 12, 0)) ) )
Eq.ann: {}
Entry 8:
For_{fi35;1;11;1} ( Entry 0:
For_{fi60;0;fi35 - 2;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 12, fi60), U[12,12],h(1, 12, fi35)) ) = ( Tile( (1, 1), G(h(1, 12, fi60), U[12,12],h(1, 12, fi35)) ) Div Tile( (1, 1), G(h(1, 12, fi60), U[12,12],h(1, 12, fi60)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(fi35 - fi60 - 1, 12, fi60 + 1), U[12,12],h(1, 12, fi35)) ) = ( Tile( (1, 1), G(h(fi35 - fi60 - 1, 12, fi60 + 1), U[12,12],h(1, 12, fi35)) ) - ( T( Tile( (1, 1), G(h(1, 12, fi60), U[12,12],h(fi35 - fi60 - 1, 12, fi60 + 1)) ) ) Kro Tile( (1, 1), G(h(1, 12, fi60), U[12,12],h(1, 12, fi35)) ) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(1, 12, Max(0, fi35 - 1)), U[12,12],h(1, 12, fi35)) ) = ( Tile( (1, 1), G(h(1, 12, Max(0, fi35 - 1)), U[12,12],h(1, 12, fi35)) ) Div Tile( (1, 1), G(h(1, 12, Max(0, fi35 - 1)), U[12,12],h(1, 12, Max(0, fi35 - 1))) ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), G(h(1, 12, fi35), U[12,12],h(1, 12, fi35)) ) = ( Tile( (1, 1), G(h(1, 12, fi35), M4[12,12],h(1, 12, fi35)) ) - ( T( Tile( (1, 1), G(h(fi35, 12, 0), U[12,12],h(1, 12, fi35)) ) ) * Tile( (1, 1), G(h(fi35, 12, 0), U[12,12],h(1, 12, fi35)) ) ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), G(h(1, 12, fi35), U[12,12],h(1, 12, fi35)) ) = Sqrt( Tile( (1, 1), G(h(1, 12, fi35), U[12,12],h(1, 12, fi35)) ) )
Eq.ann: {}
 )Entry 9:
For_{fi92;0;10;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 12, fi92), v2[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, fi92), v2[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, fi92), U0[12,12],h(1, 12, fi92)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi92 + 11, 12, fi92 + 1), v2[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi92 + 11, 12, fi92 + 1), v2[12,1],h(1, 1, 0)) ) - ( T( Tile( (1, 1), G(h(1, 12, fi92), U0[12,12],h(-fi92 + 11, 12, fi92 + 1)) ) ) Kro Tile( (1, 1), G(h(1, 12, fi92), v2[12,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 10:
Eq: Tile( (1, 1), G(h(1, 12, 11), v2[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, 11), v2[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, 11), U0[12,12],h(1, 12, 11)) ) )
Eq.ann: {}
Entry 11:
For_{fi121;0;10;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 12, -fi121 + 11), v4[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, -fi121 + 11), v4[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, -fi121 + 11), U0[12,12],h(1, 12, -fi121 + 11)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi121 + 11, 12, 0), v4[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi121 + 11, 12, 0), v4[12,1],h(1, 1, 0)) ) - ( Tile( (1, 1), G(h(-fi121 + 11, 12, 0), U0[12,12],h(1, 12, -fi121 + 11)) ) Kro Tile( (1, 1), G(h(1, 12, -fi121 + 11), v4[12,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 12:
Eq: Tile( (1, 1), G(h(1, 12, 0), v4[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, 0), v4[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, 0), U0[12,12],h(1, 12, 0)) ) )
Eq.ann: {}
Entry 13:
For_{fi150;0;10;1} ( Entry 0:
For_{fi169;0;11;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 12, fi150), M6[12,12],h(1, 12, fi169)) ) = ( Tile( (1, 1), G(h(1, 12, fi150), M6[12,12],h(1, 12, fi169)) ) Div Tile( (1, 1), G(h(1, 12, fi150), U0[12,12],h(1, 12, fi150)) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(-fi150 + 11, 12, fi150 + 1), M6[12,12],h(12, 12, 0)) ) = ( Tile( (1, 1), G(h(-fi150 + 11, 12, fi150 + 1), M6[12,12],h(12, 12, 0)) ) - ( T( Tile( (1, 1), G(h(1, 12, fi150), U0[12,12],h(-fi150 + 11, 12, fi150 + 1)) ) ) * Tile( (1, 1), G(h(1, 12, fi150), M6[12,12],h(12, 12, 0)) ) ) )
Eq.ann: {}
 )Entry 14:
For_{fi180;0;11;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 12, 11), M6[12,12],h(1, 12, fi180)) ) = ( Tile( (1, 1), G(h(1, 12, 11), M6[12,12],h(1, 12, fi180)) ) Div Tile( (1, 1), G(h(1, 12, 11), U0[12,12],h(1, 12, 11)) ) )
Eq.ann: {}
 )Entry 15:
For_{fi191;0;10;1} ( Entry 0:
For_{fi210;0;11;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 12, -fi191 + 11), M8[12,12],h(1, 12, fi210)) ) = ( Tile( (1, 1), G(h(1, 12, -fi191 + 11), M8[12,12],h(1, 12, fi210)) ) Div Tile( (1, 1), G(h(1, 12, -fi191 + 11), U0[12,12],h(1, 12, -fi191 + 11)) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(-fi191 + 11, 12, 0), M8[12,12],h(12, 12, 0)) ) = ( Tile( (1, 1), G(h(-fi191 + 11, 12, 0), M8[12,12],h(12, 12, 0)) ) - ( Tile( (1, 1), G(h(-fi191 + 11, 12, 0), U0[12,12],h(1, 12, -fi191 + 11)) ) * Tile( (1, 1), G(h(1, 12, -fi191 + 11), M8[12,12],h(12, 12, 0)) ) ) )
Eq.ann: {}
 )Entry 16:
For_{fi221;0;11;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 12, 0), M8[12,12],h(1, 12, fi221)) ) = ( Tile( (1, 1), G(h(1, 12, 0), M8[12,12],h(1, 12, fi221)) ) Div Tile( (1, 1), G(h(1, 12, 0), U0[12,12],h(1, 12, 0)) ) )
Eq.ann: {}
 )Entry 17:
Eq: Tile( (1, 1), x[12,1] ) = ( Tile( (1, 1), y[12,1] ) + ( Tile( (1, 1), M2[12,12] ) * Tile( (1, 1), v0[12,1] ) ) )
Eq.ann: {}
Entry 18:
Eq: Tile( (1, 1), P[12,12] ) = ( Tile( (1, 1), Y[12,12] ) - ( Tile( (1, 1), M2[12,12] ) * Tile( (1, 1), M1[12,12] ) ) )
Eq.ann: {}
, 0.557031918586 f/c -- folder: /tmp/lgen/kf-4-20-8.abq.2017-08-17.342574144



  Compiling took 0:00:52.643126 ----------------------------------------------------------

  Starting compiler at 2017-08-17 14:26:35.281304 ----------------------------------------

  Decl { {u'B': SquaredMatrix[B, (20, 20), GenMatAccess], u'F': SquaredMatrix[F, (20, 20), GenMatAccess], u'H': SquaredMatrix[H, (20, 20), GenMatAccess], u'U0': UpperTriangular[U0, (20, 20), GenMatAccess], u'M5': SquaredMatrix[M5, (20, 20), GenMatAccess], u'M4': Symmetric[M4, (20, 20), USMatAccess], u'M7': SquaredMatrix[M7, (20, 20), GenMatAccess], u'M6': SquaredMatrix[M6, (20, 20), GenMatAccess], u'M1': SquaredMatrix[M1, (20, 20), GenMatAccess], u'M0': SquaredMatrix[M0, (20, 20), GenMatAccess], u'M3': Symmetric[M3, (20, 20), USMatAccess], u'M2': SquaredMatrix[M2, (20, 20), GenMatAccess], u'Y': Symmetric[Y, (20, 20), USMatAccess], u'R': Symmetric[R, (20, 20), USMatAccess], u'U': UpperTriangular[U, (20, 20), GenMatAccess], u'M8': SquaredMatrix[M8, (20, 20), GenMatAccess], u'v0': Matrix[v0, (20, 1), GenMatAccess], u'u': Matrix[u, (20, 1), GenMatAccess], u'P': Symmetric[P, (20, 20), USMatAccess], u'v2': Matrix[v2, (20, 1), GenMatAccess], u'v1': Matrix[v1, (20, 1), GenMatAccess], u'v3': Matrix[v3, (20, 1), GenMatAccess], u'Q': Symmetric[Q, (20, 20), USMatAccess], u'x': Matrix[x, (20, 1), GenMatAccess], u'y': Matrix[y, (20, 1), GenMatAccess], u'v4': Matrix[v4, (20, 1), GenMatAccess], u'z': Matrix[z, (20, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Entry 0:
Eq: y[20,1] = ( ( F[20,20] * x[20,1] ) + ( B[20,20] * u[20,1] ) )
Eq.ann: {}
Entry 1:
Eq: M0[20,20] = ( F[20,20] * P[20,20] )
Eq.ann: {}
Entry 2:
Eq: Y[20,20] = ( ( M0[20,20] * T( F[20,20] ) ) + Q[20,20] )
Eq.ann: {}
Entry 3:
Eq: v0[20,1] = ( z[20,1] - ( H[20,20] * y[20,1] ) )
Eq.ann: {}
Entry 4:
Eq: M1[20,20] = ( H[20,20] * Y[20,20] )
Eq.ann: {}
Entry 5:
Eq: M2[20,20] = ( Y[20,20] * T( H[20,20] ) )
Eq.ann: {}
Entry 6:
Eq: M3[20,20] = ( ( M1[20,20] * T( H[20,20] ) ) + R[20,20] )
Eq.ann: {}
Entry 7:
Eq: ( T( U[20,20] ) * U[20,20] ) = M4[20,20]
Eq.ann: {}
Entry 8:
Eq: ( T( U0[20,20] ) * v2[20,1] ) = v1[20,1]
Eq.ann: {}
Entry 9:
Eq: ( U0[20,20] * v4[20,1] ) = v3[20,1]
Eq.ann: {}
Entry 10:
Eq: ( T( U0[20,20] ) * M6[20,20] ) = M5[20,20]
Eq.ann: {}
Entry 11:
Eq: ( U0[20,20] * M8[20,20] ) = M7[20,20]
Eq.ann: {}
Entry 12:
Eq: x[20,1] = ( y[20,1] + ( M2[20,20] * v0[20,1] ) )
Eq.ann: {}
Entry 13:
Eq: P[20,20] = ( Y[20,20] - ( M2[20,20] * M1[20,20] ) )
Eq.ann: {}
 : VALIDATED.



  20, Decl { {u'B': SquaredMatrix[B, (20, 20), GenMatAccess], u'F': SquaredMatrix[F, (20, 20), GenMatAccess], u'H': SquaredMatrix[H, (20, 20), GenMatAccess], u'U0': UpperTriangular[U0, (20, 20), GenMatAccess], u'M5': SquaredMatrix[M5, (20, 20), GenMatAccess], u'P': Symmetric[P, (20, 20), USMatAccess], u'M7': SquaredMatrix[M7, (20, 20), GenMatAccess], u'M6': SquaredMatrix[M6, (20, 20), GenMatAccess], u'v4': Matrix[v4, (20, 1), GenMatAccess], u'M0': SquaredMatrix[M0, (20, 20), GenMatAccess], u'M3': Symmetric[M3, (20, 20), USMatAccess], u'M2': SquaredMatrix[M2, (20, 20), GenMatAccess], u'Y': Symmetric[Y, (20, 20), USMatAccess], u'R': Symmetric[R, (20, 20), USMatAccess], u'U': UpperTriangular[U, (20, 20), GenMatAccess], u'M8': SquaredMatrix[M8, (20, 20), GenMatAccess], u'v0': Matrix[v0, (20, 1), GenMatAccess], u'u': Matrix[u, (20, 1), GenMatAccess], u'M4': Symmetric[M4, (20, 20), USMatAccess], u'v2': Matrix[v2, (20, 1), GenMatAccess], u'v1': Matrix[v1, (20, 1), GenMatAccess], u'v3': Matrix[v3, (20, 1), GenMatAccess], u'Q': Symmetric[Q, (20, 20), USMatAccess], u'x': Matrix[x, (20, 1), GenMatAccess], u'y': Matrix[y, (20, 1), GenMatAccess], u'M1': SquaredMatrix[M1, (20, 20), GenMatAccess], u'z': Matrix[z, (20, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {'part_schemes': {'Assign_Mul_UpperTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_T_UpperTriangular_UpperTriangular_Symmetric_opt': {'m0': 'm01.ll'}, 'ldiv_utn_ow_opt': {'m': 'm4.ll', 'n': 'n1.ll'}, 'Assign_Mul_T_UpperTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_T_UpperTriangular_SquaredMatrix_SquaredMatrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_UpperTriangular_SquaredMatrix_SquaredMatrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}}, 'cl1ck_v': 0, 'variant_tag': 'Assign_Mul_T_UpperTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_T_UpperTriangular_SquaredMatrix_SquaredMatrix_opt_m04_m21_Assign_Mul_T_UpperTriangular_UpperTriangular_Symmetric_opt_m01_Assign_Mul_UpperTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_UpperTriangular_SquaredMatrix_SquaredMatrix_opt_m04_m21_ldiv_utn_ow_opt_m4_n1'}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
Eq: Tile( (1, 1), y[20,1] ) = ( ( Tile( (1, 1), F[20,20] ) * Tile( (1, 1), x[20,1] ) ) + ( Tile( (1, 1), B[20,20] ) * Tile( (1, 1), u[20,1] ) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), M0[20,20] ) = ( Tile( (1, 1), F[20,20] ) * Tile( (1, 1), P[20,20] ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), Y[20,20] ) = ( ( Tile( (1, 1), M0[20,20] ) * T( Tile( (1, 1), F[20,20] ) ) ) + Tile( (1, 1), Q[20,20] ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), v0[20,1] ) = ( Tile( (1, 1), z[20,1] ) - ( Tile( (1, 1), H[20,20] ) * Tile( (1, 1), y[20,1] ) ) )
Eq.ann: {}
Entry 4:
Eq: Tile( (1, 1), M1[20,20] ) = ( Tile( (1, 1), H[20,20] ) * Tile( (1, 1), Y[20,20] ) )
Eq.ann: {}
Entry 5:
Eq: Tile( (1, 1), M2[20,20] ) = ( Tile( (1, 1), Y[20,20] ) * T( Tile( (1, 1), H[20,20] ) ) )
Eq.ann: {}
Entry 6:
Eq: Tile( (1, 1), M3[20,20] ) = ( ( Tile( (1, 1), M1[20,20] ) * T( Tile( (1, 1), H[20,20] ) ) ) + Tile( (1, 1), R[20,20] ) )
Eq.ann: {}
Entry 7:
Eq: Tile( (1, 1), G(h(1, 20, 0), U[20,20],h(1, 20, 0)) ) = Sqrt( Tile( (1, 1), G(h(1, 20, 0), U[20,20],h(1, 20, 0)) ) )
Eq.ann: {}
Entry 8:
For_{fi35;1;19;1} ( Entry 0:
For_{fi60;0;fi35 - 2;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 20, fi60), U[20,20],h(1, 20, fi35)) ) = ( Tile( (1, 1), G(h(1, 20, fi60), U[20,20],h(1, 20, fi35)) ) Div Tile( (1, 1), G(h(1, 20, fi60), U[20,20],h(1, 20, fi60)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(fi35 - fi60 - 1, 20, fi60 + 1), U[20,20],h(1, 20, fi35)) ) = ( Tile( (1, 1), G(h(fi35 - fi60 - 1, 20, fi60 + 1), U[20,20],h(1, 20, fi35)) ) - ( T( Tile( (1, 1), G(h(1, 20, fi60), U[20,20],h(fi35 - fi60 - 1, 20, fi60 + 1)) ) ) Kro Tile( (1, 1), G(h(1, 20, fi60), U[20,20],h(1, 20, fi35)) ) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(1, 20, Max(0, fi35 - 1)), U[20,20],h(1, 20, fi35)) ) = ( Tile( (1, 1), G(h(1, 20, Max(0, fi35 - 1)), U[20,20],h(1, 20, fi35)) ) Div Tile( (1, 1), G(h(1, 20, Max(0, fi35 - 1)), U[20,20],h(1, 20, Max(0, fi35 - 1))) ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), G(h(1, 20, fi35), U[20,20],h(1, 20, fi35)) ) = ( Tile( (1, 1), G(h(1, 20, fi35), M4[20,20],h(1, 20, fi35)) ) - ( T( Tile( (1, 1), G(h(fi35, 20, 0), U[20,20],h(1, 20, fi35)) ) ) * Tile( (1, 1), G(h(fi35, 20, 0), U[20,20],h(1, 20, fi35)) ) ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), G(h(1, 20, fi35), U[20,20],h(1, 20, fi35)) ) = Sqrt( Tile( (1, 1), G(h(1, 20, fi35), U[20,20],h(1, 20, fi35)) ) )
Eq.ann: {}
 )Entry 9:
For_{fi92;0;18;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 20, fi92), v2[20,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 20, fi92), v2[20,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 20, fi92), U0[20,20],h(1, 20, fi92)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi92 + 19, 20, fi92 + 1), v2[20,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi92 + 19, 20, fi92 + 1), v2[20,1],h(1, 1, 0)) ) - ( T( Tile( (1, 1), G(h(1, 20, fi92), U0[20,20],h(-fi92 + 19, 20, fi92 + 1)) ) ) Kro Tile( (1, 1), G(h(1, 20, fi92), v2[20,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 10:
Eq: Tile( (1, 1), G(h(1, 20, 19), v2[20,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 20, 19), v2[20,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 20, 19), U0[20,20],h(1, 20, 19)) ) )
Eq.ann: {}
Entry 11:
For_{fi121;0;18;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 20, -fi121 + 19), v4[20,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 20, -fi121 + 19), v4[20,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 20, -fi121 + 19), U0[20,20],h(1, 20, -fi121 + 19)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(-fi121 + 19, 20, 0), v4[20,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(-fi121 + 19, 20, 0), v4[20,1],h(1, 1, 0)) ) - ( Tile( (1, 1), G(h(-fi121 + 19, 20, 0), U0[20,20],h(1, 20, -fi121 + 19)) ) Kro Tile( (1, 1), G(h(1, 20, -fi121 + 19), v4[20,1],h(1, 1, 0)) ) ) )
Eq.ann: {}
 )Entry 12:
Eq: Tile( (1, 1), G(h(1, 20, 0), v4[20,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 20, 0), v4[20,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 20, 0), U0[20,20],h(1, 20, 0)) ) )
Eq.ann: {}
Entry 13:
For_{fi150;0;18;1} ( Entry 0:
For_{fi169;0;19;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 20, fi150), M6[20,20],h(1, 20, fi169)) ) = ( Tile( (1, 1), G(h(1, 20, fi150), M6[20,20],h(1, 20, fi169)) ) Div Tile( (1, 1), G(h(1, 20, fi150), U0[20,20],h(1, 20, fi150)) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(-fi150 + 19, 20, fi150 + 1), M6[20,20],h(20, 20, 0)) ) = ( Tile( (1, 1), G(h(-fi150 + 19, 20, fi150 + 1), M6[20,20],h(20, 20, 0)) ) - ( T( Tile( (1, 1), G(h(1, 20, fi150), U0[20,20],h(-fi150 + 19, 20, fi150 + 1)) ) ) * Tile( (1, 1), G(h(1, 20, fi150), M6[20,20],h(20, 20, 0)) ) ) )
Eq.ann: {}
 )Entry 14:
For_{fi180;0;19;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 20, 19), M6[20,20],h(1, 20, fi180)) ) = ( Tile( (1, 1), G(h(1, 20, 19), M6[20,20],h(1, 20, fi180)) ) Div Tile( (1, 1), G(h(1, 20, 19), U0[20,20],h(1, 20, 19)) ) )
Eq.ann: {}
 )Entry 15:
For_{fi191;0;18;1} ( Entry 0:
For_{fi210;0;19;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 20, -fi191 + 19), M8[20,20],h(1, 20, fi210)) ) = ( Tile( (1, 1), G(h(1, 20, -fi191 + 19), M8[20,20],h(1, 20, fi210)) ) Div Tile( (1, 1), G(h(1, 20, -fi191 + 19), U0[20,20],h(1, 20, -fi191 + 19)) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(-fi191 + 19, 20, 0), M8[20,20],h(20, 20, 0)) ) = ( Tile( (1, 1), G(h(-fi191 + 19, 20, 0), M8[20,20],h(20, 20, 0)) ) - ( Tile( (1, 1), G(h(-fi191 + 19, 20, 0), U0[20,20],h(1, 20, -fi191 + 19)) ) * Tile( (1, 1), G(h(1, 20, -fi191 + 19), M8[20,20],h(20, 20, 0)) ) ) )
Eq.ann: {}
 )Entry 16:
For_{fi221;0;19;1} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 20, 0), M8[20,20],h(1, 20, fi221)) ) = ( Tile( (1, 1), G(h(1, 20, 0), M8[20,20],h(1, 20, fi221)) ) Div Tile( (1, 1), G(h(1, 20, 0), U0[20,20],h(1, 20, 0)) ) )
Eq.ann: {}
 )Entry 17:
Eq: Tile( (1, 1), x[20,1] ) = ( Tile( (1, 1), y[20,1] ) + ( Tile( (1, 1), M2[20,20] ) * Tile( (1, 1), v0[20,1] ) ) )
Eq.ann: {}
Entry 18:
Eq: Tile( (1, 1), P[20,20] ) = ( Tile( (1, 1), Y[20,20] ) - ( Tile( (1, 1), M2[20,20] ) * Tile( (1, 1), M1[20,20] ) ) )
Eq.ann: {}
, 0.708492931289 f/c -- folder: /tmp/lgen/kf-4-20-8.abq.2017-08-17.342574144



  Compiling took 0:00:53.942991 ----------------------------------------------------------

