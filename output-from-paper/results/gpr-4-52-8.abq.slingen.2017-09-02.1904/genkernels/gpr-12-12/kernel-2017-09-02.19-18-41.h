/*
 * gpr_kernel.h
 *
Decl { {u'K': Symmetric[K, (12, 12), LSMatAccess], u'L': LowerTriangular[L, (12, 12), GenMatAccess], 'T1442': Matrix[T1442, (1, 12), GenMatAccess], u'var': Scalar[var, (1, 1), GenMatAccess], u'L0': LowerTriangular[L0, (12, 12), GenMatAccess], u'X': SquaredMatrix[X, (12, 12), GenMatAccess], u'a': Matrix[a, (12, 1), GenMatAccess], u'f': Scalar[f, (1, 1), GenMatAccess], u't2': Matrix[t2, (12, 1), GenMatAccess], u't0': Matrix[t0, (12, 1), GenMatAccess], u't1': Matrix[t1, (12, 1), GenMatAccess], u'lp': Scalar[lp, (1, 1), GenMatAccess], u'v': Matrix[v, (12, 1), GenMatAccess], u'y': Matrix[y, (12, 1), GenMatAccess], u'x': Matrix[x, (12, 1), GenMatAccess], u'kx': Matrix[kx, (12, 1), GenMatAccess]} }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ann: {'part_schemes': {'Assign_Mul_T_LowerTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'Assign_Mul_LowerTriangular_Matrix_Matrix_opt': {'m0': 'm04.ll', 'm2': 'm21.ll'}, 'rdiv_ltn_ow_opt': {'m': 'm1.ll', 'n': 'n4.ll'}, 'Assign_Mul_LowerTriangular_T_LowerTriangular_Symmetric_opt': {'m0': 'm03.ll'}}, 'cl1ck_v': 0, 'variant_tag': 'Assign_Mul_LowerTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_LowerTriangular_T_LowerTriangular_Symmetric_opt_m03_Assign_Mul_T_LowerTriangular_Matrix_Matrix_opt_m04_m21_rdiv_ltn_ow_opt_m1_n4'}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Entry 0:
For_{fi18;0;7;4} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 12, fi18), L[12,12],h(1, 12, fi18)) ) = Sqrt( Tile( (1, 1), G(h(1, 12, fi18), L[12,12],h(1, 12, fi18)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), G(h(1, 1, 0), T1442[1,12],h(1, 12, fi18)) ) = ( Tile( (1, 1), 1[1,1] ) Div Tile( (1, 1), G(h(1, 12, fi18), L[12,12],h(1, 12, fi18)) ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(3, 12, fi18 + 1), L[12,12],h(1, 12, fi18)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 1, 0), T1442[1,12],h(1, 12, fi18)) ) ) Kro Tile( (1, 1), Tile( (4, 4), G(h(3, 12, fi18 + 1), L[12,12],h(1, 12, fi18)) ) ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(3, 12, fi18 + 1), L[12,12],h(3, 12, fi18 + 1)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(3, 12, fi18 + 1), L[12,12],h(3, 12, fi18 + 1)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(3, 12, fi18 + 1), L[12,12],h(1, 12, fi18)) ) ) * T( Tile( (1, 1), Tile( (4, 4), G(h(3, 12, fi18 + 1), L[12,12],h(1, 12, fi18)) ) ) ) ) )
Eq.ann: {}
Entry 4:
Eq: Tile( (1, 1), G(h(1, 12, fi18 + 1), L[12,12],h(1, 12, fi18 + 1)) ) = Sqrt( Tile( (1, 1), G(h(1, 12, fi18 + 1), L[12,12],h(1, 12, fi18 + 1)) ) )
Eq.ann: {}
Entry 5:
Eq: Tile( (1, 1), G(h(1, 1, 0), T1442[1,12],h(1, 12, fi18 + 1)) ) = ( Tile( (1, 1), 1[1,1] ) Div Tile( (1, 1), G(h(1, 12, fi18 + 1), L[12,12],h(1, 12, fi18 + 1)) ) )
Eq.ann: {}
Entry 6:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(2, 12, fi18 + 2), L[12,12],h(1, 12, fi18 + 1)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 1, 0), T1442[1,12],h(1, 12, fi18 + 1)) ) ) Kro Tile( (1, 1), Tile( (4, 4), G(h(2, 12, fi18 + 2), L[12,12],h(1, 12, fi18 + 1)) ) ) )
Eq.ann: {}
Entry 7:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(2, 12, fi18 + 2), L[12,12],h(2, 12, fi18 + 2)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(2, 12, fi18 + 2), L[12,12],h(2, 12, fi18 + 2)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(2, 12, fi18 + 2), L[12,12],h(1, 12, fi18 + 1)) ) ) * T( Tile( (1, 1), Tile( (4, 4), G(h(2, 12, fi18 + 2), L[12,12],h(1, 12, fi18 + 1)) ) ) ) ) )
Eq.ann: {}
Entry 8:
Eq: Tile( (1, 1), G(h(1, 12, fi18 + 2), L[12,12],h(1, 12, fi18 + 2)) ) = Sqrt( Tile( (1, 1), G(h(1, 12, fi18 + 2), L[12,12],h(1, 12, fi18 + 2)) ) )
Eq.ann: {}
Entry 9:
Eq: Tile( (1, 1), G(h(1, 12, fi18 + 3), L[12,12],h(1, 12, fi18 + 2)) ) = ( Tile( (1, 1), G(h(1, 12, fi18 + 3), L[12,12],h(1, 12, fi18 + 2)) ) Div Tile( (1, 1), G(h(1, 12, fi18 + 2), L[12,12],h(1, 12, fi18 + 2)) ) )
Eq.ann: {}
Entry 10:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + 3), L[12,12],h(1, 12, fi18 + 3)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + 3), L[12,12],h(1, 12, fi18 + 3)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + 3), L[12,12],h(1, 12, fi18 + 2)) ) ) Kro T( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + 3), L[12,12],h(1, 12, fi18 + 2)) ) ) ) ) )
Eq.ann: {}
Entry 11:
Eq: Tile( (1, 1), G(h(1, 12, fi18 + 3), L[12,12],h(1, 12, fi18 + 3)) ) = Sqrt( Tile( (1, 1), G(h(1, 12, fi18 + 3), L[12,12],h(1, 12, fi18 + 3)) ) )
Eq.ann: {}
Entry 12:
For_{fi79;0;-fi18 + 4;4} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 4), L[12,12],h(1, 12, fi18)) ) = ( Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 4), L[12,12],h(1, 12, fi18)) ) Div Tile( (1, 1), G(h(1, 12, fi18), L[12,12],h(1, 12, fi18)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 4), L[12,12],h(3, 12, fi18 + 1)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 4), L[12,12],h(3, 12, fi18 + 1)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 4), L[12,12],h(1, 12, fi18)) ) ) Kro T( Tile( (1, 1), Tile( (4, 4), G(h(3, 12, fi18 + 1), L[12,12],h(1, 12, fi18)) ) ) ) ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 4), L[12,12],h(1, 12, fi18 + 1)) ) = ( Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 4), L[12,12],h(1, 12, fi18 + 1)) ) Div Tile( (1, 1), G(h(1, 12, fi18 + 1), L[12,12],h(1, 12, fi18 + 1)) ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 4), L[12,12],h(2, 12, fi18 + 2)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 4), L[12,12],h(2, 12, fi18 + 2)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 4), L[12,12],h(1, 12, fi18 + 1)) ) ) Kro T( Tile( (1, 1), Tile( (4, 4), G(h(2, 12, fi18 + 2), L[12,12],h(1, 12, fi18 + 1)) ) ) ) ) )
Eq.ann: {}
Entry 4:
Eq: Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 4), L[12,12],h(1, 12, fi18 + 2)) ) = ( Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 4), L[12,12],h(1, 12, fi18 + 2)) ) Div Tile( (1, 1), G(h(1, 12, fi18 + 2), L[12,12],h(1, 12, fi18 + 2)) ) )
Eq.ann: {}
Entry 5:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 4), L[12,12],h(1, 12, fi18 + 3)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 4), L[12,12],h(1, 12, fi18 + 3)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 4), L[12,12],h(1, 12, fi18 + 2)) ) ) Kro T( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + 3), L[12,12],h(1, 12, fi18 + 2)) ) ) ) ) )
Eq.ann: {}
Entry 6:
Eq: Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 4), L[12,12],h(1, 12, fi18 + 3)) ) = ( Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 4), L[12,12],h(1, 12, fi18 + 3)) ) Div Tile( (1, 1), G(h(1, 12, fi18 + 3), L[12,12],h(1, 12, fi18 + 3)) ) )
Eq.ann: {}
Entry 7:
Eq: Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 5), L[12,12],h(1, 12, fi18)) ) = ( Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 5), L[12,12],h(1, 12, fi18)) ) Div Tile( (1, 1), G(h(1, 12, fi18), L[12,12],h(1, 12, fi18)) ) )
Eq.ann: {}
Entry 8:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 5), L[12,12],h(3, 12, fi18 + 1)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 5), L[12,12],h(3, 12, fi18 + 1)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 5), L[12,12],h(1, 12, fi18)) ) ) Kro T( Tile( (1, 1), Tile( (4, 4), G(h(3, 12, fi18 + 1), L[12,12],h(1, 12, fi18)) ) ) ) ) )
Eq.ann: {}
Entry 9:
Eq: Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 5), L[12,12],h(1, 12, fi18 + 1)) ) = ( Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 5), L[12,12],h(1, 12, fi18 + 1)) ) Div Tile( (1, 1), G(h(1, 12, fi18 + 1), L[12,12],h(1, 12, fi18 + 1)) ) )
Eq.ann: {}
Entry 10:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 5), L[12,12],h(2, 12, fi18 + 2)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 5), L[12,12],h(2, 12, fi18 + 2)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 5), L[12,12],h(1, 12, fi18 + 1)) ) ) Kro T( Tile( (1, 1), Tile( (4, 4), G(h(2, 12, fi18 + 2), L[12,12],h(1, 12, fi18 + 1)) ) ) ) ) )
Eq.ann: {}
Entry 11:
Eq: Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 5), L[12,12],h(1, 12, fi18 + 2)) ) = ( Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 5), L[12,12],h(1, 12, fi18 + 2)) ) Div Tile( (1, 1), G(h(1, 12, fi18 + 2), L[12,12],h(1, 12, fi18 + 2)) ) )
Eq.ann: {}
Entry 12:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 5), L[12,12],h(1, 12, fi18 + 3)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 5), L[12,12],h(1, 12, fi18 + 3)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 5), L[12,12],h(1, 12, fi18 + 2)) ) ) Kro T( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + 3), L[12,12],h(1, 12, fi18 + 2)) ) ) ) ) )
Eq.ann: {}
Entry 13:
Eq: Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 5), L[12,12],h(1, 12, fi18 + 3)) ) = ( Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 5), L[12,12],h(1, 12, fi18 + 3)) ) Div Tile( (1, 1), G(h(1, 12, fi18 + 3), L[12,12],h(1, 12, fi18 + 3)) ) )
Eq.ann: {}
Entry 14:
Eq: Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 6), L[12,12],h(1, 12, fi18)) ) = ( Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 6), L[12,12],h(1, 12, fi18)) ) Div Tile( (1, 1), G(h(1, 12, fi18), L[12,12],h(1, 12, fi18)) ) )
Eq.ann: {}
Entry 15:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 6), L[12,12],h(3, 12, fi18 + 1)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 6), L[12,12],h(3, 12, fi18 + 1)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 6), L[12,12],h(1, 12, fi18)) ) ) Kro T( Tile( (1, 1), Tile( (4, 4), G(h(3, 12, fi18 + 1), L[12,12],h(1, 12, fi18)) ) ) ) ) )
Eq.ann: {}
Entry 16:
Eq: Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 6), L[12,12],h(1, 12, fi18 + 1)) ) = ( Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 6), L[12,12],h(1, 12, fi18 + 1)) ) Div Tile( (1, 1), G(h(1, 12, fi18 + 1), L[12,12],h(1, 12, fi18 + 1)) ) )
Eq.ann: {}
Entry 17:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 6), L[12,12],h(2, 12, fi18 + 2)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 6), L[12,12],h(2, 12, fi18 + 2)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 6), L[12,12],h(1, 12, fi18 + 1)) ) ) Kro T( Tile( (1, 1), Tile( (4, 4), G(h(2, 12, fi18 + 2), L[12,12],h(1, 12, fi18 + 1)) ) ) ) ) )
Eq.ann: {}
Entry 18:
Eq: Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 6), L[12,12],h(1, 12, fi18 + 2)) ) = ( Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 6), L[12,12],h(1, 12, fi18 + 2)) ) Div Tile( (1, 1), G(h(1, 12, fi18 + 2), L[12,12],h(1, 12, fi18 + 2)) ) )
Eq.ann: {}
Entry 19:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 6), L[12,12],h(1, 12, fi18 + 3)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 6), L[12,12],h(1, 12, fi18 + 3)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 6), L[12,12],h(1, 12, fi18 + 2)) ) ) Kro T( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + 3), L[12,12],h(1, 12, fi18 + 2)) ) ) ) ) )
Eq.ann: {}
Entry 20:
Eq: Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 6), L[12,12],h(1, 12, fi18 + 3)) ) = ( Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 6), L[12,12],h(1, 12, fi18 + 3)) ) Div Tile( (1, 1), G(h(1, 12, fi18 + 3), L[12,12],h(1, 12, fi18 + 3)) ) )
Eq.ann: {}
Entry 21:
Eq: Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 7), L[12,12],h(1, 12, fi18)) ) = ( Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 7), L[12,12],h(1, 12, fi18)) ) Div Tile( (1, 1), G(h(1, 12, fi18), L[12,12],h(1, 12, fi18)) ) )
Eq.ann: {}
Entry 22:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 7), L[12,12],h(3, 12, fi18 + 1)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 7), L[12,12],h(3, 12, fi18 + 1)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 7), L[12,12],h(1, 12, fi18)) ) ) Kro T( Tile( (1, 1), Tile( (4, 4), G(h(3, 12, fi18 + 1), L[12,12],h(1, 12, fi18)) ) ) ) ) )
Eq.ann: {}
Entry 23:
Eq: Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 7), L[12,12],h(1, 12, fi18 + 1)) ) = ( Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 7), L[12,12],h(1, 12, fi18 + 1)) ) Div Tile( (1, 1), G(h(1, 12, fi18 + 1), L[12,12],h(1, 12, fi18 + 1)) ) )
Eq.ann: {}
Entry 24:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 7), L[12,12],h(2, 12, fi18 + 2)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 7), L[12,12],h(2, 12, fi18 + 2)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 7), L[12,12],h(1, 12, fi18 + 1)) ) ) Kro T( Tile( (1, 1), Tile( (4, 4), G(h(2, 12, fi18 + 2), L[12,12],h(1, 12, fi18 + 1)) ) ) ) ) )
Eq.ann: {}
Entry 25:
Eq: Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 7), L[12,12],h(1, 12, fi18 + 2)) ) = ( Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 7), L[12,12],h(1, 12, fi18 + 2)) ) Div Tile( (1, 1), G(h(1, 12, fi18 + 2), L[12,12],h(1, 12, fi18 + 2)) ) )
Eq.ann: {}
Entry 26:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 7), L[12,12],h(1, 12, fi18 + 3)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 7), L[12,12],h(1, 12, fi18 + 3)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + fi79 + 7), L[12,12],h(1, 12, fi18 + 2)) ) ) Kro T( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi18 + 3), L[12,12],h(1, 12, fi18 + 2)) ) ) ) ) )
Eq.ann: {}
Entry 27:
Eq: Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 7), L[12,12],h(1, 12, fi18 + 3)) ) = ( Tile( (1, 1), G(h(1, 12, fi18 + fi79 + 7), L[12,12],h(1, 12, fi18 + 3)) ) Div Tile( (1, 1), G(h(1, 12, fi18 + 3), L[12,12],h(1, 12, fi18 + 3)) ) )
Eq.ann: {}
 )Entry 13:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(-fi18 + 8, 12, fi18 + 4), L[12,12],h(-fi18 + 8, 12, fi18 + 4)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(-fi18 + 8, 12, fi18 + 4), L[12,12],h(-fi18 + 8, 12, fi18 + 4)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(-fi18 + 8, 12, fi18 + 4), L[12,12],h(4, 12, fi18)) ) ) * T( Tile( (1, 1), Tile( (4, 4), G(h(-fi18 + 8, 12, fi18 + 4), L[12,12],h(4, 12, fi18)) ) ) ) ) )
Eq.ann: {}
 )Entry 1:
Eq: Tile( (1, 1), G(h(1, 12, 8), L[12,12],h(1, 12, 8)) ) = Sqrt( Tile( (1, 1), G(h(1, 12, 8), L[12,12],h(1, 12, 8)) ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), G(h(1, 1, 0), T1442[1,12],h(1, 12, 8)) ) = ( Tile( (1, 1), 1[1,1] ) Div Tile( (1, 1), G(h(1, 12, 8), L[12,12],h(1, 12, 8)) ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(3, 12, 9), L[12,12],h(1, 12, 8)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 1, 0), T1442[1,12],h(1, 12, 8)) ) ) Kro Tile( (1, 1), Tile( (4, 4), G(h(3, 12, 9), L[12,12],h(1, 12, 8)) ) ) )
Eq.ann: {}
Entry 4:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(3, 12, 9), L[12,12],h(3, 12, 9)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(3, 12, 9), L[12,12],h(3, 12, 9)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(3, 12, 9), L[12,12],h(1, 12, 8)) ) ) * T( Tile( (1, 1), Tile( (4, 4), G(h(3, 12, 9), L[12,12],h(1, 12, 8)) ) ) ) ) )
Eq.ann: {}
Entry 5:
Eq: Tile( (1, 1), G(h(1, 12, 9), L[12,12],h(1, 12, 9)) ) = Sqrt( Tile( (1, 1), G(h(1, 12, 9), L[12,12],h(1, 12, 9)) ) )
Eq.ann: {}
Entry 6:
Eq: Tile( (1, 1), G(h(1, 1, 0), T1442[1,12],h(1, 12, 9)) ) = ( Tile( (1, 1), 1[1,1] ) Div Tile( (1, 1), G(h(1, 12, 9), L[12,12],h(1, 12, 9)) ) )
Eq.ann: {}
Entry 7:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(2, 12, 10), L[12,12],h(1, 12, 9)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 1, 0), T1442[1,12],h(1, 12, 9)) ) ) Kro Tile( (1, 1), Tile( (4, 4), G(h(2, 12, 10), L[12,12],h(1, 12, 9)) ) ) )
Eq.ann: {}
Entry 8:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(2, 12, 10), L[12,12],h(2, 12, 10)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(2, 12, 10), L[12,12],h(2, 12, 10)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(2, 12, 10), L[12,12],h(1, 12, 9)) ) ) * T( Tile( (1, 1), Tile( (4, 4), G(h(2, 12, 10), L[12,12],h(1, 12, 9)) ) ) ) ) )
Eq.ann: {}
Entry 9:
Eq: Tile( (1, 1), G(h(1, 12, 10), L[12,12],h(1, 12, 10)) ) = Sqrt( Tile( (1, 1), G(h(1, 12, 10), L[12,12],h(1, 12, 10)) ) )
Eq.ann: {}
Entry 10:
Eq: Tile( (1, 1), G(h(1, 12, 11), L[12,12],h(1, 12, 10)) ) = ( Tile( (1, 1), G(h(1, 12, 11), L[12,12],h(1, 12, 10)) ) Div Tile( (1, 1), G(h(1, 12, 10), L[12,12],h(1, 12, 10)) ) )
Eq.ann: {}
Entry 11:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 11), L[12,12],h(1, 12, 11)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 11), L[12,12],h(1, 12, 11)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 11), L[12,12],h(1, 12, 10)) ) ) Kro T( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 11), L[12,12],h(1, 12, 10)) ) ) ) ) )
Eq.ann: {}
Entry 12:
Eq: Tile( (1, 1), G(h(1, 12, 11), L[12,12],h(1, 12, 11)) ) = Sqrt( Tile( (1, 1), G(h(1, 12, 11), L[12,12],h(1, 12, 11)) ) )
Eq.ann: {}
Entry 13:
For_{fi159;0;7;4} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 12, fi159), t0[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, fi159), t0[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, fi159), L0[12,12],h(1, 12, fi159)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(3, 12, fi159 + 1), t0[12,1],h(1, 1, 0)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(3, 12, fi159 + 1), t0[12,1],h(1, 1, 0)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(3, 12, fi159 + 1), L0[12,12],h(1, 12, fi159)) ) ) Kro Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi159), t0[12,1],h(1, 1, 0)) ) ) ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), G(h(1, 12, fi159 + 1), t0[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, fi159 + 1), t0[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, fi159 + 1), L0[12,12],h(1, 12, fi159 + 1)) ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(2, 12, fi159 + 2), t0[12,1],h(1, 1, 0)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(2, 12, fi159 + 2), t0[12,1],h(1, 1, 0)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(2, 12, fi159 + 2), L0[12,12],h(1, 12, fi159 + 1)) ) ) Kro Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi159 + 1), t0[12,1],h(1, 1, 0)) ) ) ) )
Eq.ann: {}
Entry 4:
Eq: Tile( (1, 1), G(h(1, 12, fi159 + 2), t0[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, fi159 + 2), t0[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, fi159 + 2), L0[12,12],h(1, 12, fi159 + 2)) ) )
Eq.ann: {}
Entry 5:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi159 + 3), t0[12,1],h(1, 1, 0)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi159 + 3), t0[12,1],h(1, 1, 0)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi159 + 3), L0[12,12],h(1, 12, fi159 + 2)) ) ) Kro Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi159 + 2), t0[12,1],h(1, 1, 0)) ) ) ) )
Eq.ann: {}
Entry 6:
Eq: Tile( (1, 1), G(h(1, 12, fi159 + 3), t0[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, fi159 + 3), t0[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, fi159 + 3), L0[12,12],h(1, 12, fi159 + 3)) ) )
Eq.ann: {}
Entry 7:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(-fi159 + 8, 12, fi159 + 4), t0[12,1],h(1, 1, 0)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(-fi159 + 8, 12, fi159 + 4), t0[12,1],h(1, 1, 0)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(-fi159 + 8, 12, fi159 + 4), L0[12,12],h(4, 12, fi159)) ) ) * Tile( (1, 1), Tile( (4, 4), G(h(4, 12, fi159), t0[12,1],h(1, 1, 0)) ) ) ) )
Eq.ann: {}
 )Entry 14:
Eq: Tile( (1, 1), G(h(1, 12, 8), t0[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, 8), t0[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, 8), L0[12,12],h(1, 12, 8)) ) )
Eq.ann: {}
Entry 15:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(3, 12, 9), t0[12,1],h(1, 1, 0)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(3, 12, 9), t0[12,1],h(1, 1, 0)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(3, 12, 9), L0[12,12],h(1, 12, 8)) ) ) Kro Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 8), t0[12,1],h(1, 1, 0)) ) ) ) )
Eq.ann: {}
Entry 16:
Eq: Tile( (1, 1), G(h(1, 12, 9), t0[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, 9), t0[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, 9), L0[12,12],h(1, 12, 9)) ) )
Eq.ann: {}
Entry 17:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(2, 12, 10), t0[12,1],h(1, 1, 0)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(2, 12, 10), t0[12,1],h(1, 1, 0)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(2, 12, 10), L0[12,12],h(1, 12, 9)) ) ) Kro Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 9), t0[12,1],h(1, 1, 0)) ) ) ) )
Eq.ann: {}
Entry 18:
Eq: Tile( (1, 1), G(h(1, 12, 10), t0[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, 10), t0[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, 10), L0[12,12],h(1, 12, 10)) ) )
Eq.ann: {}
Entry 19:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 11), t0[12,1],h(1, 1, 0)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 11), t0[12,1],h(1, 1, 0)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 11), L0[12,12],h(1, 12, 10)) ) ) Kro Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 10), t0[12,1],h(1, 1, 0)) ) ) ) )
Eq.ann: {}
Entry 20:
Eq: Tile( (1, 1), G(h(1, 12, 11), t0[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, 11), t0[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, 11), L0[12,12],h(1, 12, 11)) ) )
Eq.ann: {}
Entry 21:
For_{fi236;0;7;4} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 12, -fi236 + 11), a[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, -fi236 + 11), a[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, -fi236 + 11), L0[12,12],h(1, 12, -fi236 + 11)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(3, 12, -fi236 + 8), a[12,1],h(1, 1, 0)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(3, 12, -fi236 + 8), a[12,1],h(1, 1, 0)) ) ) - ( T( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, -fi236 + 11), L0[12,12],h(3, 12, -fi236 + 8)) ) ) ) Kro Tile( (1, 1), Tile( (4, 4), G(h(1, 12, -fi236 + 11), a[12,1],h(1, 1, 0)) ) ) ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), G(h(1, 12, -fi236 + 10), a[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, -fi236 + 10), a[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, -fi236 + 10), L0[12,12],h(1, 12, -fi236 + 10)) ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(2, 12, -fi236 + 8), a[12,1],h(1, 1, 0)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(2, 12, -fi236 + 8), a[12,1],h(1, 1, 0)) ) ) - ( T( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, -fi236 + 10), L0[12,12],h(2, 12, -fi236 + 8)) ) ) ) Kro Tile( (1, 1), Tile( (4, 4), G(h(1, 12, -fi236 + 10), a[12,1],h(1, 1, 0)) ) ) ) )
Eq.ann: {}
Entry 4:
Eq: Tile( (1, 1), G(h(1, 12, -fi236 + 9), a[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, -fi236 + 9), a[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, -fi236 + 9), L0[12,12],h(1, 12, -fi236 + 9)) ) )
Eq.ann: {}
Entry 5:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(1, 12, -fi236 + 8), a[12,1],h(1, 1, 0)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, -fi236 + 8), a[12,1],h(1, 1, 0)) ) ) - ( T( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, -fi236 + 9), L0[12,12],h(1, 12, -fi236 + 8)) ) ) ) Kro Tile( (1, 1), Tile( (4, 4), G(h(1, 12, -fi236 + 9), a[12,1],h(1, 1, 0)) ) ) ) )
Eq.ann: {}
Entry 6:
Eq: Tile( (1, 1), G(h(1, 12, -fi236 + 8), a[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, -fi236 + 8), a[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, -fi236 + 8), L0[12,12],h(1, 12, -fi236 + 8)) ) )
Eq.ann: {}
Entry 7:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(-fi236 + 8, 12, 0), a[12,1],h(1, 1, 0)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(-fi236 + 8, 12, 0), a[12,1],h(1, 1, 0)) ) ) - ( T( Tile( (1, 1), Tile( (4, 4), G(h(4, 12, -fi236 + 8), L0[12,12],h(-fi236 + 8, 12, 0)) ) ) ) * Tile( (1, 1), Tile( (4, 4), G(h(4, 12, -fi236 + 8), a[12,1],h(1, 1, 0)) ) ) ) )
Eq.ann: {}
 )Entry 22:
Eq: Tile( (1, 1), G(h(1, 12, 3), a[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, 3), a[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, 3), L0[12,12],h(1, 12, 3)) ) )
Eq.ann: {}
Entry 23:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(3, 12, 0), a[12,1],h(1, 1, 0)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(3, 12, 0), a[12,1],h(1, 1, 0)) ) ) - ( T( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 3), L0[12,12],h(3, 12, 0)) ) ) ) Kro Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 3), a[12,1],h(1, 1, 0)) ) ) ) )
Eq.ann: {}
Entry 24:
Eq: Tile( (1, 1), G(h(1, 12, 2), a[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, 2), a[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, 2), L0[12,12],h(1, 12, 2)) ) )
Eq.ann: {}
Entry 25:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(2, 12, 0), a[12,1],h(1, 1, 0)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(2, 12, 0), a[12,1],h(1, 1, 0)) ) ) - ( T( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 2), L0[12,12],h(2, 12, 0)) ) ) ) Kro Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 2), a[12,1],h(1, 1, 0)) ) ) ) )
Eq.ann: {}
Entry 26:
Eq: Tile( (1, 1), G(h(1, 12, 1), a[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, 1), a[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, 1), L0[12,12],h(1, 12, 1)) ) )
Eq.ann: {}
Entry 27:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 0), a[12,1],h(1, 1, 0)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 0), a[12,1],h(1, 1, 0)) ) ) - ( T( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 1), L0[12,12],h(1, 12, 0)) ) ) ) Kro Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 1), a[12,1],h(1, 1, 0)) ) ) ) )
Eq.ann: {}
Entry 28:
Eq: Tile( (1, 1), G(h(1, 12, 0), a[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, 0), a[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, 0), L0[12,12],h(1, 12, 0)) ) )
Eq.ann: {}
Entry 29:
Eq: Tile( (1, 1), Tile( (4, 4), kx[12,1] ) ) = ( Tile( (1, 1), Tile( (4, 4), X[12,12] ) ) * Tile( (1, 1), Tile( (4, 4), x[12,1] ) ) )
Eq.ann: {}
Entry 30:
Eq: Tile( (1, 1), Tile( (4, 4), f[1,1] ) ) = ( T( Tile( (1, 1), Tile( (4, 4), kx[12,1] ) ) ) * Tile( (1, 1), Tile( (4, 4), y[12,1] ) ) )
Eq.ann: {}
Entry 31:
For_{fi313;0;7;4} ( Entry 0:
Eq: Tile( (1, 1), G(h(1, 12, fi313), v[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, fi313), v[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, fi313), L0[12,12],h(1, 12, fi313)) ) )
Eq.ann: {}
Entry 1:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(3, 12, fi313 + 1), v[12,1],h(1, 1, 0)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(3, 12, fi313 + 1), v[12,1],h(1, 1, 0)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(3, 12, fi313 + 1), L0[12,12],h(1, 12, fi313)) ) ) Kro Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi313), v[12,1],h(1, 1, 0)) ) ) ) )
Eq.ann: {}
Entry 2:
Eq: Tile( (1, 1), G(h(1, 12, fi313 + 1), v[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, fi313 + 1), v[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, fi313 + 1), L0[12,12],h(1, 12, fi313 + 1)) ) )
Eq.ann: {}
Entry 3:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(2, 12, fi313 + 2), v[12,1],h(1, 1, 0)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(2, 12, fi313 + 2), v[12,1],h(1, 1, 0)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(2, 12, fi313 + 2), L0[12,12],h(1, 12, fi313 + 1)) ) ) Kro Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi313 + 1), v[12,1],h(1, 1, 0)) ) ) ) )
Eq.ann: {}
Entry 4:
Eq: Tile( (1, 1), G(h(1, 12, fi313 + 2), v[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, fi313 + 2), v[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, fi313 + 2), L0[12,12],h(1, 12, fi313 + 2)) ) )
Eq.ann: {}
Entry 5:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi313 + 3), v[12,1],h(1, 1, 0)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi313 + 3), v[12,1],h(1, 1, 0)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi313 + 3), L0[12,12],h(1, 12, fi313 + 2)) ) ) Kro Tile( (1, 1), Tile( (4, 4), G(h(1, 12, fi313 + 2), v[12,1],h(1, 1, 0)) ) ) ) )
Eq.ann: {}
Entry 6:
Eq: Tile( (1, 1), G(h(1, 12, fi313 + 3), v[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, fi313 + 3), v[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, fi313 + 3), L0[12,12],h(1, 12, fi313 + 3)) ) )
Eq.ann: {}
Entry 7:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(-fi313 + 8, 12, fi313 + 4), v[12,1],h(1, 1, 0)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(-fi313 + 8, 12, fi313 + 4), v[12,1],h(1, 1, 0)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(-fi313 + 8, 12, fi313 + 4), L0[12,12],h(4, 12, fi313)) ) ) * Tile( (1, 1), Tile( (4, 4), G(h(4, 12, fi313), v[12,1],h(1, 1, 0)) ) ) ) )
Eq.ann: {}
 )Entry 32:
Eq: Tile( (1, 1), G(h(1, 12, 8), v[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, 8), v[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, 8), L0[12,12],h(1, 12, 8)) ) )
Eq.ann: {}
Entry 33:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(3, 12, 9), v[12,1],h(1, 1, 0)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(3, 12, 9), v[12,1],h(1, 1, 0)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(3, 12, 9), L0[12,12],h(1, 12, 8)) ) ) Kro Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 8), v[12,1],h(1, 1, 0)) ) ) ) )
Eq.ann: {}
Entry 34:
Eq: Tile( (1, 1), G(h(1, 12, 9), v[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, 9), v[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, 9), L0[12,12],h(1, 12, 9)) ) )
Eq.ann: {}
Entry 35:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(2, 12, 10), v[12,1],h(1, 1, 0)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(2, 12, 10), v[12,1],h(1, 1, 0)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(2, 12, 10), L0[12,12],h(1, 12, 9)) ) ) Kro Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 9), v[12,1],h(1, 1, 0)) ) ) ) )
Eq.ann: {}
Entry 36:
Eq: Tile( (1, 1), G(h(1, 12, 10), v[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, 10), v[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, 10), L0[12,12],h(1, 12, 10)) ) )
Eq.ann: {}
Entry 37:
Eq: Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 11), v[12,1],h(1, 1, 0)) ) ) = ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 11), v[12,1],h(1, 1, 0)) ) ) - ( Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 11), L0[12,12],h(1, 12, 10)) ) ) Kro Tile( (1, 1), Tile( (4, 4), G(h(1, 12, 10), v[12,1],h(1, 1, 0)) ) ) ) )
Eq.ann: {}
Entry 38:
Eq: Tile( (1, 1), G(h(1, 12, 11), v[12,1],h(1, 1, 0)) ) = ( Tile( (1, 1), G(h(1, 12, 11), v[12,1],h(1, 1, 0)) ) Div Tile( (1, 1), G(h(1, 12, 11), L0[12,12],h(1, 12, 11)) ) )
Eq.ann: {}
Entry 39:
Eq: Tile( (1, 1), Tile( (4, 4), var[1,1] ) ) = ( ( T( Tile( (1, 1), Tile( (4, 4), x[12,1] ) ) ) * Tile( (1, 1), Tile( (4, 4), x[12,1] ) ) ) - ( T( Tile( (1, 1), Tile( (4, 4), kx[12,1] ) ) ) * Tile( (1, 1), Tile( (4, 4), kx[12,1] ) ) ) )
Eq.ann: {}
Entry 40:
Eq: Tile( (1, 1), Tile( (4, 4), lp[1,1] ) ) = ( T( Tile( (1, 1), Tile( (4, 4), y[12,1] ) ) ) * Tile( (1, 1), Tile( (4, 4), y[12,1] ) ) )
Eq.ann: {}
 *
 * Created on: 2017-09-02
 * Author: danieles
 */

#pragma once

#include <x86intrin.h>


static __inline__ __m256d _asm256_loadu_pd(const double* p) {
  __m256d v;
  __asm__("vmovupd %1, %0" : "=x" (v) : "m" (*p));
  return v;
}

static __inline__ void _asm256_storeu_pd(double* p, const __m256d& v) {
  __asm__("vmovupd %1, %0" : "=rm" (*p) : "x" (v));
}

#define PARAM0 12
#define PARAM1 12

#define ERRTHRESH 1e-5

#define SOFTERRTHRESH 1e-7

#define NUMREP 30

#define floord(n,d) (((n)<0) ? -((-(n)+(d)-1)/(d)) : (n)/(d))
#define ceild(n,d)  (((n)<0) ? -((-(n))/(d)) : ((n)+(d)-1)/(d))
#define max(x,y)    ((x) > (y) ? (x) : (y))
#define min(x,y)    ((x) < (y) ? (x) : (y))
#define Max(x,y)    ((x) > (y) ? (x) : (y))
#define Min(x,y)    ((x) < (y) ? (x) : (y))


static __attribute__((noinline)) void kernel(double const * X, double const * x, double * K, double * y, double * kx, double * f, double * var, double * lp)
{
  __m256d _t0_0, _t0_1, _t0_2, _t0_3, _t0_4, _t0_5, _t0_6, _t0_7,
	_t0_8, _t0_9, _t0_10, _t0_11, _t0_12, _t0_13, _t0_14, _t0_15,
	_t0_16, _t0_17, _t0_18, _t0_19, _t0_20, _t0_21, _t0_22, _t0_23,
	_t0_24, _t0_25, _t0_26, _t0_27, _t0_28, _t0_29, _t0_30, _t0_31,
	_t0_32, _t0_33, _t0_34, _t0_35, _t0_36, _t0_37, _t0_38, _t0_39,
	_t0_40, _t0_41, _t0_42, _t0_43, _t0_44, _t0_45, _t0_46, _t0_47,
	_t0_48, _t0_49, _t0_50, _t0_51, _t0_52, _t0_53, _t0_54, _t0_55,
	_t0_56, _t0_57, _t0_58, _t0_59, _t0_60, _t0_61, _t0_62, _t0_63,
	_t0_64, _t0_65, _t0_66, _t0_67, _t0_68, _t0_69, _t0_70, _t0_71,
	_t0_72, _t0_73, _t0_74, _t0_75, _t0_76, _t0_77, _t0_78, _t0_79,
	_t0_80, _t0_81, _t0_82, _t0_83, _t0_84, _t0_85, _t0_86, _t0_87,
	_t0_88, _t0_89, _t0_90, _t0_91, _t0_92, _t0_93, _t0_94, _t0_95,
	_t0_96, _t0_97, _t0_98, _t0_99, _t0_100, _t0_101, _t0_102, _t0_103,
	_t0_104, _t0_105, _t0_106, _t0_107, _t0_108, _t0_109, _t0_110, _t0_111,
	_t0_112, _t0_113, _t0_114, _t0_115, _t0_116, _t0_117, _t0_118, _t0_119,
	_t0_120, _t0_121, _t0_122, _t0_123, _t0_124, _t0_125, _t0_126, _t0_127,
	_t0_128, _t0_129, _t0_130, _t0_131, _t0_132, _t0_133, _t0_134, _t0_135,
	_t0_136, _t0_137, _t0_138, _t0_139, _t0_140, _t0_141, _t0_142, _t0_143,
	_t0_144, _t0_145, _t0_146, _t0_147, _t0_148, _t0_149, _t0_150, _t0_151,
	_t0_152, _t0_153, _t0_154, _t0_155, _t0_156, _t0_157, _t0_158, _t0_159,
	_t0_160, _t0_161, _t0_162, _t0_163, _t0_164, _t0_165, _t0_166, _t0_167,
	_t0_168, _t0_169, _t0_170, _t0_171, _t0_172, _t0_173, _t0_174, _t0_175,
	_t0_176, _t0_177, _t0_178, _t0_179, _t0_180, _t0_181, _t0_182, _t0_183,
	_t0_184, _t0_185, _t0_186, _t0_187, _t0_188, _t0_189, _t0_190, _t0_191,
	_t0_192, _t0_193, _t0_194, _t0_195, _t0_196, _t0_197, _t0_198, _t0_199,
	_t0_200, _t0_201, _t0_202, _t0_203, _t0_204, _t0_205, _t0_206, _t0_207,
	_t0_208, _t0_209, _t0_210, _t0_211, _t0_212, _t0_213, _t0_214, _t0_215,
	_t0_216, _t0_217, _t0_218, _t0_219, _t0_220, _t0_221, _t0_222, _t0_223,
	_t0_224, _t0_225, _t0_226, _t0_227, _t0_228, _t0_229, _t0_230, _t0_231,
	_t0_232, _t0_233, _t0_234, _t0_235, _t0_236, _t0_237, _t0_238, _t0_239,
	_t0_240, _t0_241, _t0_242, _t0_243, _t0_244, _t0_245, _t0_246, _t0_247,
	_t0_248, _t0_249, _t0_250, _t0_251, _t0_252, _t0_253, _t0_254, _t0_255,
	_t0_256, _t0_257, _t0_258, _t0_259, _t0_260, _t0_261, _t0_262, _t0_263,
	_t0_264, _t0_265, _t0_266, _t0_267, _t0_268, _t0_269, _t0_270, _t0_271,
	_t0_272, _t0_273, _t0_274, _t0_275, _t0_276, _t0_277, _t0_278, _t0_279,
	_t0_280, _t0_281, _t0_282, _t0_283, _t0_284, _t0_285, _t0_286, _t0_287,
	_t0_288, _t0_289, _t0_290, _t0_291, _t0_292, _t0_293, _t0_294, _t0_295,
	_t0_296, _t0_297, _t0_298, _t0_299, _t0_300, _t0_301, _t0_302, _t0_303,
	_t0_304, _t0_305, _t0_306, _t0_307, _t0_308, _t0_309, _t0_310, _t0_311,
	_t0_312, _t0_313, _t0_314, _t0_315, _t0_316, _t0_317, _t0_318, _t0_319,
	_t0_320, _t0_321, _t0_322, _t0_323, _t0_324, _t0_325, _t0_326, _t0_327,
	_t0_328, _t0_329, _t0_330, _t0_331, _t0_332, _t0_333, _t0_334, _t0_335,
	_t0_336, _t0_337, _t0_338, _t0_339, _t0_340, _t0_341, _t0_342, _t0_343,
	_t0_344, _t0_345, _t0_346, _t0_347, _t0_348, _t0_349, _t0_350, _t0_351,
	_t0_352, _t0_353, _t0_354, _t0_355, _t0_356, _t0_357, _t0_358, _t0_359,
	_t0_360, _t0_361, _t0_362, _t0_363, _t0_364, _t0_365, _t0_366, _t0_367,
	_t0_368, _t0_369, _t0_370, _t0_371, _t0_372, _t0_373, _t0_374, _t0_375,
	_t0_376, _t0_377, _t0_378, _t0_379, _t0_380, _t0_381, _t0_382, _t0_383,
	_t0_384, _t0_385, _t0_386, _t0_387, _t0_388, _t0_389, _t0_390, _t0_391,
	_t0_392, _t0_393, _t0_394, _t0_395, _t0_396, _t0_397, _t0_398, _t0_399,
	_t0_400, _t0_401, _t0_402, _t0_403, _t0_404, _t0_405, _t0_406, _t0_407,
	_t0_408, _t0_409, _t0_410, _t0_411, _t0_412, _t0_413, _t0_414, _t0_415,
	_t0_416, _t0_417, _t0_418, _t0_419, _t0_420, _t0_421, _t0_422, _t0_423,
	_t0_424, _t0_425, _t0_426, _t0_427, _t0_428, _t0_429, _t0_430, _t0_431,
	_t0_432, _t0_433, _t0_434, _t0_435, _t0_436, _t0_437, _t0_438, _t0_439,
	_t0_440, _t0_441, _t0_442, _t0_443, _t0_444, _t0_445, _t0_446, _t0_447,
	_t0_448, _t0_449, _t0_450, _t0_451, _t0_452, _t0_453, _t0_454, _t0_455,
	_t0_456, _t0_457, _t0_458, _t0_459, _t0_460, _t0_461, _t0_462, _t0_463,
	_t0_464, _t0_465, _t0_466, _t0_467, _t0_468, _t0_469, _t0_470, _t0_471,
	_t0_472, _t0_473, _t0_474, _t0_475, _t0_476, _t0_477, _t0_478, _t0_479,
	_t0_480, _t0_481, _t0_482, _t0_483, _t0_484, _t0_485, _t0_486, _t0_487,
	_t0_488, _t0_489, _t0_490, _t0_491, _t0_492, _t0_493, _t0_494, _t0_495,
	_t0_496, _t0_497, _t0_498, _t0_499, _t0_500, _t0_501, _t0_502, _t0_503,
	_t0_504, _t0_505, _t0_506, _t0_507, _t0_508, _t0_509, _t0_510, _t0_511,
	_t0_512, _t0_513, _t0_514, _t0_515, _t0_516, _t0_517, _t0_518, _t0_519,
	_t0_520, _t0_521, _t0_522, _t0_523, _t0_524, _t0_525, _t0_526, _t0_527,
	_t0_528, _t0_529, _t0_530, _t0_531, _t0_532, _t0_533, _t0_534, _t0_535,
	_t0_536, _t0_537, _t0_538, _t0_539, _t0_540, _t0_541, _t0_542, _t0_543,
	_t0_544, _t0_545, _t0_546, _t0_547, _t0_548, _t0_549, _t0_550, _t0_551,
	_t0_552, _t0_553, _t0_554, _t0_555, _t0_556, _t0_557, _t0_558, _t0_559,
	_t0_560, _t0_561, _t0_562, _t0_563, _t0_564, _t0_565, _t0_566, _t0_567,
	_t0_568, _t0_569, _t0_570, _t0_571, _t0_572, _t0_573, _t0_574, _t0_575,
	_t0_576, _t0_577, _t0_578, _t0_579, _t0_580, _t0_581, _t0_582, _t0_583,
	_t0_584, _t0_585, _t0_586, _t0_587, _t0_588, _t0_589, _t0_590, _t0_591,
	_t0_592, _t0_593, _t0_594, _t0_595, _t0_596, _t0_597, _t0_598, _t0_599,
	_t0_600, _t0_601, _t0_602, _t0_603, _t0_604, _t0_605, _t0_606, _t0_607,
	_t0_608, _t0_609, _t0_610, _t0_611, _t0_612, _t0_613, _t0_614, _t0_615,
	_t0_616, _t0_617, _t0_618, _t0_619, _t0_620, _t0_621, _t0_622, _t0_623,
	_t0_624, _t0_625, _t0_626, _t0_627, _t0_628, _t0_629, _t0_630, _t0_631,
	_t0_632, _t0_633, _t0_634, _t0_635, _t0_636, _t0_637, _t0_638, _t0_639,
	_t0_640, _t0_641, _t0_642, _t0_643, _t0_644, _t0_645, _t0_646, _t0_647,
	_t0_648, _t0_649, _t0_650, _t0_651, _t0_652, _t0_653, _t0_654, _t0_655,
	_t0_656, _t0_657, _t0_658, _t0_659, _t0_660, _t0_661, _t0_662, _t0_663,
	_t0_664, _t0_665, _t0_666, _t0_667, _t0_668, _t0_669, _t0_670, _t0_671,
	_t0_672, _t0_673, _t0_674, _t0_675, _t0_676, _t0_677, _t0_678, _t0_679,
	_t0_680, _t0_681, _t0_682, _t0_683, _t0_684, _t0_685, _t0_686;
  __m256d _t1_0, _t1_1, _t1_2, _t1_3, _t1_4, _t1_5, _t1_6, _t1_7,
	_t1_8, _t1_9, _t1_10, _t1_11, _t1_12, _t1_13, _t1_14, _t1_15,
	_t1_16, _t1_17, _t1_18, _t1_19, _t1_20, _t1_21, _t1_22, _t1_23,
	_t1_24, _t1_25, _t1_26, _t1_27, _t1_28, _t1_29, _t1_30, _t1_31,
	_t1_32, _t1_33, _t1_34, _t1_35, _t1_36, _t1_37, _t1_38, _t1_39;
  __m256d _t2_0, _t2_1, _t2_2, _t2_3, _t2_4, _t2_5, _t2_6, _t2_7,
	_t2_8, _t2_9;
  __m256d _t3_0, _t3_1, _t3_2, _t3_3, _t3_4, _t3_5, _t3_6, _t3_7,
	_t3_8, _t3_9, _t3_10, _t3_11, _t3_12, _t3_13, _t3_14, _t3_15,
	_t3_16, _t3_17, _t3_18, _t3_19, _t3_20, _t3_21, _t3_22, _t3_23,
	_t3_24, _t3_25, _t3_26, _t3_27, _t3_28, _t3_29, _t3_30, _t3_31,
	_t3_32;
  __m256d _t4_0, _t4_1, _t4_2, _t4_3, _t4_4, _t4_5, _t4_6, _t4_7,
	_t4_8, _t4_9, _t4_10, _t4_11, _t4_12, _t4_13, _t4_14, _t4_15,
	_t4_16, _t4_17, _t4_18, _t4_19, _t4_20, _t4_21, _t4_22, _t4_23,
	_t4_24, _t4_25, _t4_26, _t4_27, _t4_28, _t4_29, _t4_30, _t4_31,
	_t4_32, _t4_33, _t4_34, _t4_35, _t4_36, _t4_37, _t4_38, _t4_39,
	_t4_40, _t4_41, _t4_42;
  __m256d _t5_0, _t5_1, _t5_2, _t5_3, _t5_4, _t5_5, _t5_6, _t5_7,
	_t5_8, _t5_9, _t5_10, _t5_11, _t5_12, _t5_13;
  __m256d _t6_0, _t6_1, _t6_2, _t6_3, _t6_4, _t6_5, _t6_6, _t6_7,
	_t6_8, _t6_9, _t6_10, _t6_11, _t6_12, _t6_13, _t6_14, _t6_15,
	_t6_16, _t6_17, _t6_18, _t6_19, _t6_20, _t6_21, _t6_22, _t6_23,
	_t6_24, _t6_25, _t6_26, _t6_27, _t6_28, _t6_29, _t6_30, _t6_31,
	_t6_32, _t6_33, _t6_34, _t6_35;
  __m256d _t7_0, _t7_1, _t7_2, _t7_3, _t7_4, _t7_5;
  __m256d _t8_0, _t8_1, _t8_2, _t8_3, _t8_4, _t8_5, _t8_6;
  __m256d _t9_0, _t9_1, _t9_2, _t9_3;
  __m256d _t10_0, _t10_1, _t10_2, _t10_3, _t10_4;
  __m256d _t11_0, _t11_1, _t11_2, _t11_3, _t11_4, _t11_5, _t11_6, _t11_7,
	_t11_8, _t11_9, _t11_10, _t11_11, _t11_12, _t11_13, _t11_14, _t11_15,
	_t11_16, _t11_17, _t11_18, _t11_19, _t11_20, _t11_21, _t11_22, _t11_23,
	_t11_24, _t11_25, _t11_26, _t11_27, _t11_28, _t11_29, _t11_30, _t11_31,
	_t11_32, _t11_33, _t11_34, _t11_35, _t11_36, _t11_37, _t11_38, _t11_39;
  __m256d _t12_0, _t12_1, _t12_2, _t12_3, _t12_4, _t12_5, _t12_6, _t12_7,
	_t12_8, _t12_9;
  __m256d _t13_0, _t13_1, _t13_2, _t13_3, _t13_4, _t13_5, _t13_6, _t13_7,
	_t13_8, _t13_9, _t13_10, _t13_11, _t13_12, _t13_13, _t13_14, _t13_15,
	_t13_16, _t13_17, _t13_18, _t13_19, _t13_20, _t13_21, _t13_22, _t13_23,
	_t13_24, _t13_25, _t13_26, _t13_27, _t13_28, _t13_29, _t13_30, _t13_31,
	_t13_32, _t13_33, _t13_34, _t13_35, _t13_36, _t13_37, _t13_38, _t13_39,
	_t13_40;
  __m256d _t14_0, _t14_1, _t14_2, _t14_3;
  __m256d _t15_0, _t15_1, _t15_2, _t15_3;
  __m256d _t16_0, _t16_1, _t16_2;
  __m256d _t17_0, _t17_1, _t17_2, _t17_3;

  _t0_0 = _mm256_castpd128_pd256(_mm_load_sd(&(K[0])));
  _t0_2 = _mm256_permute2f128_pd(_mm256_unpacklo_pd(_mm256_castpd128_pd256(_mm_load_sd(K + 12)), _mm256_castpd128_pd256(_mm_load_sd(K + 24))), _mm256_castpd128_pd256(_mm_load_sd(K + 36)), 32);
  _t0_3 = _mm256_castpd128_pd256(_mm_load_sd(K + 13));
  _t0_4 = _mm256_maskload_pd(K + 25, _mm256_setr_epi64x((__int64)1 << 63, (__int64)1 << 63, 0, 0));
  _t0_5 = _mm256_maskload_pd(K + 37, _mm256_setr_epi64x((__int64)1 << 63, (__int64)1 << 63, (__int64)1 << 63, 0));
  _t0_12 = _mm256_castpd128_pd256(_mm_load_sd(&(K[48])));
  _t0_36 = _mm256_castpd128_pd256(_mm_load_sd(&(K[96])));
  _t0_13 = _mm256_maskload_pd(K + 49, _mm256_setr_epi64x((__int64)1 << 63, (__int64)1 << 63, (__int64)1 << 63, 0));
  _t0_37 = _mm256_maskload_pd(K + 97, _mm256_setr_epi64x((__int64)1 << 63, (__int64)1 << 63, (__int64)1 << 63, 0));
  _t0_18 = _mm256_castpd128_pd256(_mm_load_sd(&(K[60])));
  _t0_42 = _mm256_castpd128_pd256(_mm_load_sd(&(K[108])));
  _t0_19 = _mm256_maskload_pd(K + 61, _mm256_setr_epi64x((__int64)1 << 63, (__int64)1 << 63, (__int64)1 << 63, 0));
  _t0_43 = _mm256_maskload_pd(K + 109, _mm256_setr_epi64x((__int64)1 << 63, (__int64)1 << 63, (__int64)1 << 63, 0));
  _t0_24 = _mm256_castpd128_pd256(_mm_load_sd(&(K[72])));
  _t0_48 = _mm256_castpd128_pd256(_mm_load_sd(&(K[120])));
  _t0_25 = _mm256_maskload_pd(K + 73, _mm256_setr_epi64x((__int64)1 << 63, (__int64)1 << 63, (__int64)1 << 63, 0));
  _t0_49 = _mm256_maskload_pd(K + 121, _mm256_setr_epi64x((__int64)1 << 63, (__int64)1 << 63, (__int64)1 << 63, 0));
  _t0_30 = _mm256_castpd128_pd256(_mm_load_sd(&(K[84])));
  _t0_54 = _mm256_castpd128_pd256(_mm_load_sd(&(K[132])));
  _t0_31 = _mm256_maskload_pd(K + 85, _mm256_setr_epi64x((__int64)1 << 63, (__int64)1 << 63, (__int64)1 << 63, 0));
  _t0_55 = _mm256_maskload_pd(K + 133, _mm256_setr_epi64x((__int64)1 << 63, (__int64)1 << 63, (__int64)1 << 63, 0));
  _t0_60 = _mm256_castpd128_pd256(_mm_load_sd(K + 52));
  _t0_61 = _mm256_maskload_pd(K + 64, _mm256_setr_epi64x((__int64)1 << 63, (__int64)1 << 63, 0, 0));
  _t0_62 = _mm256_maskload_pd(K + 76, _mm256_setr_epi64x((__int64)1 << 63, (__int64)1 << 63, (__int64)1 << 63, 0));
  _t0_63 = _mm256_loadu_pd(K + 88);
  _t0_138 = _mm256_loadu_pd(K + 100);
  _t0_139 = _mm256_loadu_pd(K + 112);
  _t0_140 = _mm256_loadu_pd(K + 124);
  _t0_141 = _mm256_loadu_pd(K + 136);
  _t0_64 = _mm256_castpd128_pd256(_mm_load_sd(K + 104));
  _t0_65 = _mm256_maskload_pd(K + 116, _mm256_setr_epi64x((__int64)1 << 63, (__int64)1 << 63, 0, 0));
  _t0_66 = _mm256_maskload_pd(K + 128, _mm256_setr_epi64x((__int64)1 << 63, (__int64)1 << 63, (__int64)1 << 63, 0));
  _t0_67 = _mm256_loadu_pd(K + 140);

  // Generating : L[12,12] = S(h(1, 12, 0), Sqrt( G(h(1, 12, 0), L[12,12],h(1, 12, 0)) ),h(1, 12, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_286 = _t0_0;

  // 4-BLAC: sqrt(1x4)
  _t0_296 = _mm256_castpd128_pd256(_mm_sqrt_pd(_mm256_castpd256_pd128(_t0_286)));

  // AVX Storer:
  _t0_0 = _t0_296;

  // Generating : T1442[1,12] = S(h(1, 1, 0), ( G(h(1, 1, 0), 1[1,1],h(1, 1, 0)) Div G(h(1, 12, 0), L[12,12],h(1, 12, 0)) ),h(1, 12, 0))

  // AVX Loader:

  // Constant 1x1 -> 1x4
  _t0_310 = _mm256_set_pd(0, 0, 0, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_316 = _t0_0;

  // 4-BLAC: 1x4 / 1x4
  _t0_330 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_310), _mm256_castpd256_pd128(_t0_316)));

  // AVX Storer:
  _t0_1 = _t0_330;

  // Generating : L[12,12] = S(h(3, 12, 1), ( G(h(1, 1, 0), T1442[1,12],h(1, 12, 0)) Kro G(h(3, 12, 1), L[12,12],h(1, 12, 0)) ),h(1, 12, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_346 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_1, _t0_1, 32), _mm256_permute2f128_pd(_t0_1, _t0_1, 32), 0);

  // AVX Loader:

  // 3x1 -> 4x1
  _t0_350 = _t0_2;

  // 4-BLAC: 1x4 Kro 4x1
  _t0_363 = _mm256_mul_pd(_t0_346, _t0_350);

  // AVX Storer:
  _t0_2 = _t0_363;

  // Generating : L[12,12] = S(h(3, 12, 1), ( G(h(3, 12, 1), L[12,12],h(3, 12, 1)) - ( G(h(3, 12, 1), L[12,12],h(1, 12, 0)) * T( G(h(3, 12, 1), L[12,12],h(1, 12, 0)) ) ) ),h(3, 12, 1))

  // AVX Loader:

  // 3x3 -> 4x4 - LowTriang
  _t0_375 = _t0_3;
  _t0_376 = _t0_4;
  _t0_377 = _t0_5;
  _t0_378 = _mm256_setzero_pd();

  // AVX Loader:

  // 3x1 -> 4x1
  _t0_382 = _t0_2;

  // AVX Loader:

  // 3x1 -> 4x1
  _t0_387 = _t0_2;

  // 4-BLAC: (4x1)^T
  _t0_395 = _t0_387;

  // 4-BLAC: 4x1 * 1x4
  _t0_406 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_382, _t0_382, 32), _mm256_permute2f128_pd(_t0_382, _t0_382, 32), 0), _t0_395);
  _t0_407 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_382, _t0_382, 32), _mm256_permute2f128_pd(_t0_382, _t0_382, 32), 15), _t0_395);
  _t0_408 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_382, _t0_382, 49), _mm256_permute2f128_pd(_t0_382, _t0_382, 49), 0), _t0_395);
  _t0_409 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_382, _t0_382, 49), _mm256_permute2f128_pd(_t0_382, _t0_382, 49), 15), _t0_395);

  // 4-BLAC: 4x4 - 4x4
  _t0_421 = _mm256_sub_pd(_t0_375, _t0_406);
  _t0_422 = _mm256_sub_pd(_t0_376, _t0_407);
  _t0_423 = _mm256_sub_pd(_t0_377, _t0_408);
  _t0_424 = _mm256_sub_pd(_t0_378, _t0_409);

  // AVX Storer:

  // 4x4 -> 3x3 - LowTriang
  _t0_3 = _t0_421;
  _t0_4 = _t0_422;
  _t0_5 = _t0_423;

  // Generating : L[12,12] = S(h(1, 12, 1), Sqrt( G(h(1, 12, 1), L[12,12],h(1, 12, 1)) ),h(1, 12, 1))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_437 = _t0_3;

  // 4-BLAC: sqrt(1x4)
  _t0_445 = _mm256_castpd128_pd256(_mm_sqrt_pd(_mm256_castpd256_pd128(_t0_437)));

  // AVX Storer:
  _t0_3 = _t0_445;

  // Generating : T1442[1,12] = S(h(1, 1, 0), ( G(h(1, 1, 0), 1[1,1],h(1, 1, 0)) Div G(h(1, 12, 1), L[12,12],h(1, 12, 1)) ),h(1, 12, 1))

  // AVX Loader:

  // Constant 1x1 -> 1x4
  _t0_457 = _mm256_set_pd(0, 0, 0, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_461 = _t0_3;

  // 4-BLAC: 1x4 / 1x4
  _t0_478 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_457), _mm256_castpd256_pd128(_t0_461)));

  // AVX Storer:
  _t0_6 = _t0_478;

  // Generating : L[12,12] = S(h(2, 12, 2), ( G(h(1, 1, 0), T1442[1,12],h(1, 12, 1)) Kro G(h(2, 12, 2), L[12,12],h(1, 12, 1)) ),h(1, 12, 1))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_498 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_6, _t0_6, 32), _mm256_permute2f128_pd(_t0_6, _t0_6, 32), 0);

  // AVX Loader:

  // 2x1 -> 4x1
  _t0_507 = _mm256_blend_pd(_mm256_unpacklo_pd(_t0_4, _t0_5), _mm256_setzero_pd(), 12);

  // 4-BLAC: 1x4 Kro 4x1
  _t0_529 = _mm256_mul_pd(_t0_498, _t0_507);

  // AVX Storer:
  _t0_7 = _t0_529;

  // Generating : L[12,12] = S(h(2, 12, 2), ( G(h(2, 12, 2), L[12,12],h(2, 12, 2)) - ( G(h(2, 12, 2), L[12,12],h(1, 12, 1)) * T( G(h(2, 12, 2), L[12,12],h(1, 12, 1)) ) ) ),h(2, 12, 2))

  // AVX Loader:

  // 2x2 -> 4x4 - LowTriang
  _t0_544 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_4, 2), _mm256_setzero_pd());
  _t0_545 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_5, 6), _mm256_permute2f128_pd(_t0_5, _t0_5, 129), 5);
  _t0_546 = _mm256_setzero_pd();
  _t0_547 = _mm256_setzero_pd();

  // AVX Loader:

  // 2x1 -> 4x1
  _t0_553 = _t0_7;

  // AVX Loader:

  // 2x1 -> 4x1
  _t0_558 = _t0_7;

  // 4-BLAC: (4x1)^T
  _t0_568 = _t0_558;

  // 4-BLAC: 4x1 * 1x4
  _t0_582 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_553, _t0_553, 32), _mm256_permute2f128_pd(_t0_553, _t0_553, 32), 0), _t0_568);
  _t0_583 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_553, _t0_553, 32), _mm256_permute2f128_pd(_t0_553, _t0_553, 32), 15), _t0_568);
  _t0_584 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_553, _t0_553, 49), _mm256_permute2f128_pd(_t0_553, _t0_553, 49), 0), _t0_568);
  _t0_585 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_553, _t0_553, 49), _mm256_permute2f128_pd(_t0_553, _t0_553, 49), 15), _t0_568);

  // 4-BLAC: 4x4 - 4x4
  _t0_600 = _mm256_sub_pd(_t0_544, _t0_582);
  _t0_601 = _mm256_sub_pd(_t0_545, _t0_583);
  _t0_602 = _mm256_sub_pd(_t0_546, _t0_584);
  _t0_603 = _mm256_sub_pd(_t0_547, _t0_585);

  // AVX Storer:

  // 4x4 -> 2x2 - LowTriang
  _t0_8 = _t0_600;
  _t0_9 = _t0_601;

  // Generating : L[12,12] = S(h(1, 12, 2), Sqrt( G(h(1, 12, 2), L[12,12],h(1, 12, 2)) ),h(1, 12, 2))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_617 = _t0_8;

  // 4-BLAC: sqrt(1x4)
  _t0_627 = _mm256_castpd128_pd256(_mm_sqrt_pd(_mm256_castpd256_pd128(_t0_617)));

  // AVX Storer:
  _t0_8 = _t0_627;

  // Generating : L[12,12] = S(h(1, 12, 3), ( G(h(1, 12, 3), L[12,12],h(1, 12, 2)) Div G(h(1, 12, 2), L[12,12],h(1, 12, 2)) ),h(1, 12, 2))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_642 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_9, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_647 = _t0_8;

  // 4-BLAC: 1x4 / 1x4
  _t0_661 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_642), _mm256_castpd256_pd128(_t0_647)));

  // AVX Storer:
  _t0_10 = _t0_661;

  // Generating : L[12,12] = S(h(1, 12, 3), ( G(h(1, 12, 3), L[12,12],h(1, 12, 3)) - ( G(h(1, 12, 3), L[12,12],h(1, 12, 2)) Kro T( G(h(1, 12, 3), L[12,12],h(1, 12, 2)) ) ) ),h(1, 12, 3))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_151 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_9, 2), _mm256_setzero_pd());

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_156 = _t0_10;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_164 = _t0_10;

  // 4-BLAC: (4x1)^T
  _t0_178 = _t0_164;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_201 = _mm256_mul_pd(_t0_156, _t0_178);

  // 4-BLAC: 1x4 - 1x4
  _t0_221 = _mm256_sub_pd(_t0_151, _t0_201);

  // AVX Storer:
  _t0_11 = _t0_221;

  // Generating : L[12,12] = S(h(1, 12, 3), Sqrt( G(h(1, 12, 3), L[12,12],h(1, 12, 3)) ),h(1, 12, 3))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_225 = _t0_11;

  // 4-BLAC: sqrt(1x4)
  _t0_226 = _mm256_castpd128_pd256(_mm_sqrt_pd(_mm256_castpd256_pd128(_t0_225)));

  // AVX Storer:
  _t0_11 = _t0_226;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 4), ( G(h(1, 12, fi79 + 4), L[12,12],h(1, 12, 0)) Div G(h(1, 12, 0), L[12,12],h(1, 12, 0)) ),h(1, 12, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_227 = _t0_12;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_228 = _t0_0;

  // 4-BLAC: 1x4 / 1x4
  _t0_229 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_227), _mm256_castpd256_pd128(_t0_228)));

  // AVX Storer:
  _t0_12 = _t0_229;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 4), ( G(h(1, 12, fi79 + 4), L[12,12],h(3, 12, 1)) - ( G(h(1, 12, fi79 + 4), L[12,12],h(1, 12, 0)) Kro T( G(h(3, 12, 1), L[12,12],h(1, 12, 0)) ) ) ),h(3, 12, 1))

  // AVX Loader:

  // 1x3 -> 1x4
  _t0_230 = _t0_13;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_231 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_12, _t0_12, 32), _mm256_permute2f128_pd(_t0_12, _t0_12, 32), 0);

  // AVX Loader:

  // 3x1 -> 4x1
  _t0_232 = _t0_2;

  // 4-BLAC: (4x1)^T
  _t0_233 = _t0_232;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_234 = _mm256_mul_pd(_t0_231, _t0_233);

  // 4-BLAC: 1x4 - 1x4
  _t0_235 = _mm256_sub_pd(_t0_230, _t0_234);

  // AVX Storer:
  _t0_13 = _t0_235;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 4), ( G(h(1, 12, fi79 + 4), L[12,12],h(1, 12, 1)) Div G(h(1, 12, 1), L[12,12],h(1, 12, 1)) ),h(1, 12, 1))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_236 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_13, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_237 = _t0_3;

  // 4-BLAC: 1x4 / 1x4
  _t0_238 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_236), _mm256_castpd256_pd128(_t0_237)));

  // AVX Storer:
  _t0_14 = _t0_238;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 4), ( G(h(1, 12, fi79 + 4), L[12,12],h(2, 12, 2)) - ( G(h(1, 12, fi79 + 4), L[12,12],h(1, 12, 1)) Kro T( G(h(2, 12, 2), L[12,12],h(1, 12, 1)) ) ) ),h(2, 12, 2))

  // AVX Loader:

  // 1x2 -> 1x4
  _t0_239 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_13, 6), _mm256_permute2f128_pd(_t0_13, _t0_13, 129), 5);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_240 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_14, _t0_14, 32), _mm256_permute2f128_pd(_t0_14, _t0_14, 32), 0);

  // AVX Loader:

  // 2x1 -> 4x1
  _t0_241 = _t0_7;

  // 4-BLAC: (4x1)^T
  _t0_242 = _t0_241;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_243 = _mm256_mul_pd(_t0_240, _t0_242);

  // 4-BLAC: 1x4 - 1x4
  _t0_244 = _mm256_sub_pd(_t0_239, _t0_243);

  // AVX Storer:
  _t0_15 = _t0_244;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 4), ( G(h(1, 12, fi79 + 4), L[12,12],h(1, 12, 2)) Div G(h(1, 12, 2), L[12,12],h(1, 12, 2)) ),h(1, 12, 2))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_245 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_15, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_246 = _t0_8;

  // 4-BLAC: 1x4 / 1x4
  _t0_247 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_245), _mm256_castpd256_pd128(_t0_246)));

  // AVX Storer:
  _t0_16 = _t0_247;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 4), ( G(h(1, 12, fi79 + 4), L[12,12],h(1, 12, 3)) - ( G(h(1, 12, fi79 + 4), L[12,12],h(1, 12, 2)) Kro T( G(h(1, 12, 3), L[12,12],h(1, 12, 2)) ) ) ),h(1, 12, 3))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_248 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_15, 2), _mm256_setzero_pd());

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_249 = _t0_16;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_250 = _t0_10;

  // 4-BLAC: (4x1)^T
  _t0_251 = _t0_250;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_252 = _mm256_mul_pd(_t0_249, _t0_251);

  // 4-BLAC: 1x4 - 1x4
  _t0_253 = _mm256_sub_pd(_t0_248, _t0_252);

  // AVX Storer:
  _t0_17 = _t0_253;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 4), ( G(h(1, 12, fi79 + 4), L[12,12],h(1, 12, 3)) Div G(h(1, 12, 3), L[12,12],h(1, 12, 3)) ),h(1, 12, 3))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_254 = _t0_17;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_255 = _t0_11;

  // 4-BLAC: 1x4 / 1x4
  _t0_256 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_254), _mm256_castpd256_pd128(_t0_255)));

  // AVX Storer:
  _t0_17 = _t0_256;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 5), ( G(h(1, 12, fi79 + 5), L[12,12],h(1, 12, 0)) Div G(h(1, 12, 0), L[12,12],h(1, 12, 0)) ),h(1, 12, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_257 = _t0_18;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_258 = _t0_0;

  // 4-BLAC: 1x4 / 1x4
  _t0_259 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_257), _mm256_castpd256_pd128(_t0_258)));

  // AVX Storer:
  _t0_18 = _t0_259;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 5), ( G(h(1, 12, fi79 + 5), L[12,12],h(3, 12, 1)) - ( G(h(1, 12, fi79 + 5), L[12,12],h(1, 12, 0)) Kro T( G(h(3, 12, 1), L[12,12],h(1, 12, 0)) ) ) ),h(3, 12, 1))

  // AVX Loader:

  // 1x3 -> 1x4
  _t0_260 = _t0_19;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_261 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_18, _t0_18, 32), _mm256_permute2f128_pd(_t0_18, _t0_18, 32), 0);

  // AVX Loader:

  // 3x1 -> 4x1
  _t0_262 = _t0_2;

  // 4-BLAC: (4x1)^T
  _t0_263 = _t0_262;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_264 = _mm256_mul_pd(_t0_261, _t0_263);

  // 4-BLAC: 1x4 - 1x4
  _t0_265 = _mm256_sub_pd(_t0_260, _t0_264);

  // AVX Storer:
  _t0_19 = _t0_265;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 5), ( G(h(1, 12, fi79 + 5), L[12,12],h(1, 12, 1)) Div G(h(1, 12, 1), L[12,12],h(1, 12, 1)) ),h(1, 12, 1))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_266 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_19, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_267 = _t0_3;

  // 4-BLAC: 1x4 / 1x4
  _t0_268 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_266), _mm256_castpd256_pd128(_t0_267)));

  // AVX Storer:
  _t0_20 = _t0_268;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 5), ( G(h(1, 12, fi79 + 5), L[12,12],h(2, 12, 2)) - ( G(h(1, 12, fi79 + 5), L[12,12],h(1, 12, 1)) Kro T( G(h(2, 12, 2), L[12,12],h(1, 12, 1)) ) ) ),h(2, 12, 2))

  // AVX Loader:

  // 1x2 -> 1x4
  _t0_269 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_19, 6), _mm256_permute2f128_pd(_t0_19, _t0_19, 129), 5);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_270 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_20, _t0_20, 32), _mm256_permute2f128_pd(_t0_20, _t0_20, 32), 0);

  // AVX Loader:

  // 2x1 -> 4x1
  _t0_271 = _t0_7;

  // 4-BLAC: (4x1)^T
  _t0_272 = _t0_271;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_273 = _mm256_mul_pd(_t0_270, _t0_272);

  // 4-BLAC: 1x4 - 1x4
  _t0_274 = _mm256_sub_pd(_t0_269, _t0_273);

  // AVX Storer:
  _t0_21 = _t0_274;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 5), ( G(h(1, 12, fi79 + 5), L[12,12],h(1, 12, 2)) Div G(h(1, 12, 2), L[12,12],h(1, 12, 2)) ),h(1, 12, 2))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_275 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_21, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_276 = _t0_8;

  // 4-BLAC: 1x4 / 1x4
  _t0_277 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_275), _mm256_castpd256_pd128(_t0_276)));

  // AVX Storer:
  _t0_22 = _t0_277;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 5), ( G(h(1, 12, fi79 + 5), L[12,12],h(1, 12, 3)) - ( G(h(1, 12, fi79 + 5), L[12,12],h(1, 12, 2)) Kro T( G(h(1, 12, 3), L[12,12],h(1, 12, 2)) ) ) ),h(1, 12, 3))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_278 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_21, 2), _mm256_setzero_pd());

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_279 = _t0_22;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_280 = _t0_10;

  // 4-BLAC: (4x1)^T
  _t0_281 = _t0_280;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_282 = _mm256_mul_pd(_t0_279, _t0_281);

  // 4-BLAC: 1x4 - 1x4
  _t0_283 = _mm256_sub_pd(_t0_278, _t0_282);

  // AVX Storer:
  _t0_23 = _t0_283;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 5), ( G(h(1, 12, fi79 + 5), L[12,12],h(1, 12, 3)) Div G(h(1, 12, 3), L[12,12],h(1, 12, 3)) ),h(1, 12, 3))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_284 = _t0_23;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_285 = _t0_11;

  // 4-BLAC: 1x4 / 1x4
  _t0_287 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_284), _mm256_castpd256_pd128(_t0_285)));

  // AVX Storer:
  _t0_23 = _t0_287;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 6), ( G(h(1, 12, fi79 + 6), L[12,12],h(1, 12, 0)) Div G(h(1, 12, 0), L[12,12],h(1, 12, 0)) ),h(1, 12, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_288 = _t0_24;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_289 = _t0_0;

  // 4-BLAC: 1x4 / 1x4
  _t0_290 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_288), _mm256_castpd256_pd128(_t0_289)));

  // AVX Storer:
  _t0_24 = _t0_290;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 6), ( G(h(1, 12, fi79 + 6), L[12,12],h(3, 12, 1)) - ( G(h(1, 12, fi79 + 6), L[12,12],h(1, 12, 0)) Kro T( G(h(3, 12, 1), L[12,12],h(1, 12, 0)) ) ) ),h(3, 12, 1))

  // AVX Loader:

  // 1x3 -> 1x4
  _t0_291 = _t0_25;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_292 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_24, _t0_24, 32), _mm256_permute2f128_pd(_t0_24, _t0_24, 32), 0);

  // AVX Loader:

  // 3x1 -> 4x1
  _t0_293 = _t0_2;

  // 4-BLAC: (4x1)^T
  _t0_294 = _t0_293;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_295 = _mm256_mul_pd(_t0_292, _t0_294);

  // 4-BLAC: 1x4 - 1x4
  _t0_297 = _mm256_sub_pd(_t0_291, _t0_295);

  // AVX Storer:
  _t0_25 = _t0_297;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 6), ( G(h(1, 12, fi79 + 6), L[12,12],h(1, 12, 1)) Div G(h(1, 12, 1), L[12,12],h(1, 12, 1)) ),h(1, 12, 1))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_298 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_25, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_299 = _t0_3;

  // 4-BLAC: 1x4 / 1x4
  _t0_300 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_298), _mm256_castpd256_pd128(_t0_299)));

  // AVX Storer:
  _t0_26 = _t0_300;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 6), ( G(h(1, 12, fi79 + 6), L[12,12],h(2, 12, 2)) - ( G(h(1, 12, fi79 + 6), L[12,12],h(1, 12, 1)) Kro T( G(h(2, 12, 2), L[12,12],h(1, 12, 1)) ) ) ),h(2, 12, 2))

  // AVX Loader:

  // 1x2 -> 1x4
  _t0_301 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_25, 6), _mm256_permute2f128_pd(_t0_25, _t0_25, 129), 5);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_302 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_26, _t0_26, 32), _mm256_permute2f128_pd(_t0_26, _t0_26, 32), 0);

  // AVX Loader:

  // 2x1 -> 4x1
  _t0_303 = _t0_7;

  // 4-BLAC: (4x1)^T
  _t0_304 = _t0_303;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_305 = _mm256_mul_pd(_t0_302, _t0_304);

  // 4-BLAC: 1x4 - 1x4
  _t0_306 = _mm256_sub_pd(_t0_301, _t0_305);

  // AVX Storer:
  _t0_27 = _t0_306;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 6), ( G(h(1, 12, fi79 + 6), L[12,12],h(1, 12, 2)) Div G(h(1, 12, 2), L[12,12],h(1, 12, 2)) ),h(1, 12, 2))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_307 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_27, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_308 = _t0_8;

  // 4-BLAC: 1x4 / 1x4
  _t0_309 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_307), _mm256_castpd256_pd128(_t0_308)));

  // AVX Storer:
  _t0_28 = _t0_309;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 6), ( G(h(1, 12, fi79 + 6), L[12,12],h(1, 12, 3)) - ( G(h(1, 12, fi79 + 6), L[12,12],h(1, 12, 2)) Kro T( G(h(1, 12, 3), L[12,12],h(1, 12, 2)) ) ) ),h(1, 12, 3))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_311 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_27, 2), _mm256_setzero_pd());

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_312 = _t0_28;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_313 = _t0_10;

  // 4-BLAC: (4x1)^T
  _t0_314 = _t0_313;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_315 = _mm256_mul_pd(_t0_312, _t0_314);

  // 4-BLAC: 1x4 - 1x4
  _t0_317 = _mm256_sub_pd(_t0_311, _t0_315);

  // AVX Storer:
  _t0_29 = _t0_317;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 6), ( G(h(1, 12, fi79 + 6), L[12,12],h(1, 12, 3)) Div G(h(1, 12, 3), L[12,12],h(1, 12, 3)) ),h(1, 12, 3))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_318 = _t0_29;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_319 = _t0_11;

  // 4-BLAC: 1x4 / 1x4
  _t0_320 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_318), _mm256_castpd256_pd128(_t0_319)));

  // AVX Storer:
  _t0_29 = _t0_320;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 7), ( G(h(1, 12, fi79 + 7), L[12,12],h(1, 12, 0)) Div G(h(1, 12, 0), L[12,12],h(1, 12, 0)) ),h(1, 12, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_321 = _t0_30;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_322 = _t0_0;

  // 4-BLAC: 1x4 / 1x4
  _t0_323 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_321), _mm256_castpd256_pd128(_t0_322)));

  // AVX Storer:
  _t0_30 = _t0_323;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 7), ( G(h(1, 12, fi79 + 7), L[12,12],h(3, 12, 1)) - ( G(h(1, 12, fi79 + 7), L[12,12],h(1, 12, 0)) Kro T( G(h(3, 12, 1), L[12,12],h(1, 12, 0)) ) ) ),h(3, 12, 1))

  // AVX Loader:

  // 1x3 -> 1x4
  _t0_324 = _t0_31;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_325 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_30, _t0_30, 32), _mm256_permute2f128_pd(_t0_30, _t0_30, 32), 0);

  // AVX Loader:

  // 3x1 -> 4x1
  _t0_326 = _t0_2;

  // 4-BLAC: (4x1)^T
  _t0_327 = _t0_326;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_328 = _mm256_mul_pd(_t0_325, _t0_327);

  // 4-BLAC: 1x4 - 1x4
  _t0_329 = _mm256_sub_pd(_t0_324, _t0_328);

  // AVX Storer:
  _t0_31 = _t0_329;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 7), ( G(h(1, 12, fi79 + 7), L[12,12],h(1, 12, 1)) Div G(h(1, 12, 1), L[12,12],h(1, 12, 1)) ),h(1, 12, 1))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_331 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_31, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_332 = _t0_3;

  // 4-BLAC: 1x4 / 1x4
  _t0_333 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_331), _mm256_castpd256_pd128(_t0_332)));

  // AVX Storer:
  _t0_32 = _t0_333;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 7), ( G(h(1, 12, fi79 + 7), L[12,12],h(2, 12, 2)) - ( G(h(1, 12, fi79 + 7), L[12,12],h(1, 12, 1)) Kro T( G(h(2, 12, 2), L[12,12],h(1, 12, 1)) ) ) ),h(2, 12, 2))

  // AVX Loader:

  // 1x2 -> 1x4
  _t0_334 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_31, 6), _mm256_permute2f128_pd(_t0_31, _t0_31, 129), 5);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_335 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_32, _t0_32, 32), _mm256_permute2f128_pd(_t0_32, _t0_32, 32), 0);

  // AVX Loader:

  // 2x1 -> 4x1
  _t0_336 = _t0_7;

  // 4-BLAC: (4x1)^T
  _t0_337 = _t0_336;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_338 = _mm256_mul_pd(_t0_335, _t0_337);

  // 4-BLAC: 1x4 - 1x4
  _t0_339 = _mm256_sub_pd(_t0_334, _t0_338);

  // AVX Storer:
  _t0_33 = _t0_339;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 7), ( G(h(1, 12, fi79 + 7), L[12,12],h(1, 12, 2)) Div G(h(1, 12, 2), L[12,12],h(1, 12, 2)) ),h(1, 12, 2))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_340 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_33, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_341 = _t0_8;

  // 4-BLAC: 1x4 / 1x4
  _t0_342 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_340), _mm256_castpd256_pd128(_t0_341)));

  // AVX Storer:
  _t0_34 = _t0_342;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 7), ( G(h(1, 12, fi79 + 7), L[12,12],h(1, 12, 3)) - ( G(h(1, 12, fi79 + 7), L[12,12],h(1, 12, 2)) Kro T( G(h(1, 12, 3), L[12,12],h(1, 12, 2)) ) ) ),h(1, 12, 3))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_343 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_33, 2), _mm256_setzero_pd());

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_344 = _t0_34;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_345 = _t0_10;

  // 4-BLAC: (4x1)^T
  _t0_347 = _t0_345;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_348 = _mm256_mul_pd(_t0_344, _t0_347);

  // 4-BLAC: 1x4 - 1x4
  _t0_349 = _mm256_sub_pd(_t0_343, _t0_348);

  // AVX Storer:
  _t0_35 = _t0_349;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 7), ( G(h(1, 12, fi79 + 7), L[12,12],h(1, 12, 3)) Div G(h(1, 12, 3), L[12,12],h(1, 12, 3)) ),h(1, 12, 3))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_351 = _t0_35;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_352 = _t0_11;

  // 4-BLAC: 1x4 / 1x4
  _t0_353 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_351), _mm256_castpd256_pd128(_t0_352)));

  // AVX Storer:
  _t0_35 = _t0_353;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 4), ( G(h(1, 12, fi79 + 4), L[12,12],h(1, 12, 0)) Div G(h(1, 12, 0), L[12,12],h(1, 12, 0)) ),h(1, 12, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_354 = _t0_36;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_355 = _t0_0;

  // 4-BLAC: 1x4 / 1x4
  _t0_356 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_354), _mm256_castpd256_pd128(_t0_355)));

  // AVX Storer:
  _t0_36 = _t0_356;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 4), ( G(h(1, 12, fi79 + 4), L[12,12],h(3, 12, 1)) - ( G(h(1, 12, fi79 + 4), L[12,12],h(1, 12, 0)) Kro T( G(h(3, 12, 1), L[12,12],h(1, 12, 0)) ) ) ),h(3, 12, 1))

  // AVX Loader:

  // 1x3 -> 1x4
  _t0_357 = _t0_37;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_358 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_36, _t0_36, 32), _mm256_permute2f128_pd(_t0_36, _t0_36, 32), 0);

  // AVX Loader:

  // 3x1 -> 4x1
  _t0_359 = _t0_2;

  // 4-BLAC: (4x1)^T
  _t0_233 = _t0_359;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_234 = _mm256_mul_pd(_t0_358, _t0_233);

  // 4-BLAC: 1x4 - 1x4
  _t0_360 = _mm256_sub_pd(_t0_357, _t0_234);

  // AVX Storer:
  _t0_37 = _t0_360;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 4), ( G(h(1, 12, fi79 + 4), L[12,12],h(1, 12, 1)) Div G(h(1, 12, 1), L[12,12],h(1, 12, 1)) ),h(1, 12, 1))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_361 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_37, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_362 = _t0_3;

  // 4-BLAC: 1x4 / 1x4
  _t0_364 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_361), _mm256_castpd256_pd128(_t0_362)));

  // AVX Storer:
  _t0_38 = _t0_364;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 4), ( G(h(1, 12, fi79 + 4), L[12,12],h(2, 12, 2)) - ( G(h(1, 12, fi79 + 4), L[12,12],h(1, 12, 1)) Kro T( G(h(2, 12, 2), L[12,12],h(1, 12, 1)) ) ) ),h(2, 12, 2))

  // AVX Loader:

  // 1x2 -> 1x4
  _t0_365 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_37, 6), _mm256_permute2f128_pd(_t0_37, _t0_37, 129), 5);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_366 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_38, _t0_38, 32), _mm256_permute2f128_pd(_t0_38, _t0_38, 32), 0);

  // AVX Loader:

  // 2x1 -> 4x1
  _t0_367 = _t0_7;

  // 4-BLAC: (4x1)^T
  _t0_242 = _t0_367;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_243 = _mm256_mul_pd(_t0_366, _t0_242);

  // 4-BLAC: 1x4 - 1x4
  _t0_368 = _mm256_sub_pd(_t0_365, _t0_243);

  // AVX Storer:
  _t0_39 = _t0_368;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 4), ( G(h(1, 12, fi79 + 4), L[12,12],h(1, 12, 2)) Div G(h(1, 12, 2), L[12,12],h(1, 12, 2)) ),h(1, 12, 2))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_369 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_39, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_370 = _t0_8;

  // 4-BLAC: 1x4 / 1x4
  _t0_371 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_369), _mm256_castpd256_pd128(_t0_370)));

  // AVX Storer:
  _t0_40 = _t0_371;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 4), ( G(h(1, 12, fi79 + 4), L[12,12],h(1, 12, 3)) - ( G(h(1, 12, fi79 + 4), L[12,12],h(1, 12, 2)) Kro T( G(h(1, 12, 3), L[12,12],h(1, 12, 2)) ) ) ),h(1, 12, 3))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_372 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_39, 2), _mm256_setzero_pd());

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_373 = _t0_40;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_374 = _t0_10;

  // 4-BLAC: (4x1)^T
  _t0_251 = _t0_374;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_252 = _mm256_mul_pd(_t0_373, _t0_251);

  // 4-BLAC: 1x4 - 1x4
  _t0_379 = _mm256_sub_pd(_t0_372, _t0_252);

  // AVX Storer:
  _t0_41 = _t0_379;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 4), ( G(h(1, 12, fi79 + 4), L[12,12],h(1, 12, 3)) Div G(h(1, 12, 3), L[12,12],h(1, 12, 3)) ),h(1, 12, 3))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_380 = _t0_41;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_381 = _t0_11;

  // 4-BLAC: 1x4 / 1x4
  _t0_383 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_380), _mm256_castpd256_pd128(_t0_381)));

  // AVX Storer:
  _t0_41 = _t0_383;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 5), ( G(h(1, 12, fi79 + 5), L[12,12],h(1, 12, 0)) Div G(h(1, 12, 0), L[12,12],h(1, 12, 0)) ),h(1, 12, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_384 = _t0_42;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_385 = _t0_0;

  // 4-BLAC: 1x4 / 1x4
  _t0_386 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_384), _mm256_castpd256_pd128(_t0_385)));

  // AVX Storer:
  _t0_42 = _t0_386;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 5), ( G(h(1, 12, fi79 + 5), L[12,12],h(3, 12, 1)) - ( G(h(1, 12, fi79 + 5), L[12,12],h(1, 12, 0)) Kro T( G(h(3, 12, 1), L[12,12],h(1, 12, 0)) ) ) ),h(3, 12, 1))

  // AVX Loader:

  // 1x3 -> 1x4
  _t0_388 = _t0_43;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_389 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_42, _t0_42, 32), _mm256_permute2f128_pd(_t0_42, _t0_42, 32), 0);

  // AVX Loader:

  // 3x1 -> 4x1
  _t0_390 = _t0_2;

  // 4-BLAC: (4x1)^T
  _t0_263 = _t0_390;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_264 = _mm256_mul_pd(_t0_389, _t0_263);

  // 4-BLAC: 1x4 - 1x4
  _t0_391 = _mm256_sub_pd(_t0_388, _t0_264);

  // AVX Storer:
  _t0_43 = _t0_391;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 5), ( G(h(1, 12, fi79 + 5), L[12,12],h(1, 12, 1)) Div G(h(1, 12, 1), L[12,12],h(1, 12, 1)) ),h(1, 12, 1))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_392 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_43, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_393 = _t0_3;

  // 4-BLAC: 1x4 / 1x4
  _t0_394 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_392), _mm256_castpd256_pd128(_t0_393)));

  // AVX Storer:
  _t0_44 = _t0_394;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 5), ( G(h(1, 12, fi79 + 5), L[12,12],h(2, 12, 2)) - ( G(h(1, 12, fi79 + 5), L[12,12],h(1, 12, 1)) Kro T( G(h(2, 12, 2), L[12,12],h(1, 12, 1)) ) ) ),h(2, 12, 2))

  // AVX Loader:

  // 1x2 -> 1x4
  _t0_396 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_43, 6), _mm256_permute2f128_pd(_t0_43, _t0_43, 129), 5);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_397 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_44, _t0_44, 32), _mm256_permute2f128_pd(_t0_44, _t0_44, 32), 0);

  // AVX Loader:

  // 2x1 -> 4x1
  _t0_398 = _t0_7;

  // 4-BLAC: (4x1)^T
  _t0_272 = _t0_398;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_273 = _mm256_mul_pd(_t0_397, _t0_272);

  // 4-BLAC: 1x4 - 1x4
  _t0_399 = _mm256_sub_pd(_t0_396, _t0_273);

  // AVX Storer:
  _t0_45 = _t0_399;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 5), ( G(h(1, 12, fi79 + 5), L[12,12],h(1, 12, 2)) Div G(h(1, 12, 2), L[12,12],h(1, 12, 2)) ),h(1, 12, 2))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_400 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_45, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_401 = _t0_8;

  // 4-BLAC: 1x4 / 1x4
  _t0_402 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_400), _mm256_castpd256_pd128(_t0_401)));

  // AVX Storer:
  _t0_46 = _t0_402;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 5), ( G(h(1, 12, fi79 + 5), L[12,12],h(1, 12, 3)) - ( G(h(1, 12, fi79 + 5), L[12,12],h(1, 12, 2)) Kro T( G(h(1, 12, 3), L[12,12],h(1, 12, 2)) ) ) ),h(1, 12, 3))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_403 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_45, 2), _mm256_setzero_pd());

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_404 = _t0_46;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_405 = _t0_10;

  // 4-BLAC: (4x1)^T
  _t0_281 = _t0_405;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_282 = _mm256_mul_pd(_t0_404, _t0_281);

  // 4-BLAC: 1x4 - 1x4
  _t0_410 = _mm256_sub_pd(_t0_403, _t0_282);

  // AVX Storer:
  _t0_47 = _t0_410;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 5), ( G(h(1, 12, fi79 + 5), L[12,12],h(1, 12, 3)) Div G(h(1, 12, 3), L[12,12],h(1, 12, 3)) ),h(1, 12, 3))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_411 = _t0_47;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_412 = _t0_11;

  // 4-BLAC: 1x4 / 1x4
  _t0_413 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_411), _mm256_castpd256_pd128(_t0_412)));

  // AVX Storer:
  _t0_47 = _t0_413;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 6), ( G(h(1, 12, fi79 + 6), L[12,12],h(1, 12, 0)) Div G(h(1, 12, 0), L[12,12],h(1, 12, 0)) ),h(1, 12, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_414 = _t0_48;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_415 = _t0_0;

  // 4-BLAC: 1x4 / 1x4
  _t0_416 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_414), _mm256_castpd256_pd128(_t0_415)));

  // AVX Storer:
  _t0_48 = _t0_416;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 6), ( G(h(1, 12, fi79 + 6), L[12,12],h(3, 12, 1)) - ( G(h(1, 12, fi79 + 6), L[12,12],h(1, 12, 0)) Kro T( G(h(3, 12, 1), L[12,12],h(1, 12, 0)) ) ) ),h(3, 12, 1))

  // AVX Loader:

  // 1x3 -> 1x4
  _t0_417 = _t0_49;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_418 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_48, _t0_48, 32), _mm256_permute2f128_pd(_t0_48, _t0_48, 32), 0);

  // AVX Loader:

  // 3x1 -> 4x1
  _t0_419 = _t0_2;

  // 4-BLAC: (4x1)^T
  _t0_294 = _t0_419;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_295 = _mm256_mul_pd(_t0_418, _t0_294);

  // 4-BLAC: 1x4 - 1x4
  _t0_420 = _mm256_sub_pd(_t0_417, _t0_295);

  // AVX Storer:
  _t0_49 = _t0_420;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 6), ( G(h(1, 12, fi79 + 6), L[12,12],h(1, 12, 1)) Div G(h(1, 12, 1), L[12,12],h(1, 12, 1)) ),h(1, 12, 1))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_425 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_49, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_426 = _t0_3;

  // 4-BLAC: 1x4 / 1x4
  _t0_427 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_425), _mm256_castpd256_pd128(_t0_426)));

  // AVX Storer:
  _t0_50 = _t0_427;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 6), ( G(h(1, 12, fi79 + 6), L[12,12],h(2, 12, 2)) - ( G(h(1, 12, fi79 + 6), L[12,12],h(1, 12, 1)) Kro T( G(h(2, 12, 2), L[12,12],h(1, 12, 1)) ) ) ),h(2, 12, 2))

  // AVX Loader:

  // 1x2 -> 1x4
  _t0_428 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_49, 6), _mm256_permute2f128_pd(_t0_49, _t0_49, 129), 5);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_429 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_50, _t0_50, 32), _mm256_permute2f128_pd(_t0_50, _t0_50, 32), 0);

  // AVX Loader:

  // 2x1 -> 4x1
  _t0_430 = _t0_7;

  // 4-BLAC: (4x1)^T
  _t0_304 = _t0_430;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_305 = _mm256_mul_pd(_t0_429, _t0_304);

  // 4-BLAC: 1x4 - 1x4
  _t0_431 = _mm256_sub_pd(_t0_428, _t0_305);

  // AVX Storer:
  _t0_51 = _t0_431;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 6), ( G(h(1, 12, fi79 + 6), L[12,12],h(1, 12, 2)) Div G(h(1, 12, 2), L[12,12],h(1, 12, 2)) ),h(1, 12, 2))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_432 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_51, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_433 = _t0_8;

  // 4-BLAC: 1x4 / 1x4
  _t0_434 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_432), _mm256_castpd256_pd128(_t0_433)));

  // AVX Storer:
  _t0_52 = _t0_434;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 6), ( G(h(1, 12, fi79 + 6), L[12,12],h(1, 12, 3)) - ( G(h(1, 12, fi79 + 6), L[12,12],h(1, 12, 2)) Kro T( G(h(1, 12, 3), L[12,12],h(1, 12, 2)) ) ) ),h(1, 12, 3))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_435 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_51, 2), _mm256_setzero_pd());

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_436 = _t0_52;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_438 = _t0_10;

  // 4-BLAC: (4x1)^T
  _t0_314 = _t0_438;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_315 = _mm256_mul_pd(_t0_436, _t0_314);

  // 4-BLAC: 1x4 - 1x4
  _t0_439 = _mm256_sub_pd(_t0_435, _t0_315);

  // AVX Storer:
  _t0_53 = _t0_439;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 6), ( G(h(1, 12, fi79 + 6), L[12,12],h(1, 12, 3)) Div G(h(1, 12, 3), L[12,12],h(1, 12, 3)) ),h(1, 12, 3))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_440 = _t0_53;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_441 = _t0_11;

  // 4-BLAC: 1x4 / 1x4
  _t0_442 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_440), _mm256_castpd256_pd128(_t0_441)));

  // AVX Storer:
  _t0_53 = _t0_442;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 7), ( G(h(1, 12, fi79 + 7), L[12,12],h(1, 12, 0)) Div G(h(1, 12, 0), L[12,12],h(1, 12, 0)) ),h(1, 12, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_443 = _t0_54;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_444 = _t0_0;

  // 4-BLAC: 1x4 / 1x4
  _t0_446 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_443), _mm256_castpd256_pd128(_t0_444)));

  // AVX Storer:
  _t0_54 = _t0_446;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 7), ( G(h(1, 12, fi79 + 7), L[12,12],h(3, 12, 1)) - ( G(h(1, 12, fi79 + 7), L[12,12],h(1, 12, 0)) Kro T( G(h(3, 12, 1), L[12,12],h(1, 12, 0)) ) ) ),h(3, 12, 1))

  // AVX Loader:

  // 1x3 -> 1x4
  _t0_447 = _t0_55;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_448 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_54, _t0_54, 32), _mm256_permute2f128_pd(_t0_54, _t0_54, 32), 0);

  // AVX Loader:

  // 3x1 -> 4x1
  _t0_449 = _t0_2;

  // 4-BLAC: (4x1)^T
  _t0_327 = _t0_449;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_328 = _mm256_mul_pd(_t0_448, _t0_327);

  // 4-BLAC: 1x4 - 1x4
  _t0_450 = _mm256_sub_pd(_t0_447, _t0_328);

  // AVX Storer:
  _t0_55 = _t0_450;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 7), ( G(h(1, 12, fi79 + 7), L[12,12],h(1, 12, 1)) Div G(h(1, 12, 1), L[12,12],h(1, 12, 1)) ),h(1, 12, 1))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_451 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_55, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_452 = _t0_3;

  // 4-BLAC: 1x4 / 1x4
  _t0_453 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_451), _mm256_castpd256_pd128(_t0_452)));

  // AVX Storer:
  _t0_56 = _t0_453;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 7), ( G(h(1, 12, fi79 + 7), L[12,12],h(2, 12, 2)) - ( G(h(1, 12, fi79 + 7), L[12,12],h(1, 12, 1)) Kro T( G(h(2, 12, 2), L[12,12],h(1, 12, 1)) ) ) ),h(2, 12, 2))

  // AVX Loader:

  // 1x2 -> 1x4
  _t0_454 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_55, 6), _mm256_permute2f128_pd(_t0_55, _t0_55, 129), 5);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_455 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_56, _t0_56, 32), _mm256_permute2f128_pd(_t0_56, _t0_56, 32), 0);

  // AVX Loader:

  // 2x1 -> 4x1
  _t0_456 = _t0_7;

  // 4-BLAC: (4x1)^T
  _t0_337 = _t0_456;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_338 = _mm256_mul_pd(_t0_455, _t0_337);

  // 4-BLAC: 1x4 - 1x4
  _t0_458 = _mm256_sub_pd(_t0_454, _t0_338);

  // AVX Storer:
  _t0_57 = _t0_458;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 7), ( G(h(1, 12, fi79 + 7), L[12,12],h(1, 12, 2)) Div G(h(1, 12, 2), L[12,12],h(1, 12, 2)) ),h(1, 12, 2))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_459 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_57, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_460 = _t0_8;

  // 4-BLAC: 1x4 / 1x4
  _t0_462 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_459), _mm256_castpd256_pd128(_t0_460)));

  // AVX Storer:
  _t0_58 = _t0_462;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 7), ( G(h(1, 12, fi79 + 7), L[12,12],h(1, 12, 3)) - ( G(h(1, 12, fi79 + 7), L[12,12],h(1, 12, 2)) Kro T( G(h(1, 12, 3), L[12,12],h(1, 12, 2)) ) ) ),h(1, 12, 3))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_463 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_57, 2), _mm256_setzero_pd());

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_464 = _t0_58;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_465 = _t0_10;

  // 4-BLAC: (4x1)^T
  _t0_347 = _t0_465;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_348 = _mm256_mul_pd(_t0_464, _t0_347);

  // 4-BLAC: 1x4 - 1x4
  _t0_466 = _mm256_sub_pd(_t0_463, _t0_348);

  // AVX Storer:
  _t0_59 = _t0_466;

  // Generating : L[12,12] = S(h(1, 12, fi79 + 7), ( G(h(1, 12, fi79 + 7), L[12,12],h(1, 12, 3)) Div G(h(1, 12, 3), L[12,12],h(1, 12, 3)) ),h(1, 12, 3))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_467 = _t0_59;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_468 = _t0_11;

  // 4-BLAC: 1x4 / 1x4
  _t0_469 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_467), _mm256_castpd256_pd128(_t0_468)));

  // AVX Storer:
  _t0_59 = _t0_469;

  // Generating : L[12,12] = ( ( S(h(4, 12, 4), ( G(h(4, 12, 4), L[12,12],h(4, 12, 4)) - ( G(h(4, 12, 4), L[12,12],h(4, 12, 0)) * T( G(h(4, 12, 4), L[12,12],h(4, 12, 0)) ) ) ),h(4, 12, 4)) + S(h(4, 12, 8), ( G(h(4, 12, 8), L[12,12],h(4, 12, 4)) - ( G(h(4, 12, 8), L[12,12],h(4, 12, 0)) * T( G(h(4, 12, 4), L[12,12],h(4, 12, 0)) ) ) ),h(4, 12, 4)) ) + S(h(4, 12, 8), ( G(h(4, 12, 8), L[12,12],h(4, 12, 8)) - ( G(h(4, 12, 8), L[12,12],h(4, 12, 0)) * T( G(h(4, 12, 8), L[12,12],h(4, 12, 0)) ) ) ),h(4, 12, 8)) )

  // AVX Loader:

  // 4x4 -> 4x4 - LowTriang
  _t0_470 = _t0_60;
  _t0_471 = _t0_61;
  _t0_472 = _t0_62;
  _t0_473 = _t0_63;

  // AVX Loader:

  // AVX Loader:

  // 4-BLAC: (4x4)^T
  _t0_675 = _mm256_permute2f128_pd(_mm256_unpacklo_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_12, _t0_14), _mm256_unpacklo_pd(_t0_16, _t0_17), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_18, _t0_20), _mm256_unpacklo_pd(_t0_22, _t0_23), 32)), _mm256_unpacklo_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_24, _t0_26), _mm256_unpacklo_pd(_t0_28, _t0_29), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_30, _t0_32), _mm256_unpacklo_pd(_t0_34, _t0_35), 32)), 32);
  _t0_676 = _mm256_permute2f128_pd(_mm256_unpackhi_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_12, _t0_14), _mm256_unpacklo_pd(_t0_16, _t0_17), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_18, _t0_20), _mm256_unpacklo_pd(_t0_22, _t0_23), 32)), _mm256_unpackhi_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_24, _t0_26), _mm256_unpacklo_pd(_t0_28, _t0_29), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_30, _t0_32), _mm256_unpacklo_pd(_t0_34, _t0_35), 32)), 32);
  _t0_677 = _mm256_permute2f128_pd(_mm256_unpacklo_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_12, _t0_14), _mm256_unpacklo_pd(_t0_16, _t0_17), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_18, _t0_20), _mm256_unpacklo_pd(_t0_22, _t0_23), 32)), _mm256_unpacklo_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_24, _t0_26), _mm256_unpacklo_pd(_t0_28, _t0_29), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_30, _t0_32), _mm256_unpacklo_pd(_t0_34, _t0_35), 32)), 49);
  _t0_678 = _mm256_permute2f128_pd(_mm256_unpackhi_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_12, _t0_14), _mm256_unpacklo_pd(_t0_16, _t0_17), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_18, _t0_20), _mm256_unpacklo_pd(_t0_22, _t0_23), 32)), _mm256_unpackhi_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_24, _t0_26), _mm256_unpacklo_pd(_t0_28, _t0_29), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_30, _t0_32), _mm256_unpacklo_pd(_t0_34, _t0_35), 32)), 49);

  // 4-BLAC: 4x4 * 4x4
  _t0_118 = _mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_12, _t0_12, 32), _mm256_permute2f128_pd(_t0_12, _t0_12, 32), 0), _t0_675), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_14, _t0_14, 32), _mm256_permute2f128_pd(_t0_14, _t0_14, 32), 0), _t0_676)), _mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_16, _t0_16, 32), _mm256_permute2f128_pd(_t0_16, _t0_16, 32), 0), _t0_677), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_17, _t0_17, 32), _mm256_permute2f128_pd(_t0_17, _t0_17, 32), 0), _t0_678)));
  _t0_119 = _mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_18, _t0_18, 32), _mm256_permute2f128_pd(_t0_18, _t0_18, 32), 0), _t0_675), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_20, _t0_20, 32), _mm256_permute2f128_pd(_t0_20, _t0_20, 32), 0), _t0_676)), _mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_22, _t0_22, 32), _mm256_permute2f128_pd(_t0_22, _t0_22, 32), 0), _t0_677), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_23, _t0_23, 32), _mm256_permute2f128_pd(_t0_23, _t0_23, 32), 0), _t0_678)));
  _t0_120 = _mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_24, _t0_24, 32), _mm256_permute2f128_pd(_t0_24, _t0_24, 32), 0), _t0_675), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_26, _t0_26, 32), _mm256_permute2f128_pd(_t0_26, _t0_26, 32), 0), _t0_676)), _mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_28, _t0_28, 32), _mm256_permute2f128_pd(_t0_28, _t0_28, 32), 0), _t0_677), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_29, _t0_29, 32), _mm256_permute2f128_pd(_t0_29, _t0_29, 32), 0), _t0_678)));
  _t0_121 = _mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_30, _t0_30, 32), _mm256_permute2f128_pd(_t0_30, _t0_30, 32), 0), _t0_675), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_32, _t0_32, 32), _mm256_permute2f128_pd(_t0_32, _t0_32, 32), 0), _t0_676)), _mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_34, _t0_34, 32), _mm256_permute2f128_pd(_t0_34, _t0_34, 32), 0), _t0_677), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_35, _t0_35, 32), _mm256_permute2f128_pd(_t0_35, _t0_35, 32), 0), _t0_678)));

  // 4-BLAC: 4x4 - 4x4
  _t0_134 = _mm256_sub_pd(_t0_470, _t0_118);
  _t0_135 = _mm256_sub_pd(_t0_471, _t0_119);
  _t0_136 = _mm256_sub_pd(_t0_472, _t0_120);
  _t0_137 = _mm256_sub_pd(_t0_473, _t0_121);

  // AVX Storer:

  // 4x4 -> 4x4 - LowTriang
  _t0_60 = _t0_134;
  _t0_61 = _t0_135;
  _t0_62 = _t0_136;
  _t0_63 = _t0_137;

  // AVX Loader:

  // AVX Loader:

  // AVX Loader:

  // 4-BLAC: (4x4)^T
  _t0_679 = _mm256_permute2f128_pd(_mm256_unpacklo_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_12, _t0_14), _mm256_unpacklo_pd(_t0_16, _t0_17), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_18, _t0_20), _mm256_unpacklo_pd(_t0_22, _t0_23), 32)), _mm256_unpacklo_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_24, _t0_26), _mm256_unpacklo_pd(_t0_28, _t0_29), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_30, _t0_32), _mm256_unpacklo_pd(_t0_34, _t0_35), 32)), 32);
  _t0_680 = _mm256_permute2f128_pd(_mm256_unpackhi_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_12, _t0_14), _mm256_unpacklo_pd(_t0_16, _t0_17), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_18, _t0_20), _mm256_unpacklo_pd(_t0_22, _t0_23), 32)), _mm256_unpackhi_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_24, _t0_26), _mm256_unpacklo_pd(_t0_28, _t0_29), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_30, _t0_32), _mm256_unpacklo_pd(_t0_34, _t0_35), 32)), 32);
  _t0_681 = _mm256_permute2f128_pd(_mm256_unpacklo_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_12, _t0_14), _mm256_unpacklo_pd(_t0_16, _t0_17), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_18, _t0_20), _mm256_unpacklo_pd(_t0_22, _t0_23), 32)), _mm256_unpacklo_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_24, _t0_26), _mm256_unpacklo_pd(_t0_28, _t0_29), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_30, _t0_32), _mm256_unpacklo_pd(_t0_34, _t0_35), 32)), 49);
  _t0_682 = _mm256_permute2f128_pd(_mm256_unpackhi_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_12, _t0_14), _mm256_unpacklo_pd(_t0_16, _t0_17), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_18, _t0_20), _mm256_unpacklo_pd(_t0_22, _t0_23), 32)), _mm256_unpackhi_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_24, _t0_26), _mm256_unpacklo_pd(_t0_28, _t0_29), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_30, _t0_32), _mm256_unpacklo_pd(_t0_34, _t0_35), 32)), 49);

  // 4-BLAC: 4x4 * 4x4
  _t0_122 = _mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_36, _t0_36, 32), _mm256_permute2f128_pd(_t0_36, _t0_36, 32), 0), _t0_679), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_38, _t0_38, 32), _mm256_permute2f128_pd(_t0_38, _t0_38, 32), 0), _t0_680)), _mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_40, _t0_40, 32), _mm256_permute2f128_pd(_t0_40, _t0_40, 32), 0), _t0_681), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_41, _t0_41, 32), _mm256_permute2f128_pd(_t0_41, _t0_41, 32), 0), _t0_682)));
  _t0_123 = _mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_42, _t0_42, 32), _mm256_permute2f128_pd(_t0_42, _t0_42, 32), 0), _t0_679), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_44, _t0_44, 32), _mm256_permute2f128_pd(_t0_44, _t0_44, 32), 0), _t0_680)), _mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_46, _t0_46, 32), _mm256_permute2f128_pd(_t0_46, _t0_46, 32), 0), _t0_681), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_47, _t0_47, 32), _mm256_permute2f128_pd(_t0_47, _t0_47, 32), 0), _t0_682)));
  _t0_124 = _mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_48, _t0_48, 32), _mm256_permute2f128_pd(_t0_48, _t0_48, 32), 0), _t0_679), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_50, _t0_50, 32), _mm256_permute2f128_pd(_t0_50, _t0_50, 32), 0), _t0_680)), _mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_52, _t0_52, 32), _mm256_permute2f128_pd(_t0_52, _t0_52, 32), 0), _t0_681), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_53, _t0_53, 32), _mm256_permute2f128_pd(_t0_53, _t0_53, 32), 0), _t0_682)));
  _t0_125 = _mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_54, _t0_54, 32), _mm256_permute2f128_pd(_t0_54, _t0_54, 32), 0), _t0_679), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_56, _t0_56, 32), _mm256_permute2f128_pd(_t0_56, _t0_56, 32), 0), _t0_680)), _mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_58, _t0_58, 32), _mm256_permute2f128_pd(_t0_58, _t0_58, 32), 0), _t0_681), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_59, _t0_59, 32), _mm256_permute2f128_pd(_t0_59, _t0_59, 32), 0), _t0_682)));

  // 4-BLAC: 4x4 - 4x4
  _t0_138 = _mm256_sub_pd(_t0_138, _t0_122);
  _t0_139 = _mm256_sub_pd(_t0_139, _t0_123);
  _t0_140 = _mm256_sub_pd(_t0_140, _t0_124);
  _t0_141 = _mm256_sub_pd(_t0_141, _t0_125);

  // AVX Storer:

  // AVX Loader:

  // 4x4 -> 4x4 - LowTriang
  _t0_474 = _t0_64;
  _t0_475 = _t0_65;
  _t0_476 = _t0_66;
  _t0_477 = _t0_67;

  // AVX Loader:

  // AVX Loader:

  // 4-BLAC: (4x4)^T
  _t0_683 = _mm256_permute2f128_pd(_mm256_unpacklo_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_36, _t0_38), _mm256_unpacklo_pd(_t0_40, _t0_41), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_42, _t0_44), _mm256_unpacklo_pd(_t0_46, _t0_47), 32)), _mm256_unpacklo_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_48, _t0_50), _mm256_unpacklo_pd(_t0_52, _t0_53), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_54, _t0_56), _mm256_unpacklo_pd(_t0_58, _t0_59), 32)), 32);
  _t0_684 = _mm256_permute2f128_pd(_mm256_unpackhi_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_36, _t0_38), _mm256_unpacklo_pd(_t0_40, _t0_41), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_42, _t0_44), _mm256_unpacklo_pd(_t0_46, _t0_47), 32)), _mm256_unpackhi_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_48, _t0_50), _mm256_unpacklo_pd(_t0_52, _t0_53), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_54, _t0_56), _mm256_unpacklo_pd(_t0_58, _t0_59), 32)), 32);
  _t0_685 = _mm256_permute2f128_pd(_mm256_unpacklo_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_36, _t0_38), _mm256_unpacklo_pd(_t0_40, _t0_41), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_42, _t0_44), _mm256_unpacklo_pd(_t0_46, _t0_47), 32)), _mm256_unpacklo_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_48, _t0_50), _mm256_unpacklo_pd(_t0_52, _t0_53), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_54, _t0_56), _mm256_unpacklo_pd(_t0_58, _t0_59), 32)), 49);
  _t0_686 = _mm256_permute2f128_pd(_mm256_unpackhi_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_36, _t0_38), _mm256_unpacklo_pd(_t0_40, _t0_41), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_42, _t0_44), _mm256_unpacklo_pd(_t0_46, _t0_47), 32)), _mm256_unpackhi_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_48, _t0_50), _mm256_unpacklo_pd(_t0_52, _t0_53), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_54, _t0_56), _mm256_unpacklo_pd(_t0_58, _t0_59), 32)), 49);

  // 4-BLAC: 4x4 * 4x4
  _t0_126 = _mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_36, _t0_36, 32), _mm256_permute2f128_pd(_t0_36, _t0_36, 32), 0), _t0_683), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_38, _t0_38, 32), _mm256_permute2f128_pd(_t0_38, _t0_38, 32), 0), _t0_684)), _mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_40, _t0_40, 32), _mm256_permute2f128_pd(_t0_40, _t0_40, 32), 0), _t0_685), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_41, _t0_41, 32), _mm256_permute2f128_pd(_t0_41, _t0_41, 32), 0), _t0_686)));
  _t0_127 = _mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_42, _t0_42, 32), _mm256_permute2f128_pd(_t0_42, _t0_42, 32), 0), _t0_683), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_44, _t0_44, 32), _mm256_permute2f128_pd(_t0_44, _t0_44, 32), 0), _t0_684)), _mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_46, _t0_46, 32), _mm256_permute2f128_pd(_t0_46, _t0_46, 32), 0), _t0_685), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_47, _t0_47, 32), _mm256_permute2f128_pd(_t0_47, _t0_47, 32), 0), _t0_686)));
  _t0_128 = _mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_48, _t0_48, 32), _mm256_permute2f128_pd(_t0_48, _t0_48, 32), 0), _t0_683), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_50, _t0_50, 32), _mm256_permute2f128_pd(_t0_50, _t0_50, 32), 0), _t0_684)), _mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_52, _t0_52, 32), _mm256_permute2f128_pd(_t0_52, _t0_52, 32), 0), _t0_685), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_53, _t0_53, 32), _mm256_permute2f128_pd(_t0_53, _t0_53, 32), 0), _t0_686)));
  _t0_129 = _mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_54, _t0_54, 32), _mm256_permute2f128_pd(_t0_54, _t0_54, 32), 0), _t0_683), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_56, _t0_56, 32), _mm256_permute2f128_pd(_t0_56, _t0_56, 32), 0), _t0_684)), _mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_58, _t0_58, 32), _mm256_permute2f128_pd(_t0_58, _t0_58, 32), 0), _t0_685), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_59, _t0_59, 32), _mm256_permute2f128_pd(_t0_59, _t0_59, 32), 0), _t0_686)));

  // 4-BLAC: 4x4 - 4x4
  _t0_142 = _mm256_sub_pd(_t0_474, _t0_126);
  _t0_143 = _mm256_sub_pd(_t0_475, _t0_127);
  _t0_144 = _mm256_sub_pd(_t0_476, _t0_128);
  _t0_145 = _mm256_sub_pd(_t0_477, _t0_129);

  // AVX Storer:

  // 4x4 -> 4x4 - LowTriang
  _t0_64 = _t0_142;
  _t0_65 = _t0_143;
  _t0_66 = _t0_144;
  _t0_67 = _t0_145;

  // Generating : L[12,12] = S(h(1, 12, 4), Sqrt( G(h(1, 12, 4), L[12,12],h(1, 12, 4)) ),h(1, 12, 4))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_479 = _t0_60;

  // 4-BLAC: sqrt(1x4)
  _t0_480 = _mm256_castpd128_pd256(_mm_sqrt_pd(_mm256_castpd256_pd128(_t0_479)));

  // AVX Storer:
  _t0_60 = _t0_480;

  // Generating : T1442[1,12] = S(h(1, 1, 0), ( G(h(1, 1, 0), 1[1,1],h(1, 1, 0)) Div G(h(1, 12, 4), L[12,12],h(1, 12, 4)) ),h(1, 12, 4))

  // AVX Loader:

  // Constant 1x1 -> 1x4
  _t0_481 = _mm256_set_pd(0, 0, 0, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_482 = _t0_60;

  // 4-BLAC: 1x4 / 1x4
  _t0_483 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_481), _mm256_castpd256_pd128(_t0_482)));

  // AVX Storer:
  _t0_68 = _t0_483;

  // Generating : L[12,12] = S(h(3, 12, 5), ( G(h(1, 1, 0), T1442[1,12],h(1, 12, 4)) Kro G(h(3, 12, 5), L[12,12],h(1, 12, 4)) ),h(1, 12, 4))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_484 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_68, _t0_68, 32), _mm256_permute2f128_pd(_t0_68, _t0_68, 32), 0);

  // AVX Loader:

  // 3x1 -> 4x1
  _t0_485 = _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_61, _t0_62), _mm256_unpacklo_pd(_t0_63, _mm256_setzero_pd()), 32);

  // 4-BLAC: 1x4 Kro 4x1
  _t0_486 = _mm256_mul_pd(_t0_484, _t0_485);

  // AVX Storer:
  _t0_69 = _t0_486;

  // Generating : L[12,12] = S(h(3, 12, 5), ( G(h(3, 12, 5), L[12,12],h(3, 12, 5)) - ( G(h(3, 12, 5), L[12,12],h(1, 12, 4)) * T( G(h(3, 12, 5), L[12,12],h(1, 12, 4)) ) ) ),h(3, 12, 5))

  // AVX Loader:

  // 3x3 -> 4x4 - LowTriang
  _t0_487 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_61, 2), _mm256_setzero_pd());
  _t0_488 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_62, 6), _mm256_permute2f128_pd(_t0_62, _t0_62, 129), 5);
  _t0_489 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_63, 14), _mm256_permute2f128_pd(_t0_63, _t0_63, 129), 5);
  _t0_490 = _mm256_setzero_pd();

  // AVX Loader:

  // 3x1 -> 4x1
  _t0_491 = _t0_69;

  // AVX Loader:

  // 3x1 -> 4x1
  _t0_492 = _t0_69;

  // 4-BLAC: (4x1)^T
  _t0_493 = _t0_492;

  // 4-BLAC: 4x1 * 1x4
  _t0_494 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_491, _t0_491, 32), _mm256_permute2f128_pd(_t0_491, _t0_491, 32), 0), _t0_493);
  _t0_495 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_491, _t0_491, 32), _mm256_permute2f128_pd(_t0_491, _t0_491, 32), 15), _t0_493);
  _t0_496 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_491, _t0_491, 49), _mm256_permute2f128_pd(_t0_491, _t0_491, 49), 0), _t0_493);
  _t0_497 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_491, _t0_491, 49), _mm256_permute2f128_pd(_t0_491, _t0_491, 49), 15), _t0_493);

  // 4-BLAC: 4x4 - 4x4
  _t0_499 = _mm256_sub_pd(_t0_487, _t0_494);
  _t0_500 = _mm256_sub_pd(_t0_488, _t0_495);
  _t0_501 = _mm256_sub_pd(_t0_489, _t0_496);
  _t0_502 = _mm256_sub_pd(_t0_490, _t0_497);

  // AVX Storer:

  // 4x4 -> 3x3 - LowTriang
  _t0_70 = _t0_499;
  _t0_71 = _t0_500;
  _t0_72 = _t0_501;

  // Generating : L[12,12] = S(h(1, 12, 5), Sqrt( G(h(1, 12, 5), L[12,12],h(1, 12, 5)) ),h(1, 12, 5))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_503 = _t0_70;

  // 4-BLAC: sqrt(1x4)
  _t0_504 = _mm256_castpd128_pd256(_mm_sqrt_pd(_mm256_castpd256_pd128(_t0_503)));

  // AVX Storer:
  _t0_70 = _t0_504;

  // Generating : T1442[1,12] = S(h(1, 1, 0), ( G(h(1, 1, 0), 1[1,1],h(1, 1, 0)) Div G(h(1, 12, 5), L[12,12],h(1, 12, 5)) ),h(1, 12, 5))

  // AVX Loader:

  // Constant 1x1 -> 1x4
  _t0_505 = _mm256_set_pd(0, 0, 0, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_506 = _t0_70;

  // 4-BLAC: 1x4 / 1x4
  _t0_508 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_505), _mm256_castpd256_pd128(_t0_506)));

  // AVX Storer:
  _t0_73 = _t0_508;

  // Generating : L[12,12] = S(h(2, 12, 6), ( G(h(1, 1, 0), T1442[1,12],h(1, 12, 5)) Kro G(h(2, 12, 6), L[12,12],h(1, 12, 5)) ),h(1, 12, 5))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_509 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_73, _t0_73, 32), _mm256_permute2f128_pd(_t0_73, _t0_73, 32), 0);

  // AVX Loader:

  // 2x1 -> 4x1
  _t0_510 = _mm256_blend_pd(_mm256_unpacklo_pd(_t0_71, _t0_72), _mm256_setzero_pd(), 12);

  // 4-BLAC: 1x4 Kro 4x1
  _t0_511 = _mm256_mul_pd(_t0_509, _t0_510);

  // AVX Storer:
  _t0_74 = _t0_511;

  // Generating : L[12,12] = S(h(2, 12, 6), ( G(h(2, 12, 6), L[12,12],h(2, 12, 6)) - ( G(h(2, 12, 6), L[12,12],h(1, 12, 5)) * T( G(h(2, 12, 6), L[12,12],h(1, 12, 5)) ) ) ),h(2, 12, 6))

  // AVX Loader:

  // 2x2 -> 4x4 - LowTriang
  _t0_512 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_71, 2), _mm256_setzero_pd());
  _t0_513 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_72, 6), _mm256_permute2f128_pd(_t0_72, _t0_72, 129), 5);
  _t0_514 = _mm256_setzero_pd();
  _t0_515 = _mm256_setzero_pd();

  // AVX Loader:

  // 2x1 -> 4x1
  _t0_516 = _t0_74;

  // AVX Loader:

  // 2x1 -> 4x1
  _t0_517 = _t0_74;

  // 4-BLAC: (4x1)^T
  _t0_518 = _t0_517;

  // 4-BLAC: 4x1 * 1x4
  _t0_519 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_516, _t0_516, 32), _mm256_permute2f128_pd(_t0_516, _t0_516, 32), 0), _t0_518);
  _t0_520 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_516, _t0_516, 32), _mm256_permute2f128_pd(_t0_516, _t0_516, 32), 15), _t0_518);
  _t0_521 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_516, _t0_516, 49), _mm256_permute2f128_pd(_t0_516, _t0_516, 49), 0), _t0_518);
  _t0_522 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_516, _t0_516, 49), _mm256_permute2f128_pd(_t0_516, _t0_516, 49), 15), _t0_518);

  // 4-BLAC: 4x4 - 4x4
  _t0_523 = _mm256_sub_pd(_t0_512, _t0_519);
  _t0_524 = _mm256_sub_pd(_t0_513, _t0_520);
  _t0_525 = _mm256_sub_pd(_t0_514, _t0_521);
  _t0_526 = _mm256_sub_pd(_t0_515, _t0_522);

  // AVX Storer:

  // 4x4 -> 2x2 - LowTriang
  _t0_75 = _t0_523;
  _t0_76 = _t0_524;

  // Generating : L[12,12] = S(h(1, 12, 6), Sqrt( G(h(1, 12, 6), L[12,12],h(1, 12, 6)) ),h(1, 12, 6))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_527 = _t0_75;

  // 4-BLAC: sqrt(1x4)
  _t0_528 = _mm256_castpd128_pd256(_mm_sqrt_pd(_mm256_castpd256_pd128(_t0_527)));

  // AVX Storer:
  _t0_75 = _t0_528;

  // Generating : L[12,12] = S(h(1, 12, 7), ( G(h(1, 12, 7), L[12,12],h(1, 12, 6)) Div G(h(1, 12, 6), L[12,12],h(1, 12, 6)) ),h(1, 12, 6))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_530 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_76, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_531 = _t0_75;

  // 4-BLAC: 1x4 / 1x4
  _t0_532 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_530), _mm256_castpd256_pd128(_t0_531)));

  // AVX Storer:
  _t0_77 = _t0_532;

  // Generating : L[12,12] = S(h(1, 12, 7), ( G(h(1, 12, 7), L[12,12],h(1, 12, 7)) - ( G(h(1, 12, 7), L[12,12],h(1, 12, 6)) Kro T( G(h(1, 12, 7), L[12,12],h(1, 12, 6)) ) ) ),h(1, 12, 7))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_533 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_76, 2), _mm256_setzero_pd());

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_534 = _t0_77;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_535 = _t0_77;

  // 4-BLAC: (4x1)^T
  _t0_536 = _t0_535;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_537 = _mm256_mul_pd(_t0_534, _t0_536);

  // 4-BLAC: 1x4 - 1x4
  _t0_538 = _mm256_sub_pd(_t0_533, _t0_537);

  // AVX Storer:
  _t0_78 = _t0_538;

  // Generating : L[12,12] = S(h(1, 12, 7), Sqrt( G(h(1, 12, 7), L[12,12],h(1, 12, 7)) ),h(1, 12, 7))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_539 = _t0_78;

  // 4-BLAC: sqrt(1x4)
  _t0_540 = _mm256_castpd128_pd256(_mm_sqrt_pd(_mm256_castpd256_pd128(_t0_539)));

  // AVX Storer:
  _t0_78 = _t0_540;

  // Generating : L[12,12] = S(h(1, 12, 8), ( G(h(1, 12, 8), L[12,12],h(1, 12, 4)) Div G(h(1, 12, 4), L[12,12],h(1, 12, 4)) ),h(1, 12, 4))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_541 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_138, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_542 = _t0_60;

  // 4-BLAC: 1x4 / 1x4
  _t0_543 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_541), _mm256_castpd256_pd128(_t0_542)));

  // AVX Storer:
  _t0_79 = _t0_543;

  // Generating : L[12,12] = S(h(1, 12, 8), ( G(h(1, 12, 8), L[12,12],h(3, 12, 5)) - ( G(h(1, 12, 8), L[12,12],h(1, 12, 4)) Kro T( G(h(3, 12, 5), L[12,12],h(1, 12, 4)) ) ) ),h(3, 12, 5))

  // AVX Loader:

  // 1x3 -> 1x4
  _t0_548 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_138, 14), _mm256_permute2f128_pd(_t0_138, _t0_138, 129), 5);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_549 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_79, _t0_79, 32), _mm256_permute2f128_pd(_t0_79, _t0_79, 32), 0);

  // AVX Loader:

  // 3x1 -> 4x1
  _t0_550 = _t0_69;

  // 4-BLAC: (4x1)^T
  _t0_551 = _t0_550;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_552 = _mm256_mul_pd(_t0_549, _t0_551);

  // 4-BLAC: 1x4 - 1x4
  _t0_554 = _mm256_sub_pd(_t0_548, _t0_552);

  // AVX Storer:
  _t0_80 = _t0_554;

  // Generating : L[12,12] = S(h(1, 12, 8), ( G(h(1, 12, 8), L[12,12],h(1, 12, 5)) Div G(h(1, 12, 5), L[12,12],h(1, 12, 5)) ),h(1, 12, 5))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_555 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_80, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_556 = _t0_70;

  // 4-BLAC: 1x4 / 1x4
  _t0_557 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_555), _mm256_castpd256_pd128(_t0_556)));

  // AVX Storer:
  _t0_81 = _t0_557;

  // Generating : L[12,12] = S(h(1, 12, 8), ( G(h(1, 12, 8), L[12,12],h(2, 12, 6)) - ( G(h(1, 12, 8), L[12,12],h(1, 12, 5)) Kro T( G(h(2, 12, 6), L[12,12],h(1, 12, 5)) ) ) ),h(2, 12, 6))

  // AVX Loader:

  // 1x2 -> 1x4
  _t0_559 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_80, 6), _mm256_permute2f128_pd(_t0_80, _t0_80, 129), 5);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_560 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_81, _t0_81, 32), _mm256_permute2f128_pd(_t0_81, _t0_81, 32), 0);

  // AVX Loader:

  // 2x1 -> 4x1
  _t0_561 = _t0_74;

  // 4-BLAC: (4x1)^T
  _t0_562 = _t0_561;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_563 = _mm256_mul_pd(_t0_560, _t0_562);

  // 4-BLAC: 1x4 - 1x4
  _t0_564 = _mm256_sub_pd(_t0_559, _t0_563);

  // AVX Storer:
  _t0_82 = _t0_564;

  // Generating : L[12,12] = S(h(1, 12, 8), ( G(h(1, 12, 8), L[12,12],h(1, 12, 6)) Div G(h(1, 12, 6), L[12,12],h(1, 12, 6)) ),h(1, 12, 6))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_565 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_82, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_566 = _t0_75;

  // 4-BLAC: 1x4 / 1x4
  _t0_567 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_565), _mm256_castpd256_pd128(_t0_566)));

  // AVX Storer:
  _t0_83 = _t0_567;

  // Generating : L[12,12] = S(h(1, 12, 8), ( G(h(1, 12, 8), L[12,12],h(1, 12, 7)) - ( G(h(1, 12, 8), L[12,12],h(1, 12, 6)) Kro T( G(h(1, 12, 7), L[12,12],h(1, 12, 6)) ) ) ),h(1, 12, 7))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_569 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_82, 2), _mm256_setzero_pd());

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_570 = _t0_83;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_571 = _t0_77;

  // 4-BLAC: (4x1)^T
  _t0_572 = _t0_571;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_573 = _mm256_mul_pd(_t0_570, _t0_572);

  // 4-BLAC: 1x4 - 1x4
  _t0_574 = _mm256_sub_pd(_t0_569, _t0_573);

  // AVX Storer:
  _t0_84 = _t0_574;

  // Generating : L[12,12] = S(h(1, 12, 8), ( G(h(1, 12, 8), L[12,12],h(1, 12, 7)) Div G(h(1, 12, 7), L[12,12],h(1, 12, 7)) ),h(1, 12, 7))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_575 = _t0_84;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_576 = _t0_78;

  // 4-BLAC: 1x4 / 1x4
  _t0_577 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_575), _mm256_castpd256_pd128(_t0_576)));

  // AVX Storer:
  _t0_84 = _t0_577;

  // Generating : L[12,12] = S(h(1, 12, 9), ( G(h(1, 12, 9), L[12,12],h(1, 12, 4)) Div G(h(1, 12, 4), L[12,12],h(1, 12, 4)) ),h(1, 12, 4))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_578 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_139, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_579 = _t0_60;

  // 4-BLAC: 1x4 / 1x4
  _t0_580 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_578), _mm256_castpd256_pd128(_t0_579)));

  // AVX Storer:
  _t0_85 = _t0_580;

  // Generating : L[12,12] = S(h(1, 12, 9), ( G(h(1, 12, 9), L[12,12],h(3, 12, 5)) - ( G(h(1, 12, 9), L[12,12],h(1, 12, 4)) Kro T( G(h(3, 12, 5), L[12,12],h(1, 12, 4)) ) ) ),h(3, 12, 5))

  // AVX Loader:

  // 1x3 -> 1x4
  _t0_581 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_139, 14), _mm256_permute2f128_pd(_t0_139, _t0_139, 129), 5);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_586 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_85, _t0_85, 32), _mm256_permute2f128_pd(_t0_85, _t0_85, 32), 0);

  // AVX Loader:

  // 3x1 -> 4x1
  _t0_587 = _t0_69;

  // 4-BLAC: (4x1)^T
  _t0_588 = _t0_587;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_589 = _mm256_mul_pd(_t0_586, _t0_588);

  // 4-BLAC: 1x4 - 1x4
  _t0_590 = _mm256_sub_pd(_t0_581, _t0_589);

  // AVX Storer:
  _t0_86 = _t0_590;

  // Generating : L[12,12] = S(h(1, 12, 9), ( G(h(1, 12, 9), L[12,12],h(1, 12, 5)) Div G(h(1, 12, 5), L[12,12],h(1, 12, 5)) ),h(1, 12, 5))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_591 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_86, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_592 = _t0_70;

  // 4-BLAC: 1x4 / 1x4
  _t0_593 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_591), _mm256_castpd256_pd128(_t0_592)));

  // AVX Storer:
  _t0_87 = _t0_593;

  // Generating : L[12,12] = S(h(1, 12, 9), ( G(h(1, 12, 9), L[12,12],h(2, 12, 6)) - ( G(h(1, 12, 9), L[12,12],h(1, 12, 5)) Kro T( G(h(2, 12, 6), L[12,12],h(1, 12, 5)) ) ) ),h(2, 12, 6))

  // AVX Loader:

  // 1x2 -> 1x4
  _t0_594 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_86, 6), _mm256_permute2f128_pd(_t0_86, _t0_86, 129), 5);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_595 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_87, _t0_87, 32), _mm256_permute2f128_pd(_t0_87, _t0_87, 32), 0);

  // AVX Loader:

  // 2x1 -> 4x1
  _t0_596 = _t0_74;

  // 4-BLAC: (4x1)^T
  _t0_597 = _t0_596;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_598 = _mm256_mul_pd(_t0_595, _t0_597);

  // 4-BLAC: 1x4 - 1x4
  _t0_599 = _mm256_sub_pd(_t0_594, _t0_598);

  // AVX Storer:
  _t0_88 = _t0_599;

  // Generating : L[12,12] = S(h(1, 12, 9), ( G(h(1, 12, 9), L[12,12],h(1, 12, 6)) Div G(h(1, 12, 6), L[12,12],h(1, 12, 6)) ),h(1, 12, 6))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_604 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_88, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_605 = _t0_75;

  // 4-BLAC: 1x4 / 1x4
  _t0_606 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_604), _mm256_castpd256_pd128(_t0_605)));

  // AVX Storer:
  _t0_89 = _t0_606;

  // Generating : L[12,12] = S(h(1, 12, 9), ( G(h(1, 12, 9), L[12,12],h(1, 12, 7)) - ( G(h(1, 12, 9), L[12,12],h(1, 12, 6)) Kro T( G(h(1, 12, 7), L[12,12],h(1, 12, 6)) ) ) ),h(1, 12, 7))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_607 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_88, 2), _mm256_setzero_pd());

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_608 = _t0_89;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_609 = _t0_77;

  // 4-BLAC: (4x1)^T
  _t0_610 = _t0_609;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_611 = _mm256_mul_pd(_t0_608, _t0_610);

  // 4-BLAC: 1x4 - 1x4
  _t0_612 = _mm256_sub_pd(_t0_607, _t0_611);

  // AVX Storer:
  _t0_90 = _t0_612;

  // Generating : L[12,12] = S(h(1, 12, 9), ( G(h(1, 12, 9), L[12,12],h(1, 12, 7)) Div G(h(1, 12, 7), L[12,12],h(1, 12, 7)) ),h(1, 12, 7))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_613 = _t0_90;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_614 = _t0_78;

  // 4-BLAC: 1x4 / 1x4
  _t0_615 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_613), _mm256_castpd256_pd128(_t0_614)));

  // AVX Storer:
  _t0_90 = _t0_615;

  // Generating : L[12,12] = S(h(1, 12, 10), ( G(h(1, 12, 10), L[12,12],h(1, 12, 4)) Div G(h(1, 12, 4), L[12,12],h(1, 12, 4)) ),h(1, 12, 4))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_616 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_140, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_618 = _t0_60;

  // 4-BLAC: 1x4 / 1x4
  _t0_619 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_616), _mm256_castpd256_pd128(_t0_618)));

  // AVX Storer:
  _t0_91 = _t0_619;

  // Generating : L[12,12] = S(h(1, 12, 10), ( G(h(1, 12, 10), L[12,12],h(3, 12, 5)) - ( G(h(1, 12, 10), L[12,12],h(1, 12, 4)) Kro T( G(h(3, 12, 5), L[12,12],h(1, 12, 4)) ) ) ),h(3, 12, 5))

  // AVX Loader:

  // 1x3 -> 1x4
  _t0_620 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_140, 14), _mm256_permute2f128_pd(_t0_140, _t0_140, 129), 5);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_621 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_91, _t0_91, 32), _mm256_permute2f128_pd(_t0_91, _t0_91, 32), 0);

  // AVX Loader:

  // 3x1 -> 4x1
  _t0_622 = _t0_69;

  // 4-BLAC: (4x1)^T
  _t0_623 = _t0_622;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_624 = _mm256_mul_pd(_t0_621, _t0_623);

  // 4-BLAC: 1x4 - 1x4
  _t0_625 = _mm256_sub_pd(_t0_620, _t0_624);

  // AVX Storer:
  _t0_92 = _t0_625;

  // Generating : L[12,12] = S(h(1, 12, 10), ( G(h(1, 12, 10), L[12,12],h(1, 12, 5)) Div G(h(1, 12, 5), L[12,12],h(1, 12, 5)) ),h(1, 12, 5))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_626 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_92, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_628 = _t0_70;

  // 4-BLAC: 1x4 / 1x4
  _t0_629 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_626), _mm256_castpd256_pd128(_t0_628)));

  // AVX Storer:
  _t0_93 = _t0_629;

  // Generating : L[12,12] = S(h(1, 12, 10), ( G(h(1, 12, 10), L[12,12],h(2, 12, 6)) - ( G(h(1, 12, 10), L[12,12],h(1, 12, 5)) Kro T( G(h(2, 12, 6), L[12,12],h(1, 12, 5)) ) ) ),h(2, 12, 6))

  // AVX Loader:

  // 1x2 -> 1x4
  _t0_630 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_92, 6), _mm256_permute2f128_pd(_t0_92, _t0_92, 129), 5);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_631 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_93, _t0_93, 32), _mm256_permute2f128_pd(_t0_93, _t0_93, 32), 0);

  // AVX Loader:

  // 2x1 -> 4x1
  _t0_632 = _t0_74;

  // 4-BLAC: (4x1)^T
  _t0_633 = _t0_632;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_634 = _mm256_mul_pd(_t0_631, _t0_633);

  // 4-BLAC: 1x4 - 1x4
  _t0_635 = _mm256_sub_pd(_t0_630, _t0_634);

  // AVX Storer:
  _t0_94 = _t0_635;

  // Generating : L[12,12] = S(h(1, 12, 10), ( G(h(1, 12, 10), L[12,12],h(1, 12, 6)) Div G(h(1, 12, 6), L[12,12],h(1, 12, 6)) ),h(1, 12, 6))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_636 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_94, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_637 = _t0_75;

  // 4-BLAC: 1x4 / 1x4
  _t0_638 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_636), _mm256_castpd256_pd128(_t0_637)));

  // AVX Storer:
  _t0_95 = _t0_638;

  // Generating : L[12,12] = S(h(1, 12, 10), ( G(h(1, 12, 10), L[12,12],h(1, 12, 7)) - ( G(h(1, 12, 10), L[12,12],h(1, 12, 6)) Kro T( G(h(1, 12, 7), L[12,12],h(1, 12, 6)) ) ) ),h(1, 12, 7))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_639 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_94, 2), _mm256_setzero_pd());

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_640 = _t0_95;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_641 = _t0_77;

  // 4-BLAC: (4x1)^T
  _t0_643 = _t0_641;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_644 = _mm256_mul_pd(_t0_640, _t0_643);

  // 4-BLAC: 1x4 - 1x4
  _t0_645 = _mm256_sub_pd(_t0_639, _t0_644);

  // AVX Storer:
  _t0_96 = _t0_645;

  // Generating : L[12,12] = S(h(1, 12, 10), ( G(h(1, 12, 10), L[12,12],h(1, 12, 7)) Div G(h(1, 12, 7), L[12,12],h(1, 12, 7)) ),h(1, 12, 7))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_646 = _t0_96;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_648 = _t0_78;

  // 4-BLAC: 1x4 / 1x4
  _t0_649 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_646), _mm256_castpd256_pd128(_t0_648)));

  // AVX Storer:
  _t0_96 = _t0_649;

  // Generating : L[12,12] = S(h(1, 12, 11), ( G(h(1, 12, 11), L[12,12],h(1, 12, 4)) Div G(h(1, 12, 4), L[12,12],h(1, 12, 4)) ),h(1, 12, 4))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_650 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_141, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_651 = _t0_60;

  // 4-BLAC: 1x4 / 1x4
  _t0_652 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_650), _mm256_castpd256_pd128(_t0_651)));

  // AVX Storer:
  _t0_97 = _t0_652;

  // Generating : L[12,12] = S(h(1, 12, 11), ( G(h(1, 12, 11), L[12,12],h(3, 12, 5)) - ( G(h(1, 12, 11), L[12,12],h(1, 12, 4)) Kro T( G(h(3, 12, 5), L[12,12],h(1, 12, 4)) ) ) ),h(3, 12, 5))

  // AVX Loader:

  // 1x3 -> 1x4
  _t0_653 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_141, 14), _mm256_permute2f128_pd(_t0_141, _t0_141, 129), 5);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_654 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_97, _t0_97, 32), _mm256_permute2f128_pd(_t0_97, _t0_97, 32), 0);

  // AVX Loader:

  // 3x1 -> 4x1
  _t0_655 = _t0_69;

  // 4-BLAC: (4x1)^T
  _t0_656 = _t0_655;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_657 = _mm256_mul_pd(_t0_654, _t0_656);

  // 4-BLAC: 1x4 - 1x4
  _t0_658 = _mm256_sub_pd(_t0_653, _t0_657);

  // AVX Storer:
  _t0_98 = _t0_658;

  // Generating : L[12,12] = S(h(1, 12, 11), ( G(h(1, 12, 11), L[12,12],h(1, 12, 5)) Div G(h(1, 12, 5), L[12,12],h(1, 12, 5)) ),h(1, 12, 5))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_659 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_98, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_660 = _t0_70;

  // 4-BLAC: 1x4 / 1x4
  _t0_662 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_659), _mm256_castpd256_pd128(_t0_660)));

  // AVX Storer:
  _t0_99 = _t0_662;

  // Generating : L[12,12] = S(h(1, 12, 11), ( G(h(1, 12, 11), L[12,12],h(2, 12, 6)) - ( G(h(1, 12, 11), L[12,12],h(1, 12, 5)) Kro T( G(h(2, 12, 6), L[12,12],h(1, 12, 5)) ) ) ),h(2, 12, 6))

  // AVX Loader:

  // 1x2 -> 1x4
  _t0_663 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_98, 6), _mm256_permute2f128_pd(_t0_98, _t0_98, 129), 5);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_664 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_99, _t0_99, 32), _mm256_permute2f128_pd(_t0_99, _t0_99, 32), 0);

  // AVX Loader:

  // 2x1 -> 4x1
  _t0_665 = _t0_74;

  // 4-BLAC: (4x1)^T
  _t0_666 = _t0_665;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_667 = _mm256_mul_pd(_t0_664, _t0_666);

  // 4-BLAC: 1x4 - 1x4
  _t0_668 = _mm256_sub_pd(_t0_663, _t0_667);

  // AVX Storer:
  _t0_100 = _t0_668;

  // Generating : L[12,12] = S(h(1, 12, 11), ( G(h(1, 12, 11), L[12,12],h(1, 12, 6)) Div G(h(1, 12, 6), L[12,12],h(1, 12, 6)) ),h(1, 12, 6))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_669 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_100, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_670 = _t0_75;

  // 4-BLAC: 1x4 / 1x4
  _t0_146 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_669), _mm256_castpd256_pd128(_t0_670)));

  // AVX Storer:
  _t0_101 = _t0_146;

  // Generating : L[12,12] = S(h(1, 12, 11), ( G(h(1, 12, 11), L[12,12],h(1, 12, 7)) - ( G(h(1, 12, 11), L[12,12],h(1, 12, 6)) Kro T( G(h(1, 12, 7), L[12,12],h(1, 12, 6)) ) ) ),h(1, 12, 7))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_147 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_100, 2), _mm256_setzero_pd());

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_148 = _t0_101;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_149 = _t0_77;

  // 4-BLAC: (4x1)^T
  _t0_150 = _t0_149;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_152 = _mm256_mul_pd(_t0_148, _t0_150);

  // 4-BLAC: 1x4 - 1x4
  _t0_153 = _mm256_sub_pd(_t0_147, _t0_152);

  // AVX Storer:
  _t0_102 = _t0_153;

  // Generating : L[12,12] = S(h(1, 12, 11), ( G(h(1, 12, 11), L[12,12],h(1, 12, 7)) Div G(h(1, 12, 7), L[12,12],h(1, 12, 7)) ),h(1, 12, 7))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_154 = _t0_102;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_155 = _t0_78;

  // 4-BLAC: 1x4 / 1x4
  _t0_157 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_154), _mm256_castpd256_pd128(_t0_155)));

  // AVX Storer:
  _t0_102 = _t0_157;

  // Generating : L[12,12] = S(h(4, 12, 8), ( G(h(4, 12, 8), L[12,12],h(4, 12, 8)) - ( G(h(4, 12, 8), L[12,12],h(4, 12, 4)) * T( G(h(4, 12, 8), L[12,12],h(4, 12, 4)) ) ) ),h(4, 12, 8))

  // AVX Loader:

  // 4x4 -> 4x4 - LowTriang
  _t0_158 = _t0_64;
  _t0_159 = _t0_65;
  _t0_160 = _t0_66;
  _t0_161 = _t0_67;

  // AVX Loader:

  // AVX Loader:

  // 4-BLAC: (4x4)^T
  _t0_671 = _mm256_permute2f128_pd(_mm256_unpacklo_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_79, _t0_81), _mm256_unpacklo_pd(_t0_83, _t0_84), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_85, _t0_87), _mm256_unpacklo_pd(_t0_89, _t0_90), 32)), _mm256_unpacklo_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_91, _t0_93), _mm256_unpacklo_pd(_t0_95, _t0_96), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_97, _t0_99), _mm256_unpacklo_pd(_t0_101, _t0_102), 32)), 32);
  _t0_672 = _mm256_permute2f128_pd(_mm256_unpackhi_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_79, _t0_81), _mm256_unpacklo_pd(_t0_83, _t0_84), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_85, _t0_87), _mm256_unpacklo_pd(_t0_89, _t0_90), 32)), _mm256_unpackhi_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_91, _t0_93), _mm256_unpacklo_pd(_t0_95, _t0_96), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_97, _t0_99), _mm256_unpacklo_pd(_t0_101, _t0_102), 32)), 32);
  _t0_673 = _mm256_permute2f128_pd(_mm256_unpacklo_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_79, _t0_81), _mm256_unpacklo_pd(_t0_83, _t0_84), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_85, _t0_87), _mm256_unpacklo_pd(_t0_89, _t0_90), 32)), _mm256_unpacklo_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_91, _t0_93), _mm256_unpacklo_pd(_t0_95, _t0_96), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_97, _t0_99), _mm256_unpacklo_pd(_t0_101, _t0_102), 32)), 49);
  _t0_674 = _mm256_permute2f128_pd(_mm256_unpackhi_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_79, _t0_81), _mm256_unpacklo_pd(_t0_83, _t0_84), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_85, _t0_87), _mm256_unpacklo_pd(_t0_89, _t0_90), 32)), _mm256_unpackhi_pd(_mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_91, _t0_93), _mm256_unpacklo_pd(_t0_95, _t0_96), 32), _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_97, _t0_99), _mm256_unpacklo_pd(_t0_101, _t0_102), 32)), 49);

  // 4-BLAC: 4x4 * 4x4
  _t0_114 = _mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_79, _t0_79, 32), _mm256_permute2f128_pd(_t0_79, _t0_79, 32), 0), _t0_671), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_81, _t0_81, 32), _mm256_permute2f128_pd(_t0_81, _t0_81, 32), 0), _t0_672)), _mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_83, _t0_83, 32), _mm256_permute2f128_pd(_t0_83, _t0_83, 32), 0), _t0_673), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_84, _t0_84, 32), _mm256_permute2f128_pd(_t0_84, _t0_84, 32), 0), _t0_674)));
  _t0_115 = _mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_85, _t0_85, 32), _mm256_permute2f128_pd(_t0_85, _t0_85, 32), 0), _t0_671), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_87, _t0_87, 32), _mm256_permute2f128_pd(_t0_87, _t0_87, 32), 0), _t0_672)), _mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_89, _t0_89, 32), _mm256_permute2f128_pd(_t0_89, _t0_89, 32), 0), _t0_673), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_90, _t0_90, 32), _mm256_permute2f128_pd(_t0_90, _t0_90, 32), 0), _t0_674)));
  _t0_116 = _mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_91, _t0_91, 32), _mm256_permute2f128_pd(_t0_91, _t0_91, 32), 0), _t0_671), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_93, _t0_93, 32), _mm256_permute2f128_pd(_t0_93, _t0_93, 32), 0), _t0_672)), _mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_95, _t0_95, 32), _mm256_permute2f128_pd(_t0_95, _t0_95, 32), 0), _t0_673), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_96, _t0_96, 32), _mm256_permute2f128_pd(_t0_96, _t0_96, 32), 0), _t0_674)));
  _t0_117 = _mm256_add_pd(_mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_97, _t0_97, 32), _mm256_permute2f128_pd(_t0_97, _t0_97, 32), 0), _t0_671), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_99, _t0_99, 32), _mm256_permute2f128_pd(_t0_99, _t0_99, 32), 0), _t0_672)), _mm256_add_pd(_mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_101, _t0_101, 32), _mm256_permute2f128_pd(_t0_101, _t0_101, 32), 0), _t0_673), _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_102, _t0_102, 32), _mm256_permute2f128_pd(_t0_102, _t0_102, 32), 0), _t0_674)));

  // 4-BLAC: 4x4 - 4x4
  _t0_130 = _mm256_sub_pd(_t0_158, _t0_114);
  _t0_131 = _mm256_sub_pd(_t0_159, _t0_115);
  _t0_132 = _mm256_sub_pd(_t0_160, _t0_116);
  _t0_133 = _mm256_sub_pd(_t0_161, _t0_117);

  // AVX Storer:

  // 4x4 -> 4x4 - LowTriang
  _t0_64 = _t0_130;
  _t0_65 = _t0_131;
  _t0_66 = _t0_132;
  _t0_67 = _t0_133;

  // Generating : L[12,12] = S(h(1, 12, 8), Sqrt( G(h(1, 12, 8), L[12,12],h(1, 12, 8)) ),h(1, 12, 8))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_162 = _t0_64;

  // 4-BLAC: sqrt(1x4)
  _t0_163 = _mm256_castpd128_pd256(_mm_sqrt_pd(_mm256_castpd256_pd128(_t0_162)));

  // AVX Storer:
  _t0_64 = _t0_163;

  // Generating : T1442[1,12] = S(h(1, 1, 0), ( G(h(1, 1, 0), 1[1,1],h(1, 1, 0)) Div G(h(1, 12, 8), L[12,12],h(1, 12, 8)) ),h(1, 12, 8))

  // AVX Loader:

  // Constant 1x1 -> 1x4
  _t0_165 = _mm256_set_pd(0, 0, 0, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_166 = _t0_64;

  // 4-BLAC: 1x4 / 1x4
  _t0_167 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_165), _mm256_castpd256_pd128(_t0_166)));

  // AVX Storer:
  _t0_103 = _t0_167;

  // Generating : L[12,12] = S(h(3, 12, 9), ( G(h(1, 1, 0), T1442[1,12],h(1, 12, 8)) Kro G(h(3, 12, 9), L[12,12],h(1, 12, 8)) ),h(1, 12, 8))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_168 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_103, _t0_103, 32), _mm256_permute2f128_pd(_t0_103, _t0_103, 32), 0);

  // AVX Loader:

  // 3x1 -> 4x1
  _t0_169 = _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t0_65, _t0_66), _mm256_unpacklo_pd(_t0_67, _mm256_setzero_pd()), 32);

  // 4-BLAC: 1x4 Kro 4x1
  _t0_170 = _mm256_mul_pd(_t0_168, _t0_169);

  // AVX Storer:
  _t0_104 = _t0_170;

  // Generating : L[12,12] = S(h(3, 12, 9), ( G(h(3, 12, 9), L[12,12],h(3, 12, 9)) - ( G(h(3, 12, 9), L[12,12],h(1, 12, 8)) * T( G(h(3, 12, 9), L[12,12],h(1, 12, 8)) ) ) ),h(3, 12, 9))

  // AVX Loader:

  // 3x3 -> 4x4 - LowTriang
  _t0_171 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_65, 2), _mm256_setzero_pd());
  _t0_172 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_66, 6), _mm256_permute2f128_pd(_t0_66, _t0_66, 129), 5);
  _t0_173 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_67, 14), _mm256_permute2f128_pd(_t0_67, _t0_67, 129), 5);
  _t0_174 = _mm256_setzero_pd();

  // AVX Loader:

  // 3x1 -> 4x1
  _t0_175 = _t0_104;

  // AVX Loader:

  // 3x1 -> 4x1
  _t0_176 = _t0_104;

  // 4-BLAC: (4x1)^T
  _t0_177 = _t0_176;

  // 4-BLAC: 4x1 * 1x4
  _t0_179 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_175, _t0_175, 32), _mm256_permute2f128_pd(_t0_175, _t0_175, 32), 0), _t0_177);
  _t0_180 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_175, _t0_175, 32), _mm256_permute2f128_pd(_t0_175, _t0_175, 32), 15), _t0_177);
  _t0_181 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_175, _t0_175, 49), _mm256_permute2f128_pd(_t0_175, _t0_175, 49), 0), _t0_177);
  _t0_182 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_175, _t0_175, 49), _mm256_permute2f128_pd(_t0_175, _t0_175, 49), 15), _t0_177);

  // 4-BLAC: 4x4 - 4x4
  _t0_183 = _mm256_sub_pd(_t0_171, _t0_179);
  _t0_184 = _mm256_sub_pd(_t0_172, _t0_180);
  _t0_185 = _mm256_sub_pd(_t0_173, _t0_181);
  _t0_186 = _mm256_sub_pd(_t0_174, _t0_182);

  // AVX Storer:

  // 4x4 -> 3x3 - LowTriang
  _t0_105 = _t0_183;
  _t0_106 = _t0_184;
  _t0_107 = _t0_185;

  // Generating : L[12,12] = S(h(1, 12, 9), Sqrt( G(h(1, 12, 9), L[12,12],h(1, 12, 9)) ),h(1, 12, 9))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_187 = _t0_105;

  // 4-BLAC: sqrt(1x4)
  _t0_188 = _mm256_castpd128_pd256(_mm_sqrt_pd(_mm256_castpd256_pd128(_t0_187)));

  // AVX Storer:
  _t0_105 = _t0_188;

  // Generating : T1442[1,12] = S(h(1, 1, 0), ( G(h(1, 1, 0), 1[1,1],h(1, 1, 0)) Div G(h(1, 12, 9), L[12,12],h(1, 12, 9)) ),h(1, 12, 9))

  // AVX Loader:

  // Constant 1x1 -> 1x4
  _t0_189 = _mm256_set_pd(0, 0, 0, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_190 = _t0_105;

  // 4-BLAC: 1x4 / 1x4
  _t0_191 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_189), _mm256_castpd256_pd128(_t0_190)));

  // AVX Storer:
  _t0_108 = _t0_191;

  // Generating : L[12,12] = S(h(2, 12, 10), ( G(h(1, 1, 0), T1442[1,12],h(1, 12, 9)) Kro G(h(2, 12, 10), L[12,12],h(1, 12, 9)) ),h(1, 12, 9))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_192 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_108, _t0_108, 32), _mm256_permute2f128_pd(_t0_108, _t0_108, 32), 0);

  // AVX Loader:

  // 2x1 -> 4x1
  _t0_193 = _mm256_blend_pd(_mm256_unpacklo_pd(_t0_106, _t0_107), _mm256_setzero_pd(), 12);

  // 4-BLAC: 1x4 Kro 4x1
  _t0_194 = _mm256_mul_pd(_t0_192, _t0_193);

  // AVX Storer:
  _t0_109 = _t0_194;

  // Generating : L[12,12] = S(h(2, 12, 10), ( G(h(2, 12, 10), L[12,12],h(2, 12, 10)) - ( G(h(2, 12, 10), L[12,12],h(1, 12, 9)) * T( G(h(2, 12, 10), L[12,12],h(1, 12, 9)) ) ) ),h(2, 12, 10))

  // AVX Loader:

  // 2x2 -> 4x4 - LowTriang
  _t0_195 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_106, 2), _mm256_setzero_pd());
  _t0_196 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_107, 6), _mm256_permute2f128_pd(_t0_107, _t0_107, 129), 5);
  _t0_197 = _mm256_setzero_pd();
  _t0_198 = _mm256_setzero_pd();

  // AVX Loader:

  // 2x1 -> 4x1
  _t0_199 = _t0_109;

  // AVX Loader:

  // 2x1 -> 4x1
  _t0_200 = _t0_109;

  // 4-BLAC: (4x1)^T
  _t0_202 = _t0_200;

  // 4-BLAC: 4x1 * 1x4
  _t0_203 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_199, _t0_199, 32), _mm256_permute2f128_pd(_t0_199, _t0_199, 32), 0), _t0_202);
  _t0_204 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_199, _t0_199, 32), _mm256_permute2f128_pd(_t0_199, _t0_199, 32), 15), _t0_202);
  _t0_205 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_199, _t0_199, 49), _mm256_permute2f128_pd(_t0_199, _t0_199, 49), 0), _t0_202);
  _t0_206 = _mm256_mul_pd(_mm256_shuffle_pd(_mm256_permute2f128_pd(_t0_199, _t0_199, 49), _mm256_permute2f128_pd(_t0_199, _t0_199, 49), 15), _t0_202);

  // 4-BLAC: 4x4 - 4x4
  _t0_207 = _mm256_sub_pd(_t0_195, _t0_203);
  _t0_208 = _mm256_sub_pd(_t0_196, _t0_204);
  _t0_209 = _mm256_sub_pd(_t0_197, _t0_205);
  _t0_210 = _mm256_sub_pd(_t0_198, _t0_206);

  // AVX Storer:

  // 4x4 -> 2x2 - LowTriang
  _t0_110 = _t0_207;
  _t0_111 = _t0_208;

  // Generating : L[12,12] = S(h(1, 12, 10), Sqrt( G(h(1, 12, 10), L[12,12],h(1, 12, 10)) ),h(1, 12, 10))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_211 = _t0_110;

  // 4-BLAC: sqrt(1x4)
  _t0_212 = _mm256_castpd128_pd256(_mm_sqrt_pd(_mm256_castpd256_pd128(_t0_211)));

  // AVX Storer:
  _t0_110 = _t0_212;

  // Generating : L[12,12] = S(h(1, 12, 11), ( G(h(1, 12, 11), L[12,12],h(1, 12, 10)) Div G(h(1, 12, 10), L[12,12],h(1, 12, 10)) ),h(1, 12, 10))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_213 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_111, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_214 = _t0_110;

  // 4-BLAC: 1x4 / 1x4
  _t0_215 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t0_213), _mm256_castpd256_pd128(_t0_214)));

  // AVX Storer:
  _t0_112 = _t0_215;

  // Generating : L[12,12] = S(h(1, 12, 11), ( G(h(1, 12, 11), L[12,12],h(1, 12, 11)) - ( G(h(1, 12, 11), L[12,12],h(1, 12, 10)) Kro T( G(h(1, 12, 11), L[12,12],h(1, 12, 10)) ) ) ),h(1, 12, 11))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_216 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t0_111, 2), _mm256_setzero_pd());

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_217 = _t0_112;

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_218 = _t0_112;

  // 4-BLAC: (4x1)^T
  _t0_219 = _t0_218;

  // 4-BLAC: 1x4 Kro 1x4
  _t0_220 = _mm256_mul_pd(_t0_217, _t0_219);

  // 4-BLAC: 1x4 - 1x4
  _t0_222 = _mm256_sub_pd(_t0_216, _t0_220);

  // AVX Storer:
  _t0_113 = _t0_222;

  // Generating : L[12,12] = S(h(1, 12, 11), Sqrt( G(h(1, 12, 11), L[12,12],h(1, 12, 11)) ),h(1, 12, 11))

  // AVX Loader:

  // 1x1 -> 1x4
  _t0_223 = _t0_113;

  // 4-BLAC: sqrt(1x4)
  _t0_224 = _mm256_castpd128_pd256(_mm_sqrt_pd(_mm256_castpd256_pd128(_t0_223)));

  // AVX Storer:
  _t0_113 = _t0_224;

  _mm_store_sd(&(K[0]), _mm256_castpd256_pd128(_t0_0));
  _mm256_maskstore_pd(K + 12, _mm256_setr_epi64x((__int64)1 << 63, 0, 0, 0), _t0_2);
  _mm256_maskstore_pd(K + 24, _mm256_setr_epi64x((__int64)1 << 63, 0, 0, 0), _mm256_shuffle_pd(_t0_2, _t0_2, 1));
  _mm256_maskstore_pd(K + 36, _mm256_setr_epi64x((__int64)1 << 63, 0, 0, 0), _mm256_permute2f128_pd(_t0_2, _t0_2, 129));
  _mm_store_sd(K + 13, _mm256_castpd256_pd128(_t0_3));
  _mm256_maskstore_pd(K + 25, _mm256_setr_epi64x((__int64)1 << 63, 0, 0, 0), _t0_7);
  _mm256_maskstore_pd(K + 37, _mm256_setr_epi64x((__int64)1 << 63, 0, 0, 0), _mm256_shuffle_pd(_t0_7, _t0_7, 1));
  _mm_store_sd(K + 26, _mm256_castpd256_pd128(_t0_8));
  _mm_store_sd(&(K[38]), _mm256_castpd256_pd128(_t0_10));
  _mm_store_sd(&(K[39]), _mm256_castpd256_pd128(_t0_11));
  _mm_store_sd(&(K[48]), _mm256_castpd256_pd128(_t0_12));
  _mm_store_sd(&(K[49]), _mm256_castpd256_pd128(_t0_14));
  _mm_store_sd(&(K[50]), _mm256_castpd256_pd128(_t0_16));
  _mm_store_sd(&(K[51]), _mm256_castpd256_pd128(_t0_17));
  _mm_store_sd(&(K[60]), _mm256_castpd256_pd128(_t0_18));
  _mm_store_sd(&(K[61]), _mm256_castpd256_pd128(_t0_20));
  _mm_store_sd(&(K[62]), _mm256_castpd256_pd128(_t0_22));
  _mm_store_sd(&(K[63]), _mm256_castpd256_pd128(_t0_23));
  _mm_store_sd(&(K[72]), _mm256_castpd256_pd128(_t0_24));
  _mm_store_sd(&(K[73]), _mm256_castpd256_pd128(_t0_26));
  _mm_store_sd(&(K[74]), _mm256_castpd256_pd128(_t0_28));
  _mm_store_sd(&(K[75]), _mm256_castpd256_pd128(_t0_29));
  _mm_store_sd(&(K[84]), _mm256_castpd256_pd128(_t0_30));
  _mm_store_sd(&(K[85]), _mm256_castpd256_pd128(_t0_32));
  _mm_store_sd(&(K[86]), _mm256_castpd256_pd128(_t0_34));
  _mm_store_sd(&(K[87]), _mm256_castpd256_pd128(_t0_35));
  _mm_store_sd(&(K[96]), _mm256_castpd256_pd128(_t0_36));
  _mm_store_sd(&(K[97]), _mm256_castpd256_pd128(_t0_38));
  _mm_store_sd(&(K[98]), _mm256_castpd256_pd128(_t0_40));
  _mm_store_sd(&(K[99]), _mm256_castpd256_pd128(_t0_41));
  _mm_store_sd(&(K[108]), _mm256_castpd256_pd128(_t0_42));
  _mm_store_sd(&(K[109]), _mm256_castpd256_pd128(_t0_44));
  _mm_store_sd(&(K[110]), _mm256_castpd256_pd128(_t0_46));
  _mm_store_sd(&(K[111]), _mm256_castpd256_pd128(_t0_47));
  _mm_store_sd(&(K[120]), _mm256_castpd256_pd128(_t0_48));
  _mm_store_sd(&(K[121]), _mm256_castpd256_pd128(_t0_50));
  _mm_store_sd(&(K[122]), _mm256_castpd256_pd128(_t0_52));
  _mm_store_sd(&(K[123]), _mm256_castpd256_pd128(_t0_53));
  _mm_store_sd(&(K[132]), _mm256_castpd256_pd128(_t0_54));
  _mm_store_sd(&(K[133]), _mm256_castpd256_pd128(_t0_56));
  _mm_store_sd(&(K[134]), _mm256_castpd256_pd128(_t0_58));
  _mm_store_sd(&(K[135]), _mm256_castpd256_pd128(_t0_59));
  _mm_store_sd(K + 52, _mm256_castpd256_pd128(_t0_60));
  _mm256_maskstore_pd(K + 64, _mm256_setr_epi64x((__int64)1 << 63, 0, 0, 0), _t0_69);
  _mm256_maskstore_pd(K + 76, _mm256_setr_epi64x((__int64)1 << 63, 0, 0, 0), _mm256_shuffle_pd(_t0_69, _t0_69, 1));
  _mm256_maskstore_pd(K + 88, _mm256_setr_epi64x((__int64)1 << 63, 0, 0, 0), _mm256_permute2f128_pd(_t0_69, _t0_69, 129));
  _mm_store_sd(K + 65, _mm256_castpd256_pd128(_t0_70));
  _mm256_maskstore_pd(K + 77, _mm256_setr_epi64x((__int64)1 << 63, 0, 0, 0), _t0_74);
  _mm256_maskstore_pd(K + 89, _mm256_setr_epi64x((__int64)1 << 63, 0, 0, 0), _mm256_shuffle_pd(_t0_74, _t0_74, 1));
  _mm_store_sd(K + 78, _mm256_castpd256_pd128(_t0_75));
  _mm_store_sd(&(K[90]), _mm256_castpd256_pd128(_t0_77));
  _mm_store_sd(&(K[91]), _mm256_castpd256_pd128(_t0_78));
  _mm_store_sd(&(K[100]), _mm256_castpd256_pd128(_t0_79));
  _mm_store_sd(&(K[101]), _mm256_castpd256_pd128(_t0_81));
  _mm_store_sd(&(K[102]), _mm256_castpd256_pd128(_t0_83));
  _mm_store_sd(&(K[103]), _mm256_castpd256_pd128(_t0_84));
  _mm_store_sd(&(K[112]), _mm256_castpd256_pd128(_t0_85));
  _mm_store_sd(&(K[113]), _mm256_castpd256_pd128(_t0_87));
  _mm_store_sd(&(K[114]), _mm256_castpd256_pd128(_t0_89));
  _mm_store_sd(&(K[115]), _mm256_castpd256_pd128(_t0_90));
  _mm_store_sd(&(K[124]), _mm256_castpd256_pd128(_t0_91));
  _mm_store_sd(&(K[125]), _mm256_castpd256_pd128(_t0_93));
  _mm_store_sd(&(K[126]), _mm256_castpd256_pd128(_t0_95));
  _mm_store_sd(&(K[127]), _mm256_castpd256_pd128(_t0_96));
  _mm_store_sd(&(K[136]), _mm256_castpd256_pd128(_t0_97));
  _mm_store_sd(&(K[137]), _mm256_castpd256_pd128(_t0_99));
  _mm_store_sd(&(K[138]), _mm256_castpd256_pd128(_t0_101));
  _mm_store_sd(&(K[139]), _mm256_castpd256_pd128(_t0_102));

  for( int fi18 = 0; fi18 <= 7; fi18+=4 ) {
    _t1_7 = _mm256_castpd128_pd256(_mm_load_sd(&(y[fi18])));
    _t1_6 = _mm256_castpd128_pd256(_mm_load_sd(&(K[13*fi18])));
    _t1_8 = _mm256_maskload_pd(y + fi18 + 1, _mm256_setr_epi64x((__int64)1 << 63, (__int64)1 << 63, (__int64)1 << 63, 0));
    _t1_5 = _mm256_permute2f128_pd(_mm256_unpacklo_pd(_mm256_castpd128_pd256(_mm_load_sd(K + 13*fi18 + 12)), _mm256_castpd128_pd256(_mm_load_sd(K + 13*fi18 + 24))), _mm256_castpd128_pd256(_mm_load_sd(K + 13*fi18 + 36)), 32);
    _t1_4 = _mm256_castpd128_pd256(_mm_load_sd(&(K[13*fi18 + 13])));
    _t1_3 = _mm256_shuffle_pd(_mm256_castpd128_pd256(_mm_load_sd(K + 13*fi18 + 25)), _mm256_castpd128_pd256(_mm_load_sd(K + 13*fi18 + 37)), 0);
    _t1_2 = _mm256_castpd128_pd256(_mm_load_sd(&(K[13*fi18 + 26])));
    _t1_1 = _mm256_castpd128_pd256(_mm_load_sd(&(K[13*fi18 + 38])));
    _t1_0 = _mm256_castpd128_pd256(_mm_load_sd(&(K[13*fi18 + 39])));

    // Generating : t0[12,1] = S(h(1, 12, fi18), ( G(h(1, 12, fi18), t0[12,1],h(1, 1, 0)) Div G(h(1, 12, fi18), L0[12,12],h(1, 12, fi18)) ),h(1, 1, 0))

    // AVX Loader:

    // 1x1 -> 1x4
    _t1_13 = _t1_7;

    // AVX Loader:

    // 1x1 -> 1x4
    _t1_14 = _t1_6;

    // 4-BLAC: 1x4 / 1x4
    _t1_15 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t1_13), _mm256_castpd256_pd128(_t1_14)));

    // AVX Storer:
    _t1_7 = _t1_15;

    // Generating : t0[12,1] = S(h(3, 12, fi18 + 1), ( G(h(3, 12, fi18 + 1), t0[12,1],h(1, 1, 0)) - ( G(h(3, 12, fi18 + 1), L0[12,12],h(1, 12, fi18)) Kro G(h(1, 12, fi18), t0[12,1],h(1, 1, 0)) ) ),h(1, 1, 0))

    // AVX Loader:

    // 3x1 -> 4x1
    _t1_16 = _t1_8;

    // AVX Loader:

    // 3x1 -> 4x1
    _t1_17 = _t1_5;

    // AVX Loader:

    // 1x1 -> 1x4
    _t1_18 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t1_7, _t1_7, 32), _mm256_permute2f128_pd(_t1_7, _t1_7, 32), 0);

    // 4-BLAC: 4x1 Kro 1x4
    _t1_19 = _mm256_mul_pd(_t1_17, _t1_18);

    // 4-BLAC: 4x1 - 4x1
    _t1_20 = _mm256_sub_pd(_t1_16, _t1_19);

    // AVX Storer:
    _t1_8 = _t1_20;

    // Generating : t0[12,1] = S(h(1, 12, fi18 + 1), ( G(h(1, 12, fi18 + 1), t0[12,1],h(1, 1, 0)) Div G(h(1, 12, fi18 + 1), L0[12,12],h(1, 12, fi18 + 1)) ),h(1, 1, 0))

    // AVX Loader:

    // 1x1 -> 1x4
    _t1_21 = _mm256_blend_pd(_mm256_setzero_pd(), _t1_8, 1);

    // AVX Loader:

    // 1x1 -> 1x4
    _t1_22 = _t1_4;

    // 4-BLAC: 1x4 / 1x4
    _t1_23 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t1_21), _mm256_castpd256_pd128(_t1_22)));

    // AVX Storer:
    _t1_9 = _t1_23;

    // Generating : t0[12,1] = S(h(2, 12, fi18 + 2), ( G(h(2, 12, fi18 + 2), t0[12,1],h(1, 1, 0)) - ( G(h(2, 12, fi18 + 2), L0[12,12],h(1, 12, fi18 + 1)) Kro G(h(1, 12, fi18 + 1), t0[12,1],h(1, 1, 0)) ) ),h(1, 1, 0))

    // AVX Loader:

    // 2x1 -> 4x1
    _t1_24 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t1_8, 6), _mm256_permute2f128_pd(_t1_8, _t1_8, 129), 5);

    // AVX Loader:

    // 2x1 -> 4x1
    _t1_25 = _t1_3;

    // AVX Loader:

    // 1x1 -> 1x4
    _t1_26 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t1_9, _t1_9, 32), _mm256_permute2f128_pd(_t1_9, _t1_9, 32), 0);

    // 4-BLAC: 4x1 Kro 1x4
    _t1_27 = _mm256_mul_pd(_t1_25, _t1_26);

    // 4-BLAC: 4x1 - 4x1
    _t1_28 = _mm256_sub_pd(_t1_24, _t1_27);

    // AVX Storer:
    _t1_10 = _t1_28;

    // Generating : t0[12,1] = S(h(1, 12, fi18 + 2), ( G(h(1, 12, fi18 + 2), t0[12,1],h(1, 1, 0)) Div G(h(1, 12, fi18 + 2), L0[12,12],h(1, 12, fi18 + 2)) ),h(1, 1, 0))

    // AVX Loader:

    // 1x1 -> 1x4
    _t1_29 = _mm256_blend_pd(_mm256_setzero_pd(), _t1_10, 1);

    // AVX Loader:

    // 1x1 -> 1x4
    _t1_30 = _t1_2;

    // 4-BLAC: 1x4 / 1x4
    _t1_31 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t1_29), _mm256_castpd256_pd128(_t1_30)));

    // AVX Storer:
    _t1_11 = _t1_31;

    // Generating : t0[12,1] = S(h(1, 12, fi18 + 3), ( G(h(1, 12, fi18 + 3), t0[12,1],h(1, 1, 0)) - ( G(h(1, 12, fi18 + 3), L0[12,12],h(1, 12, fi18 + 2)) Kro G(h(1, 12, fi18 + 2), t0[12,1],h(1, 1, 0)) ) ),h(1, 1, 0))

    // AVX Loader:

    // 1x1 -> 1x4
    _t1_32 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t1_10, 2), _mm256_setzero_pd());

    // AVX Loader:

    // 1x1 -> 1x4
    _t1_33 = _t1_1;

    // AVX Loader:

    // 1x1 -> 1x4
    _t1_34 = _t1_11;

    // 4-BLAC: 1x4 Kro 1x4
    _t1_35 = _mm256_mul_pd(_t1_33, _t1_34);

    // 4-BLAC: 1x4 - 1x4
    _t1_36 = _mm256_sub_pd(_t1_32, _t1_35);

    // AVX Storer:
    _t1_12 = _t1_36;

    // Generating : t0[12,1] = S(h(1, 12, fi18 + 3), ( G(h(1, 12, fi18 + 3), t0[12,1],h(1, 1, 0)) Div G(h(1, 12, fi18 + 3), L0[12,12],h(1, 12, fi18 + 3)) ),h(1, 1, 0))

    // AVX Loader:

    // 1x1 -> 1x4
    _t1_37 = _t1_12;

    // AVX Loader:

    // 1x1 -> 1x4
    _t1_38 = _t1_0;

    // 4-BLAC: 1x4 / 1x4
    _t1_39 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t1_37), _mm256_castpd256_pd128(_t1_38)));

    // AVX Storer:
    _t1_12 = _t1_39;

    // Generating : t0[12,1] = Sum_{i150} ( S(h(4, 12, fi18 + i150 + 4), ( G(h(4, 12, fi18 + i150 + 4), t0[12,1],h(1, 1, 0)) - ( G(h(4, 12, fi18 + i150 + 4), L0[12,12],h(4, 12, fi18)) * G(h(4, 12, fi18), t0[12,1],h(1, 1, 0)) ) ),h(1, 1, 0)) )

    // AVX Loader:
    _mm_store_sd(&(y[fi18]), _mm256_castpd256_pd128(_t1_7));
    _mm_store_sd(&(y[fi18 + 1]), _mm256_castpd256_pd128(_t1_9));
    _mm_store_sd(&(y[fi18 + 2]), _mm256_castpd256_pd128(_t1_11));
    _mm_store_sd(&(y[fi18 + 3]), _mm256_castpd256_pd128(_t1_12));

    for( int i150 = 0; i150 <= -fi18 + 7; i150+=4 ) {
      _t2_9 = _mm256_loadu_pd(y + fi18 + i150 + 4);
      _t2_7 = _mm256_loadu_pd(K + 13*fi18 + 12*i150 + 48);
      _t2_6 = _mm256_loadu_pd(K + 13*fi18 + 12*i150 + 60);
      _t2_5 = _mm256_loadu_pd(K + 13*fi18 + 12*i150 + 72);
      _t2_4 = _mm256_loadu_pd(K + 13*fi18 + 12*i150 + 84);
      _t2_3 = _mm256_castpd128_pd256(_mm_load_sd(&(y[fi18])));
      _t2_2 = _mm256_castpd128_pd256(_mm_load_sd(&(y[fi18 + 1])));
      _t2_1 = _mm256_castpd128_pd256(_mm_load_sd(&(y[fi18 + 2])));
      _t2_0 = _mm256_castpd128_pd256(_mm_load_sd(&(y[fi18 + 3])));

      // AVX Loader:

      // AVX Loader:

      // AVX Loader:

      // 4-BLAC: 4x4 * 4x1
      _t2_8 = _mm256_add_pd(_mm256_permute2f128_pd(_mm256_hadd_pd(_mm256_mul_pd(_t2_7, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t2_3, _t2_2), _mm256_unpacklo_pd(_t2_1, _t2_0), 32)), _mm256_mul_pd(_t2_6, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t2_3, _t2_2), _mm256_unpacklo_pd(_t2_1, _t2_0), 32))), _mm256_hadd_pd(_mm256_mul_pd(_t2_5, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t2_3, _t2_2), _mm256_unpacklo_pd(_t2_1, _t2_0), 32)), _mm256_mul_pd(_t2_4, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t2_3, _t2_2), _mm256_unpacklo_pd(_t2_1, _t2_0), 32))), 33), _mm256_blend_pd(_mm256_hadd_pd(_mm256_mul_pd(_t2_7, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t2_3, _t2_2), _mm256_unpacklo_pd(_t2_1, _t2_0), 32)), _mm256_mul_pd(_t2_6, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t2_3, _t2_2), _mm256_unpacklo_pd(_t2_1, _t2_0), 32))), _mm256_hadd_pd(_mm256_mul_pd(_t2_5, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t2_3, _t2_2), _mm256_unpacklo_pd(_t2_1, _t2_0), 32)), _mm256_mul_pd(_t2_4, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t2_3, _t2_2), _mm256_unpacklo_pd(_t2_1, _t2_0), 32))), 12));

      // 4-BLAC: 4x1 - 4x1
      _t2_9 = _mm256_sub_pd(_t2_9, _t2_8);

      // AVX Storer:
      _mm256_storeu_pd(y + fi18 + i150 + 4, _t2_9);
    }
  }

  _t3_0 = _mm256_castpd128_pd256(_mm_load_sd(&(y[8])));
  _t3_1 = _mm256_maskload_pd(y + 9, _mm256_setr_epi64x((__int64)1 << 63, (__int64)1 << 63, (__int64)1 << 63, 0));

  // Generating : t0[12,1] = S(h(1, 12, 8), ( G(h(1, 12, 8), t0[12,1],h(1, 1, 0)) Div G(h(1, 12, 8), L0[12,12],h(1, 12, 8)) ),h(1, 1, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t3_6 = _t3_0;

  // AVX Loader:

  // 1x1 -> 1x4
  _t3_7 = _t0_64;

  // 4-BLAC: 1x4 / 1x4
  _t3_8 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t3_6), _mm256_castpd256_pd128(_t3_7)));

  // AVX Storer:
  _t3_0 = _t3_8;

  // Generating : t0[12,1] = S(h(3, 12, 9), ( G(h(3, 12, 9), t0[12,1],h(1, 1, 0)) - ( G(h(3, 12, 9), L0[12,12],h(1, 12, 8)) Kro G(h(1, 12, 8), t0[12,1],h(1, 1, 0)) ) ),h(1, 1, 0))

  // AVX Loader:

  // 3x1 -> 4x1
  _t3_9 = _t3_1;

  // AVX Loader:

  // 3x1 -> 4x1
  _t3_10 = _t0_104;

  // AVX Loader:

  // 1x1 -> 1x4
  _t3_11 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t3_0, _t3_0, 32), _mm256_permute2f128_pd(_t3_0, _t3_0, 32), 0);

  // 4-BLAC: 4x1 Kro 1x4
  _t3_12 = _mm256_mul_pd(_t3_10, _t3_11);

  // 4-BLAC: 4x1 - 4x1
  _t3_13 = _mm256_sub_pd(_t3_9, _t3_12);

  // AVX Storer:
  _t3_1 = _t3_13;

  // Generating : t0[12,1] = S(h(1, 12, 9), ( G(h(1, 12, 9), t0[12,1],h(1, 1, 0)) Div G(h(1, 12, 9), L0[12,12],h(1, 12, 9)) ),h(1, 1, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t3_14 = _mm256_blend_pd(_mm256_setzero_pd(), _t3_1, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t3_15 = _t0_105;

  // 4-BLAC: 1x4 / 1x4
  _t3_16 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t3_14), _mm256_castpd256_pd128(_t3_15)));

  // AVX Storer:
  _t3_2 = _t3_16;

  // Generating : t0[12,1] = S(h(2, 12, 10), ( G(h(2, 12, 10), t0[12,1],h(1, 1, 0)) - ( G(h(2, 12, 10), L0[12,12],h(1, 12, 9)) Kro G(h(1, 12, 9), t0[12,1],h(1, 1, 0)) ) ),h(1, 1, 0))

  // AVX Loader:

  // 2x1 -> 4x1
  _t3_17 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t3_1, 6), _mm256_permute2f128_pd(_t3_1, _t3_1, 129), 5);

  // AVX Loader:

  // 2x1 -> 4x1
  _t3_18 = _t0_109;

  // AVX Loader:

  // 1x1 -> 1x4
  _t3_19 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t3_2, _t3_2, 32), _mm256_permute2f128_pd(_t3_2, _t3_2, 32), 0);

  // 4-BLAC: 4x1 Kro 1x4
  _t3_20 = _mm256_mul_pd(_t3_18, _t3_19);

  // 4-BLAC: 4x1 - 4x1
  _t3_21 = _mm256_sub_pd(_t3_17, _t3_20);

  // AVX Storer:
  _t3_3 = _t3_21;

  // Generating : t0[12,1] = S(h(1, 12, 10), ( G(h(1, 12, 10), t0[12,1],h(1, 1, 0)) Div G(h(1, 12, 10), L0[12,12],h(1, 12, 10)) ),h(1, 1, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t3_22 = _mm256_blend_pd(_mm256_setzero_pd(), _t3_3, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t3_23 = _t0_110;

  // 4-BLAC: 1x4 / 1x4
  _t3_24 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t3_22), _mm256_castpd256_pd128(_t3_23)));

  // AVX Storer:
  _t3_4 = _t3_24;

  // Generating : t0[12,1] = S(h(1, 12, 11), ( G(h(1, 12, 11), t0[12,1],h(1, 1, 0)) - ( G(h(1, 12, 11), L0[12,12],h(1, 12, 10)) Kro G(h(1, 12, 10), t0[12,1],h(1, 1, 0)) ) ),h(1, 1, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t3_25 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t3_3, 2), _mm256_setzero_pd());

  // AVX Loader:

  // 1x1 -> 1x4
  _t3_26 = _t0_112;

  // AVX Loader:

  // 1x1 -> 1x4
  _t3_27 = _t3_4;

  // 4-BLAC: 1x4 Kro 1x4
  _t3_28 = _mm256_mul_pd(_t3_26, _t3_27);

  // 4-BLAC: 1x4 - 1x4
  _t3_29 = _mm256_sub_pd(_t3_25, _t3_28);

  // AVX Storer:
  _t3_5 = _t3_29;

  // Generating : t0[12,1] = S(h(1, 12, 11), ( G(h(1, 12, 11), t0[12,1],h(1, 1, 0)) Div G(h(1, 12, 11), L0[12,12],h(1, 12, 11)) ),h(1, 1, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t3_30 = _t3_5;

  // AVX Loader:

  // 1x1 -> 1x4
  _t3_31 = _t0_113;

  // 4-BLAC: 1x4 / 1x4
  _t3_32 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t3_30), _mm256_castpd256_pd128(_t3_31)));

  // AVX Storer:
  _t3_5 = _t3_32;

  _mm_store_sd(K + 104, _mm256_castpd256_pd128(_t0_64));
  _mm256_maskstore_pd(K + 116, _mm256_setr_epi64x((__int64)1 << 63, 0, 0, 0), _t0_104);
  _mm256_maskstore_pd(K + 128, _mm256_setr_epi64x((__int64)1 << 63, 0, 0, 0), _mm256_shuffle_pd(_t0_104, _t0_104, 1));
  _mm256_maskstore_pd(K + 140, _mm256_setr_epi64x((__int64)1 << 63, 0, 0, 0), _mm256_permute2f128_pd(_t0_104, _t0_104, 129));
  _mm_store_sd(K + 117, _mm256_castpd256_pd128(_t0_105));
  _mm256_maskstore_pd(K + 129, _mm256_setr_epi64x((__int64)1 << 63, 0, 0, 0), _t0_109);
  _mm256_maskstore_pd(K + 141, _mm256_setr_epi64x((__int64)1 << 63, 0, 0, 0), _mm256_shuffle_pd(_t0_109, _t0_109, 1));
  _mm_store_sd(K + 130, _mm256_castpd256_pd128(_t0_110));
  _mm_store_sd(&(K[142]), _mm256_castpd256_pd128(_t0_112));
  _mm_store_sd(&(K[143]), _mm256_castpd256_pd128(_t0_113));
  _mm_store_sd(&(y[8]), _mm256_castpd256_pd128(_t3_0));
  _mm_store_sd(&(y[9]), _mm256_castpd256_pd128(_t3_2));
  _mm_store_sd(&(y[10]), _mm256_castpd256_pd128(_t3_4));
  _mm_store_sd(&(y[11]), _mm256_castpd256_pd128(_t3_5));

  for( int fi18 = 0; fi18 <= 7; fi18+=4 ) {
    _t4_7 = _mm256_castpd128_pd256(_mm_load_sd(&(y[-fi18 + 11])));
    _t4_6 = _mm256_castpd128_pd256(_mm_load_sd(&(K[-13*fi18 + 143])));
    _t4_8 = _mm256_maskload_pd(y + -fi18 + 8, _mm256_setr_epi64x((__int64)1 << 63, (__int64)1 << 63, (__int64)1 << 63, 0));
    _t4_5 = _mm256_maskload_pd(K + -13*fi18 + 140, _mm256_setr_epi64x((__int64)1 << 63, (__int64)1 << 63, (__int64)1 << 63, 0));
    _t4_4 = _mm256_castpd128_pd256(_mm_load_sd(&(K[-13*fi18 + 130])));
    _t4_3 = _mm256_maskload_pd(K + -13*fi18 + 128, _mm256_setr_epi64x((__int64)1 << 63, (__int64)1 << 63, 0, 0));
    _t4_2 = _mm256_castpd128_pd256(_mm_load_sd(&(K[-13*fi18 + 117])));
    _t4_1 = _mm256_castpd128_pd256(_mm_load_sd(&(K[-13*fi18 + 116])));
    _t4_0 = _mm256_castpd128_pd256(_mm_load_sd(&(K[-13*fi18 + 104])));

    // Generating : a[12,1] = S(h(1, 12, -fi18 + 11), ( G(h(1, 12, -fi18 + 11), a[12,1],h(1, 1, 0)) Div G(h(1, 12, -fi18 + 11), L0[12,12],h(1, 12, -fi18 + 11)) ),h(1, 1, 0))

    // AVX Loader:

    // 1x1 -> 1x4
    _t4_13 = _t4_7;

    // AVX Loader:

    // 1x1 -> 1x4
    _t4_14 = _t4_6;

    // 4-BLAC: 1x4 / 1x4
    _t4_15 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t4_13), _mm256_castpd256_pd128(_t4_14)));

    // AVX Storer:
    _t4_7 = _t4_15;

    // Generating : a[12,1] = S(h(3, 12, -fi18 + 8), ( G(h(3, 12, -fi18 + 8), a[12,1],h(1, 1, 0)) - ( T( G(h(1, 12, -fi18 + 11), L0[12,12],h(3, 12, -fi18 + 8)) ) Kro G(h(1, 12, -fi18 + 11), a[12,1],h(1, 1, 0)) ) ),h(1, 1, 0))

    // AVX Loader:

    // 3x1 -> 4x1
    _t4_16 = _t4_8;

    // AVX Loader:

    // 1x3 -> 1x4
    _t4_17 = _t4_5;

    // 4-BLAC: (1x4)^T
    _t4_18 = _t4_17;

    // AVX Loader:

    // 1x1 -> 1x4
    _t4_19 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t4_7, _t4_7, 32), _mm256_permute2f128_pd(_t4_7, _t4_7, 32), 0);

    // 4-BLAC: 4x1 Kro 1x4
    _t4_20 = _mm256_mul_pd(_t4_18, _t4_19);

    // 4-BLAC: 4x1 - 4x1
    _t4_21 = _mm256_sub_pd(_t4_16, _t4_20);

    // AVX Storer:
    _t4_8 = _t4_21;

    // Generating : a[12,1] = S(h(1, 12, -fi18 + 10), ( G(h(1, 12, -fi18 + 10), a[12,1],h(1, 1, 0)) Div G(h(1, 12, -fi18 + 10), L0[12,12],h(1, 12, -fi18 + 10)) ),h(1, 1, 0))

    // AVX Loader:

    // 1x1 -> 1x4
    _t4_22 = _mm256_permute2f128_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t4_8, 4), _mm256_blend_pd(_mm256_setzero_pd(), _t4_8, 4), 129);

    // AVX Loader:

    // 1x1 -> 1x4
    _t4_23 = _t4_4;

    // 4-BLAC: 1x4 / 1x4
    _t4_24 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t4_22), _mm256_castpd256_pd128(_t4_23)));

    // AVX Storer:
    _t4_9 = _t4_24;

    // Generating : a[12,1] = S(h(2, 12, -fi18 + 8), ( G(h(2, 12, -fi18 + 8), a[12,1],h(1, 1, 0)) - ( T( G(h(1, 12, -fi18 + 10), L0[12,12],h(2, 12, -fi18 + 8)) ) Kro G(h(1, 12, -fi18 + 10), a[12,1],h(1, 1, 0)) ) ),h(1, 1, 0))

    // AVX Loader:

    // 2x1 -> 4x1
    _t4_25 = _mm256_blend_pd(_mm256_setzero_pd(), _t4_8, 3);

    // AVX Loader:

    // 1x2 -> 1x4
    _t4_26 = _t4_3;

    // 4-BLAC: (1x4)^T
    _t4_27 = _t4_26;

    // AVX Loader:

    // 1x1 -> 1x4
    _t4_28 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t4_9, _t4_9, 32), _mm256_permute2f128_pd(_t4_9, _t4_9, 32), 0);

    // 4-BLAC: 4x1 Kro 1x4
    _t4_29 = _mm256_mul_pd(_t4_27, _t4_28);

    // 4-BLAC: 4x1 - 4x1
    _t4_30 = _mm256_sub_pd(_t4_25, _t4_29);

    // AVX Storer:
    _t4_10 = _t4_30;

    // Generating : a[12,1] = S(h(1, 12, -fi18 + 9), ( G(h(1, 12, -fi18 + 9), a[12,1],h(1, 1, 0)) Div G(h(1, 12, -fi18 + 9), L0[12,12],h(1, 12, -fi18 + 9)) ),h(1, 1, 0))

    // AVX Loader:

    // 1x1 -> 1x4
    _t4_31 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t4_10, 2), _mm256_setzero_pd());

    // AVX Loader:

    // 1x1 -> 1x4
    _t4_32 = _t4_2;

    // 4-BLAC: 1x4 / 1x4
    _t4_33 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t4_31), _mm256_castpd256_pd128(_t4_32)));

    // AVX Storer:
    _t4_11 = _t4_33;

    // Generating : a[12,1] = S(h(1, 12, -fi18 + 8), ( G(h(1, 12, -fi18 + 8), a[12,1],h(1, 1, 0)) - ( T( G(h(1, 12, -fi18 + 9), L0[12,12],h(1, 12, -fi18 + 8)) ) Kro G(h(1, 12, -fi18 + 9), a[12,1],h(1, 1, 0)) ) ),h(1, 1, 0))

    // AVX Loader:

    // 1x1 -> 1x4
    _t4_34 = _mm256_blend_pd(_mm256_setzero_pd(), _t4_10, 1);

    // AVX Loader:

    // 1x1 -> 1x4
    _t4_35 = _t4_1;

    // 4-BLAC: (4x1)^T
    _t4_36 = _t4_35;

    // AVX Loader:

    // 1x1 -> 1x4
    _t4_37 = _t4_11;

    // 4-BLAC: 1x4 Kro 1x4
    _t4_38 = _mm256_mul_pd(_t4_36, _t4_37);

    // 4-BLAC: 1x4 - 1x4
    _t4_39 = _mm256_sub_pd(_t4_34, _t4_38);

    // AVX Storer:
    _t4_12 = _t4_39;

    // Generating : a[12,1] = S(h(1, 12, -fi18 + 8), ( G(h(1, 12, -fi18 + 8), a[12,1],h(1, 1, 0)) Div G(h(1, 12, -fi18 + 8), L0[12,12],h(1, 12, -fi18 + 8)) ),h(1, 1, 0))

    // AVX Loader:

    // 1x1 -> 1x4
    _t4_40 = _t4_12;

    // AVX Loader:

    // 1x1 -> 1x4
    _t4_41 = _t4_0;

    // 4-BLAC: 1x4 / 1x4
    _t4_42 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t4_40), _mm256_castpd256_pd128(_t4_41)));

    // AVX Storer:
    _t4_12 = _t4_42;

    // Generating : a[12,1] = Sum_{i150} ( S(h(4, 12, i150), ( G(h(4, 12, i150), a[12,1],h(1, 1, 0)) - ( T( G(h(4, 12, -fi18 + 8), L0[12,12],h(4, 12, i150)) ) * G(h(4, 12, -fi18 + 8), a[12,1],h(1, 1, 0)) ) ),h(1, 1, 0)) )

    // AVX Loader:
    _mm_store_sd(&(y[-fi18 + 11]), _mm256_castpd256_pd128(_t4_7));
    _mm_store_sd(&(y[-fi18 + 10]), _mm256_castpd256_pd128(_t4_9));
    _mm_store_sd(&(y[-fi18 + 9]), _mm256_castpd256_pd128(_t4_11));
    _mm_store_sd(&(y[-fi18 + 8]), _mm256_castpd256_pd128(_t4_12));

    for( int i150 = 0; i150 <= -fi18 + 7; i150+=4 ) {
      _t5_9 = _mm256_loadu_pd(y + i150);
      _t5_7 = _mm256_loadu_pd(K + -12*fi18 + i150 + 96);
      _t5_6 = _mm256_loadu_pd(K + -12*fi18 + i150 + 108);
      _t5_5 = _mm256_loadu_pd(K + -12*fi18 + i150 + 120);
      _t5_4 = _mm256_loadu_pd(K + -12*fi18 + i150 + 132);
      _t5_3 = _mm256_castpd128_pd256(_mm_load_sd(&(y[-fi18 + 11])));
      _t5_2 = _mm256_castpd128_pd256(_mm_load_sd(&(y[-fi18 + 10])));
      _t5_1 = _mm256_castpd128_pd256(_mm_load_sd(&(y[-fi18 + 9])));
      _t5_0 = _mm256_castpd128_pd256(_mm_load_sd(&(y[-fi18 + 8])));

      // AVX Loader:

      // AVX Loader:

      // 4-BLAC: (4x4)^T
      _t5_10 = _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t5_7, _t5_6), _mm256_unpacklo_pd(_t5_5, _t5_4), 32);
      _t5_11 = _mm256_permute2f128_pd(_mm256_unpackhi_pd(_t5_7, _t5_6), _mm256_unpackhi_pd(_t5_5, _t5_4), 32);
      _t5_12 = _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t5_7, _t5_6), _mm256_unpacklo_pd(_t5_5, _t5_4), 49);
      _t5_13 = _mm256_permute2f128_pd(_mm256_unpackhi_pd(_t5_7, _t5_6), _mm256_unpackhi_pd(_t5_5, _t5_4), 49);

      // AVX Loader:

      // 4-BLAC: 4x4 * 4x1
      _t5_8 = _mm256_add_pd(_mm256_permute2f128_pd(_mm256_hadd_pd(_mm256_mul_pd(_t5_10, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t5_0, _t5_1), _mm256_unpacklo_pd(_t5_2, _t5_3), 32)), _mm256_mul_pd(_t5_11, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t5_0, _t5_1), _mm256_unpacklo_pd(_t5_2, _t5_3), 32))), _mm256_hadd_pd(_mm256_mul_pd(_t5_12, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t5_0, _t5_1), _mm256_unpacklo_pd(_t5_2, _t5_3), 32)), _mm256_mul_pd(_t5_13, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t5_0, _t5_1), _mm256_unpacklo_pd(_t5_2, _t5_3), 32))), 33), _mm256_blend_pd(_mm256_hadd_pd(_mm256_mul_pd(_t5_10, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t5_0, _t5_1), _mm256_unpacklo_pd(_t5_2, _t5_3), 32)), _mm256_mul_pd(_t5_11, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t5_0, _t5_1), _mm256_unpacklo_pd(_t5_2, _t5_3), 32))), _mm256_hadd_pd(_mm256_mul_pd(_t5_12, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t5_0, _t5_1), _mm256_unpacklo_pd(_t5_2, _t5_3), 32)), _mm256_mul_pd(_t5_13, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t5_0, _t5_1), _mm256_unpacklo_pd(_t5_2, _t5_3), 32))), 12));

      // 4-BLAC: 4x1 - 4x1
      _t5_9 = _mm256_sub_pd(_t5_9, _t5_8);

      // AVX Storer:
      _mm256_storeu_pd(y + i150, _t5_9);
    }
  }

  _t0_7 = _mm256_shuffle_pd(_mm256_castpd128_pd256(_mm_load_sd(K + 25)), _mm256_castpd128_pd256(_mm_load_sd(K + 37)), 0);
  _t0_2 = _mm256_permute2f128_pd(_mm256_unpacklo_pd(_mm256_castpd128_pd256(_mm_load_sd(K + 12)), _mm256_castpd128_pd256(_mm_load_sd(K + 24))), _mm256_castpd128_pd256(_mm_load_sd(K + 36)), 32);
  _t0_11 = _mm256_castpd128_pd256(_mm_load_sd(&(K[39])));
  _t0_3 = _mm256_castpd128_pd256(_mm_load_sd(&(K[13])));
  _t0_0 = _mm256_castpd128_pd256(_mm_load_sd(&(K[0])));
  _t0_8 = _mm256_castpd128_pd256(_mm_load_sd(&(K[26])));
  _t0_10 = _mm256_castpd128_pd256(_mm_load_sd(&(K[38])));
  _t6_0 = _mm256_castpd128_pd256(_mm_load_sd(&(y[3])));
  _t6_1 = _mm256_maskload_pd(y, _mm256_setr_epi64x((__int64)1 << 63, (__int64)1 << 63, (__int64)1 << 63, 0));

  // Generating : a[12,1] = S(h(1, 12, 3), ( G(h(1, 12, 3), a[12,1],h(1, 1, 0)) Div G(h(1, 12, 3), L0[12,12],h(1, 12, 3)) ),h(1, 1, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t6_6 = _t6_0;

  // AVX Loader:

  // 1x1 -> 1x4
  _t6_7 = _t0_11;

  // 4-BLAC: 1x4 / 1x4
  _t6_8 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t6_6), _mm256_castpd256_pd128(_t6_7)));

  // AVX Storer:
  _t6_0 = _t6_8;

  // Generating : a[12,1] = S(h(3, 12, 0), ( G(h(3, 12, 0), a[12,1],h(1, 1, 0)) - ( T( G(h(1, 12, 3), L0[12,12],h(3, 12, 0)) ) Kro G(h(1, 12, 3), a[12,1],h(1, 1, 0)) ) ),h(1, 1, 0))

  // AVX Loader:

  // 3x1 -> 4x1
  _t6_9 = _t6_1;

  // AVX Loader:

  // 1x3 -> 1x4
  _t6_10 = _mm256_blend_pd(_mm256_permute2f128_pd(_t0_2, _t0_10, 33), _mm256_blend_pd(_mm256_setzero_pd(), _t0_7, 2), 10);

  // 4-BLAC: (1x4)^T
  _t6_11 = _t6_10;

  // AVX Loader:

  // 1x1 -> 1x4
  _t6_12 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t6_0, _t6_0, 32), _mm256_permute2f128_pd(_t6_0, _t6_0, 32), 0);

  // 4-BLAC: 4x1 Kro 1x4
  _t6_13 = _mm256_mul_pd(_t6_11, _t6_12);

  // 4-BLAC: 4x1 - 4x1
  _t6_14 = _mm256_sub_pd(_t6_9, _t6_13);

  // AVX Storer:
  _t6_1 = _t6_14;

  // Generating : a[12,1] = S(h(1, 12, 2), ( G(h(1, 12, 2), a[12,1],h(1, 1, 0)) Div G(h(1, 12, 2), L0[12,12],h(1, 12, 2)) ),h(1, 1, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t6_15 = _mm256_permute2f128_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t6_1, 4), _mm256_blend_pd(_mm256_setzero_pd(), _t6_1, 4), 129);

  // AVX Loader:

  // 1x1 -> 1x4
  _t6_16 = _t0_8;

  // 4-BLAC: 1x4 / 1x4
  _t6_17 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t6_15), _mm256_castpd256_pd128(_t6_16)));

  // AVX Storer:
  _t6_2 = _t6_17;

  // Generating : a[12,1] = S(h(2, 12, 0), ( G(h(2, 12, 0), a[12,1],h(1, 1, 0)) - ( T( G(h(1, 12, 2), L0[12,12],h(2, 12, 0)) ) Kro G(h(1, 12, 2), a[12,1],h(1, 1, 0)) ) ),h(1, 1, 0))

  // AVX Loader:

  // 2x1 -> 4x1
  _t6_18 = _mm256_blend_pd(_mm256_setzero_pd(), _t6_1, 3);

  // AVX Loader:

  // 1x2 -> 1x4
  _t6_19 = _mm256_shuffle_pd(_mm256_blend_pd(_t0_2, _mm256_setzero_pd(), 12), _mm256_blend_pd(_t0_7, _mm256_setzero_pd(), 12), 1);

  // 4-BLAC: (1x4)^T
  _t6_20 = _t6_19;

  // AVX Loader:

  // 1x1 -> 1x4
  _t6_21 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t6_2, _t6_2, 32), _mm256_permute2f128_pd(_t6_2, _t6_2, 32), 0);

  // 4-BLAC: 4x1 Kro 1x4
  _t6_22 = _mm256_mul_pd(_t6_20, _t6_21);

  // 4-BLAC: 4x1 - 4x1
  _t6_23 = _mm256_sub_pd(_t6_18, _t6_22);

  // AVX Storer:
  _t6_3 = _t6_23;

  // Generating : a[12,1] = S(h(1, 12, 1), ( G(h(1, 12, 1), a[12,1],h(1, 1, 0)) Div G(h(1, 12, 1), L0[12,12],h(1, 12, 1)) ),h(1, 1, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t6_24 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t6_3, 2), _mm256_setzero_pd());

  // AVX Loader:

  // 1x1 -> 1x4
  _t6_25 = _t0_3;

  // 4-BLAC: 1x4 / 1x4
  _t6_26 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t6_24), _mm256_castpd256_pd128(_t6_25)));

  // AVX Storer:
  _t6_4 = _t6_26;

  // Generating : a[12,1] = S(h(1, 12, 0), ( G(h(1, 12, 0), a[12,1],h(1, 1, 0)) - ( T( G(h(1, 12, 1), L0[12,12],h(1, 12, 0)) ) Kro G(h(1, 12, 1), a[12,1],h(1, 1, 0)) ) ),h(1, 1, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t6_27 = _mm256_blend_pd(_mm256_setzero_pd(), _t6_3, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t6_28 = _mm256_blend_pd(_mm256_setzero_pd(), _t0_2, 1);

  // 4-BLAC: (4x1)^T
  _t6_29 = _t6_28;

  // AVX Loader:

  // 1x1 -> 1x4
  _t6_30 = _t6_4;

  // 4-BLAC: 1x4 Kro 1x4
  _t6_31 = _mm256_mul_pd(_t6_29, _t6_30);

  // 4-BLAC: 1x4 - 1x4
  _t6_32 = _mm256_sub_pd(_t6_27, _t6_31);

  // AVX Storer:
  _t6_5 = _t6_32;

  // Generating : a[12,1] = S(h(1, 12, 0), ( G(h(1, 12, 0), a[12,1],h(1, 1, 0)) Div G(h(1, 12, 0), L0[12,12],h(1, 12, 0)) ),h(1, 1, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t6_33 = _t6_5;

  // AVX Loader:

  // 1x1 -> 1x4
  _t6_34 = _t0_0;

  // 4-BLAC: 1x4 / 1x4
  _t6_35 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t6_33), _mm256_castpd256_pd128(_t6_34)));

  // AVX Storer:
  _t6_5 = _t6_35;

  // Generating : kx[12,1] = ( Sum_{j151} ( S(h(4, 12, j151), ( G(h(4, 12, j151), X[12,12],h(4, 12, 0)) * G(h(4, 12, 0), x[12,1],h(1, 1, 0)) ),h(1, 1, 0)) ) + Sum_{i150} ( Sum_{j151} ( $(h(4, 12, j151), ( G(h(4, 12, j151), X[12,12],h(4, 12, i150)) * G(h(4, 12, i150), x[12,1],h(1, 1, 0)) ),h(1, 1, 0)) ) ) )

  // AVX Loader:


  for( int j151 = 0; j151 <= 11; j151+=4 ) {
    _t7_4 = _mm256_loadu_pd(X + 12*j151);
    _t7_3 = _mm256_loadu_pd(X + 12*j151 + 12);
    _t7_2 = _mm256_loadu_pd(X + 12*j151 + 24);
    _t7_1 = _mm256_loadu_pd(X + 12*j151 + 36);
    _t7_0 = _mm256_loadu_pd(x);

    // AVX Loader:

    // 4-BLAC: 4x4 * 4x1
    _t7_5 = _mm256_add_pd(_mm256_permute2f128_pd(_mm256_hadd_pd(_mm256_mul_pd(_t7_4, _t7_0), _mm256_mul_pd(_t7_3, _t7_0)), _mm256_hadd_pd(_mm256_mul_pd(_t7_2, _t7_0), _mm256_mul_pd(_t7_1, _t7_0)), 33), _mm256_blend_pd(_mm256_hadd_pd(_mm256_mul_pd(_t7_4, _t7_0), _mm256_mul_pd(_t7_3, _t7_0)), _mm256_hadd_pd(_mm256_mul_pd(_t7_2, _t7_0), _mm256_mul_pd(_t7_1, _t7_0)), 12));

    // AVX Storer:
    _mm256_storeu_pd(kx + j151, _t7_5);
  }


  for( int i150 = 4; i150 <= 11; i150+=4 ) {

    // AVX Loader:

    for( int j151 = 0; j151 <= 11; j151+=4 ) {
      _t8_4 = _mm256_loadu_pd(X + i150 + 12*j151);
      _t8_3 = _mm256_loadu_pd(X + i150 + 12*j151 + 12);
      _t8_2 = _mm256_loadu_pd(X + i150 + 12*j151 + 24);
      _t8_1 = _mm256_loadu_pd(X + i150 + 12*j151 + 36);
      _t8_0 = _mm256_loadu_pd(x + i150);
      _t8_5 = _mm256_loadu_pd(kx + j151);

      // AVX Loader:

      // AVX Loader:

      // 4-BLAC: 4x4 * 4x1
      _t8_6 = _mm256_add_pd(_mm256_permute2f128_pd(_mm256_hadd_pd(_mm256_mul_pd(_t8_4, _t8_0), _mm256_mul_pd(_t8_3, _t8_0)), _mm256_hadd_pd(_mm256_mul_pd(_t8_2, _t8_0), _mm256_mul_pd(_t8_1, _t8_0)), 33), _mm256_blend_pd(_mm256_hadd_pd(_mm256_mul_pd(_t8_4, _t8_0), _mm256_mul_pd(_t8_3, _t8_0)), _mm256_hadd_pd(_mm256_mul_pd(_t8_2, _t8_0), _mm256_mul_pd(_t8_1, _t8_0)), 12));

      // AVX Loader:

      // 4-BLAC: 4x1 + 4x1
      _t8_5 = _mm256_add_pd(_t8_5, _t8_6);

      // AVX Storer:
      _mm256_storeu_pd(kx + j151, _t8_5);
    }
  }

  _t9_0 = _mm256_loadu_pd(kx);

  // Generating : f[1,1] = ( S(h(1, 1, 0), ( T( G(h(4, 12, 0), kx[12,1],h(1, 1, 0)) ) * G(h(4, 12, 0), y[12,1],h(1, 1, 0)) ),h(1, 1, 0)) + Sum_{i150} ( $(h(1, 1, 0), ( T( G(h(4, 12, i150), kx[12,1],h(1, 1, 0)) ) * G(h(4, 12, i150), y[12,1],h(1, 1, 0)) ),h(1, 1, 0)) ) )

  // AVX Loader:

  // 4-BLAC: (4x1)^T
  _t9_3 = _t9_0;

  // AVX Loader:

  // 4-BLAC: 1x4 * 4x1
  _t9_2 = _mm256_add_pd(_mm256_blend_pd(_mm256_add_pd(_mm256_mul_pd(_t9_3, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t6_5, _t6_4), _mm256_unpacklo_pd(_t6_2, _t6_0), 32)), _mm256_permute2f128_pd(_mm256_mul_pd(_t9_3, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t6_5, _t6_4), _mm256_unpacklo_pd(_t6_2, _t6_0), 32)), _mm256_mul_pd(_t9_3, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t6_5, _t6_4), _mm256_unpacklo_pd(_t6_2, _t6_0), 32)), 129)), _mm256_setzero_pd(), 14), _mm256_shuffle_pd(_mm256_add_pd(_mm256_mul_pd(_t9_3, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t6_5, _t6_4), _mm256_unpacklo_pd(_t6_2, _t6_0), 32)), _mm256_permute2f128_pd(_mm256_mul_pd(_t9_3, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t6_5, _t6_4), _mm256_unpacklo_pd(_t6_2, _t6_0), 32)), _mm256_mul_pd(_t9_3, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t6_5, _t6_4), _mm256_unpacklo_pd(_t6_2, _t6_0), 32)), 129)), _mm256_add_pd(_mm256_mul_pd(_t9_3, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t6_5, _t6_4), _mm256_unpacklo_pd(_t6_2, _t6_0), 32)), _mm256_permute2f128_pd(_mm256_mul_pd(_t9_3, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t6_5, _t6_4), _mm256_unpacklo_pd(_t6_2, _t6_0), 32)), _mm256_mul_pd(_t9_3, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t6_5, _t6_4), _mm256_unpacklo_pd(_t6_2, _t6_0), 32)), 129)), 1));

  // AVX Storer:
  _t9_1 = _t9_2;


  for( int i150 = 4; i150 <= 11; i150+=4 ) {
    _t10_1 = _mm256_loadu_pd(kx + i150);
    _t10_0 = _mm256_loadu_pd(y + i150);

    // AVX Loader:

    // 4-BLAC: (4x1)^T
    _t10_4 = _t10_1;

    // AVX Loader:

    // 4-BLAC: 1x4 * 4x1
    _t10_3 = _mm256_add_pd(_mm256_blend_pd(_mm256_add_pd(_mm256_mul_pd(_t10_4, _t10_0), _mm256_permute2f128_pd(_mm256_mul_pd(_t10_4, _t10_0), _mm256_mul_pd(_t10_4, _t10_0), 129)), _mm256_setzero_pd(), 14), _mm256_shuffle_pd(_mm256_add_pd(_mm256_mul_pd(_t10_4, _t10_0), _mm256_permute2f128_pd(_mm256_mul_pd(_t10_4, _t10_0), _mm256_mul_pd(_t10_4, _t10_0), 129)), _mm256_add_pd(_mm256_mul_pd(_t10_4, _t10_0), _mm256_permute2f128_pd(_mm256_mul_pd(_t10_4, _t10_0), _mm256_mul_pd(_t10_4, _t10_0), 129)), 1));

    // AVX Loader:

    // 1x1 -> 1x4
    _t10_2 = _t9_1;

    // 4-BLAC: 1x4 + 1x4
    _t10_2 = _mm256_add_pd(_t10_2, _t10_3);

    // AVX Storer:
    _t9_1 = _t10_2;
  }


  for( int fi18 = 0; fi18 <= 7; fi18+=4 ) {
    _t11_7 = _mm256_castpd128_pd256(_mm_load_sd(&(kx[fi18])));
    _t11_6 = _mm256_castpd128_pd256(_mm_load_sd(&(K[13*fi18])));
    _t11_8 = _mm256_maskload_pd(kx + fi18 + 1, _mm256_setr_epi64x((__int64)1 << 63, (__int64)1 << 63, (__int64)1 << 63, 0));
    _t11_5 = _mm256_permute2f128_pd(_mm256_unpacklo_pd(_mm256_castpd128_pd256(_mm_load_sd(K + 13*fi18 + 12)), _mm256_castpd128_pd256(_mm_load_sd(K + 13*fi18 + 24))), _mm256_castpd128_pd256(_mm_load_sd(K + 13*fi18 + 36)), 32);
    _t11_4 = _mm256_castpd128_pd256(_mm_load_sd(&(K[13*fi18 + 13])));
    _t11_3 = _mm256_shuffle_pd(_mm256_castpd128_pd256(_mm_load_sd(K + 13*fi18 + 25)), _mm256_castpd128_pd256(_mm_load_sd(K + 13*fi18 + 37)), 0);
    _t11_2 = _mm256_castpd128_pd256(_mm_load_sd(&(K[13*fi18 + 26])));
    _t11_1 = _mm256_castpd128_pd256(_mm_load_sd(&(K[13*fi18 + 38])));
    _t11_0 = _mm256_castpd128_pd256(_mm_load_sd(&(K[13*fi18 + 39])));

    // Generating : v[12,1] = S(h(1, 12, fi18), ( G(h(1, 12, fi18), v[12,1],h(1, 1, 0)) Div G(h(1, 12, fi18), L0[12,12],h(1, 12, fi18)) ),h(1, 1, 0))

    // AVX Loader:

    // 1x1 -> 1x4
    _t11_13 = _t11_7;

    // AVX Loader:

    // 1x1 -> 1x4
    _t11_14 = _t11_6;

    // 4-BLAC: 1x4 / 1x4
    _t11_15 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t11_13), _mm256_castpd256_pd128(_t11_14)));

    // AVX Storer:
    _t11_7 = _t11_15;

    // Generating : v[12,1] = S(h(3, 12, fi18 + 1), ( G(h(3, 12, fi18 + 1), v[12,1],h(1, 1, 0)) - ( G(h(3, 12, fi18 + 1), L0[12,12],h(1, 12, fi18)) Kro G(h(1, 12, fi18), v[12,1],h(1, 1, 0)) ) ),h(1, 1, 0))

    // AVX Loader:

    // 3x1 -> 4x1
    _t11_16 = _t11_8;

    // AVX Loader:

    // 3x1 -> 4x1
    _t11_17 = _t11_5;

    // AVX Loader:

    // 1x1 -> 1x4
    _t11_18 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t11_7, _t11_7, 32), _mm256_permute2f128_pd(_t11_7, _t11_7, 32), 0);

    // 4-BLAC: 4x1 Kro 1x4
    _t11_19 = _mm256_mul_pd(_t11_17, _t11_18);

    // 4-BLAC: 4x1 - 4x1
    _t11_20 = _mm256_sub_pd(_t11_16, _t11_19);

    // AVX Storer:
    _t11_8 = _t11_20;

    // Generating : v[12,1] = S(h(1, 12, fi18 + 1), ( G(h(1, 12, fi18 + 1), v[12,1],h(1, 1, 0)) Div G(h(1, 12, fi18 + 1), L0[12,12],h(1, 12, fi18 + 1)) ),h(1, 1, 0))

    // AVX Loader:

    // 1x1 -> 1x4
    _t11_21 = _mm256_blend_pd(_mm256_setzero_pd(), _t11_8, 1);

    // AVX Loader:

    // 1x1 -> 1x4
    _t11_22 = _t11_4;

    // 4-BLAC: 1x4 / 1x4
    _t11_23 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t11_21), _mm256_castpd256_pd128(_t11_22)));

    // AVX Storer:
    _t11_9 = _t11_23;

    // Generating : v[12,1] = S(h(2, 12, fi18 + 2), ( G(h(2, 12, fi18 + 2), v[12,1],h(1, 1, 0)) - ( G(h(2, 12, fi18 + 2), L0[12,12],h(1, 12, fi18 + 1)) Kro G(h(1, 12, fi18 + 1), v[12,1],h(1, 1, 0)) ) ),h(1, 1, 0))

    // AVX Loader:

    // 2x1 -> 4x1
    _t11_24 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t11_8, 6), _mm256_permute2f128_pd(_t11_8, _t11_8, 129), 5);

    // AVX Loader:

    // 2x1 -> 4x1
    _t11_25 = _t11_3;

    // AVX Loader:

    // 1x1 -> 1x4
    _t11_26 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t11_9, _t11_9, 32), _mm256_permute2f128_pd(_t11_9, _t11_9, 32), 0);

    // 4-BLAC: 4x1 Kro 1x4
    _t11_27 = _mm256_mul_pd(_t11_25, _t11_26);

    // 4-BLAC: 4x1 - 4x1
    _t11_28 = _mm256_sub_pd(_t11_24, _t11_27);

    // AVX Storer:
    _t11_10 = _t11_28;

    // Generating : v[12,1] = S(h(1, 12, fi18 + 2), ( G(h(1, 12, fi18 + 2), v[12,1],h(1, 1, 0)) Div G(h(1, 12, fi18 + 2), L0[12,12],h(1, 12, fi18 + 2)) ),h(1, 1, 0))

    // AVX Loader:

    // 1x1 -> 1x4
    _t11_29 = _mm256_blend_pd(_mm256_setzero_pd(), _t11_10, 1);

    // AVX Loader:

    // 1x1 -> 1x4
    _t11_30 = _t11_2;

    // 4-BLAC: 1x4 / 1x4
    _t11_31 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t11_29), _mm256_castpd256_pd128(_t11_30)));

    // AVX Storer:
    _t11_11 = _t11_31;

    // Generating : v[12,1] = S(h(1, 12, fi18 + 3), ( G(h(1, 12, fi18 + 3), v[12,1],h(1, 1, 0)) - ( G(h(1, 12, fi18 + 3), L0[12,12],h(1, 12, fi18 + 2)) Kro G(h(1, 12, fi18 + 2), v[12,1],h(1, 1, 0)) ) ),h(1, 1, 0))

    // AVX Loader:

    // 1x1 -> 1x4
    _t11_32 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t11_10, 2), _mm256_setzero_pd());

    // AVX Loader:

    // 1x1 -> 1x4
    _t11_33 = _t11_1;

    // AVX Loader:

    // 1x1 -> 1x4
    _t11_34 = _t11_11;

    // 4-BLAC: 1x4 Kro 1x4
    _t11_35 = _mm256_mul_pd(_t11_33, _t11_34);

    // 4-BLAC: 1x4 - 1x4
    _t11_36 = _mm256_sub_pd(_t11_32, _t11_35);

    // AVX Storer:
    _t11_12 = _t11_36;

    // Generating : v[12,1] = S(h(1, 12, fi18 + 3), ( G(h(1, 12, fi18 + 3), v[12,1],h(1, 1, 0)) Div G(h(1, 12, fi18 + 3), L0[12,12],h(1, 12, fi18 + 3)) ),h(1, 1, 0))

    // AVX Loader:

    // 1x1 -> 1x4
    _t11_37 = _t11_12;

    // AVX Loader:

    // 1x1 -> 1x4
    _t11_38 = _t11_0;

    // 4-BLAC: 1x4 / 1x4
    _t11_39 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t11_37), _mm256_castpd256_pd128(_t11_38)));

    // AVX Storer:
    _t11_12 = _t11_39;

    // Generating : v[12,1] = Sum_{i150} ( S(h(4, 12, fi18 + i150 + 4), ( G(h(4, 12, fi18 + i150 + 4), v[12,1],h(1, 1, 0)) - ( G(h(4, 12, fi18 + i150 + 4), L0[12,12],h(4, 12, fi18)) * G(h(4, 12, fi18), v[12,1],h(1, 1, 0)) ) ),h(1, 1, 0)) )

    // AVX Loader:
    _mm_store_sd(&(kx[fi18]), _mm256_castpd256_pd128(_t11_7));
    _mm_store_sd(&(kx[fi18 + 1]), _mm256_castpd256_pd128(_t11_9));
    _mm_store_sd(&(kx[fi18 + 2]), _mm256_castpd256_pd128(_t11_11));
    _mm_store_sd(&(kx[fi18 + 3]), _mm256_castpd256_pd128(_t11_12));

    for( int i150 = 0; i150 <= -fi18 + 7; i150+=4 ) {
      _t12_9 = _mm256_loadu_pd(kx + fi18 + i150 + 4);
      _t12_7 = _mm256_loadu_pd(K + 13*fi18 + 12*i150 + 48);
      _t12_6 = _mm256_loadu_pd(K + 13*fi18 + 12*i150 + 60);
      _t12_5 = _mm256_loadu_pd(K + 13*fi18 + 12*i150 + 72);
      _t12_4 = _mm256_loadu_pd(K + 13*fi18 + 12*i150 + 84);
      _t12_3 = _mm256_castpd128_pd256(_mm_load_sd(&(kx[fi18])));
      _t12_2 = _mm256_castpd128_pd256(_mm_load_sd(&(kx[fi18 + 1])));
      _t12_1 = _mm256_castpd128_pd256(_mm_load_sd(&(kx[fi18 + 2])));
      _t12_0 = _mm256_castpd128_pd256(_mm_load_sd(&(kx[fi18 + 3])));

      // AVX Loader:

      // AVX Loader:

      // AVX Loader:

      // 4-BLAC: 4x4 * 4x1
      _t12_8 = _mm256_add_pd(_mm256_permute2f128_pd(_mm256_hadd_pd(_mm256_mul_pd(_t12_7, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t12_3, _t12_2), _mm256_unpacklo_pd(_t12_1, _t12_0), 32)), _mm256_mul_pd(_t12_6, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t12_3, _t12_2), _mm256_unpacklo_pd(_t12_1, _t12_0), 32))), _mm256_hadd_pd(_mm256_mul_pd(_t12_5, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t12_3, _t12_2), _mm256_unpacklo_pd(_t12_1, _t12_0), 32)), _mm256_mul_pd(_t12_4, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t12_3, _t12_2), _mm256_unpacklo_pd(_t12_1, _t12_0), 32))), 33), _mm256_blend_pd(_mm256_hadd_pd(_mm256_mul_pd(_t12_7, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t12_3, _t12_2), _mm256_unpacklo_pd(_t12_1, _t12_0), 32)), _mm256_mul_pd(_t12_6, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t12_3, _t12_2), _mm256_unpacklo_pd(_t12_1, _t12_0), 32))), _mm256_hadd_pd(_mm256_mul_pd(_t12_5, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t12_3, _t12_2), _mm256_unpacklo_pd(_t12_1, _t12_0), 32)), _mm256_mul_pd(_t12_4, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t12_3, _t12_2), _mm256_unpacklo_pd(_t12_1, _t12_0), 32))), 12));

      // 4-BLAC: 4x1 - 4x1
      _t12_9 = _mm256_sub_pd(_t12_9, _t12_8);

      // AVX Storer:
      _mm256_storeu_pd(kx + fi18 + i150 + 4, _t12_9);
    }
  }

  _t0_113 = _mm256_castpd128_pd256(_mm_load_sd(&(K[143])));
  _t0_109 = _mm256_shuffle_pd(_mm256_castpd128_pd256(_mm_load_sd(K + 129)), _mm256_castpd128_pd256(_mm_load_sd(K + 141)), 0);
  _t0_64 = _mm256_castpd128_pd256(_mm_load_sd(&(K[104])));
  _t0_105 = _mm256_castpd128_pd256(_mm_load_sd(&(K[117])));
  _t0_112 = _mm256_castpd128_pd256(_mm_load_sd(&(K[142])));
  _t0_110 = _mm256_castpd128_pd256(_mm_load_sd(&(K[130])));
  _t0_104 = _mm256_permute2f128_pd(_mm256_unpacklo_pd(_mm256_castpd128_pd256(_mm_load_sd(K + 116)), _mm256_castpd128_pd256(_mm_load_sd(K + 128))), _mm256_castpd128_pd256(_mm_load_sd(K + 140)), 32);
  _t13_2 = _mm256_castpd128_pd256(_mm_load_sd(&(kx[8])));
  _t13_3 = _mm256_maskload_pd(kx + 9, _mm256_setr_epi64x((__int64)1 << 63, (__int64)1 << 63, (__int64)1 << 63, 0));
  _t13_1 = _mm256_loadu_pd(x);
  _t13_0 = _mm256_loadu_pd(kx);

  // Generating : v[12,1] = S(h(1, 12, 8), ( G(h(1, 12, 8), v[12,1],h(1, 1, 0)) Div G(h(1, 12, 8), L0[12,12],h(1, 12, 8)) ),h(1, 1, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t13_9 = _t13_2;

  // AVX Loader:

  // 1x1 -> 1x4
  _t13_10 = _t0_64;

  // 4-BLAC: 1x4 / 1x4
  _t13_11 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t13_9), _mm256_castpd256_pd128(_t13_10)));

  // AVX Storer:
  _t13_2 = _t13_11;

  // Generating : v[12,1] = S(h(3, 12, 9), ( G(h(3, 12, 9), v[12,1],h(1, 1, 0)) - ( G(h(3, 12, 9), L0[12,12],h(1, 12, 8)) Kro G(h(1, 12, 8), v[12,1],h(1, 1, 0)) ) ),h(1, 1, 0))

  // AVX Loader:

  // 3x1 -> 4x1
  _t13_12 = _t13_3;

  // AVX Loader:

  // 3x1 -> 4x1
  _t13_13 = _t0_104;

  // AVX Loader:

  // 1x1 -> 1x4
  _t13_14 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t13_2, _t13_2, 32), _mm256_permute2f128_pd(_t13_2, _t13_2, 32), 0);

  // 4-BLAC: 4x1 Kro 1x4
  _t13_15 = _mm256_mul_pd(_t13_13, _t13_14);

  // 4-BLAC: 4x1 - 4x1
  _t13_16 = _mm256_sub_pd(_t13_12, _t13_15);

  // AVX Storer:
  _t13_3 = _t13_16;

  // Generating : v[12,1] = S(h(1, 12, 9), ( G(h(1, 12, 9), v[12,1],h(1, 1, 0)) Div G(h(1, 12, 9), L0[12,12],h(1, 12, 9)) ),h(1, 1, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t13_17 = _mm256_blend_pd(_mm256_setzero_pd(), _t13_3, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t13_18 = _t0_105;

  // 4-BLAC: 1x4 / 1x4
  _t13_19 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t13_17), _mm256_castpd256_pd128(_t13_18)));

  // AVX Storer:
  _t13_4 = _t13_19;

  // Generating : v[12,1] = S(h(2, 12, 10), ( G(h(2, 12, 10), v[12,1],h(1, 1, 0)) - ( G(h(2, 12, 10), L0[12,12],h(1, 12, 9)) Kro G(h(1, 12, 9), v[12,1],h(1, 1, 0)) ) ),h(1, 1, 0))

  // AVX Loader:

  // 2x1 -> 4x1
  _t13_20 = _mm256_shuffle_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t13_3, 6), _mm256_permute2f128_pd(_t13_3, _t13_3, 129), 5);

  // AVX Loader:

  // 2x1 -> 4x1
  _t13_21 = _t0_109;

  // AVX Loader:

  // 1x1 -> 1x4
  _t13_22 = _mm256_shuffle_pd(_mm256_permute2f128_pd(_t13_4, _t13_4, 32), _mm256_permute2f128_pd(_t13_4, _t13_4, 32), 0);

  // 4-BLAC: 4x1 Kro 1x4
  _t13_23 = _mm256_mul_pd(_t13_21, _t13_22);

  // 4-BLAC: 4x1 - 4x1
  _t13_24 = _mm256_sub_pd(_t13_20, _t13_23);

  // AVX Storer:
  _t13_5 = _t13_24;

  // Generating : v[12,1] = S(h(1, 12, 10), ( G(h(1, 12, 10), v[12,1],h(1, 1, 0)) Div G(h(1, 12, 10), L0[12,12],h(1, 12, 10)) ),h(1, 1, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t13_25 = _mm256_blend_pd(_mm256_setzero_pd(), _t13_5, 1);

  // AVX Loader:

  // 1x1 -> 1x4
  _t13_26 = _t0_110;

  // 4-BLAC: 1x4 / 1x4
  _t13_27 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t13_25), _mm256_castpd256_pd128(_t13_26)));

  // AVX Storer:
  _t13_6 = _t13_27;

  // Generating : v[12,1] = S(h(1, 12, 11), ( G(h(1, 12, 11), v[12,1],h(1, 1, 0)) - ( G(h(1, 12, 11), L0[12,12],h(1, 12, 10)) Kro G(h(1, 12, 10), v[12,1],h(1, 1, 0)) ) ),h(1, 1, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t13_28 = _mm256_unpackhi_pd(_mm256_blend_pd(_mm256_setzero_pd(), _t13_5, 2), _mm256_setzero_pd());

  // AVX Loader:

  // 1x1 -> 1x4
  _t13_29 = _t0_112;

  // AVX Loader:

  // 1x1 -> 1x4
  _t13_30 = _t13_6;

  // 4-BLAC: 1x4 Kro 1x4
  _t13_31 = _mm256_mul_pd(_t13_29, _t13_30);

  // 4-BLAC: 1x4 - 1x4
  _t13_32 = _mm256_sub_pd(_t13_28, _t13_31);

  // AVX Storer:
  _t13_7 = _t13_32;

  // Generating : v[12,1] = S(h(1, 12, 11), ( G(h(1, 12, 11), v[12,1],h(1, 1, 0)) Div G(h(1, 12, 11), L0[12,12],h(1, 12, 11)) ),h(1, 1, 0))

  // AVX Loader:

  // 1x1 -> 1x4
  _t13_33 = _t13_7;

  // AVX Loader:

  // 1x1 -> 1x4
  _t13_34 = _t0_113;

  // 4-BLAC: 1x4 / 1x4
  _t13_35 = _mm256_castpd128_pd256(_mm_div_pd(_mm256_castpd256_pd128(_t13_33), _mm256_castpd256_pd128(_t13_34)));

  // AVX Storer:
  _t13_7 = _t13_35;

  // Generating : var[1,1] = ( ( S(h(1, 1, 0), ( ( T( G(h(4, 12, 0), x[12,1],h(1, 1, 0)) ) * G(h(4, 12, 0), x[12,1],h(1, 1, 0)) ) - ( T( G(h(4, 12, 0), kx[12,1],h(1, 1, 0)) ) * G(h(4, 12, 0), kx[12,1],h(1, 1, 0)) ) ),h(1, 1, 0)) + Sum_{j151} ( $(h(1, 1, 0), ( T( G(h(4, 12, j151), x[12,1],h(1, 1, 0)) ) * G(h(4, 12, j151), x[12,1],h(1, 1, 0)) ),h(1, 1, 0)) ) ) + Sum_{i150} ( -$(h(1, 1, 0), ( T( G(h(4, 12, i150), kx[12,1],h(1, 1, 0)) ) * G(h(4, 12, i150), kx[12,1],h(1, 1, 0)) ),h(1, 1, 0)) ) )

  // AVX Loader:

  // 4-BLAC: (4x1)^T
  _t13_39 = _t13_1;

  // AVX Loader:

  // 4-BLAC: 1x4 * 4x1
  _t13_36 = _mm256_add_pd(_mm256_blend_pd(_mm256_add_pd(_mm256_mul_pd(_t13_39, _t13_1), _mm256_permute2f128_pd(_mm256_mul_pd(_t13_39, _t13_1), _mm256_mul_pd(_t13_39, _t13_1), 129)), _mm256_setzero_pd(), 14), _mm256_shuffle_pd(_mm256_add_pd(_mm256_mul_pd(_t13_39, _t13_1), _mm256_permute2f128_pd(_mm256_mul_pd(_t13_39, _t13_1), _mm256_mul_pd(_t13_39, _t13_1), 129)), _mm256_add_pd(_mm256_mul_pd(_t13_39, _t13_1), _mm256_permute2f128_pd(_mm256_mul_pd(_t13_39, _t13_1), _mm256_mul_pd(_t13_39, _t13_1), 129)), 1));

  // AVX Loader:

  // 4-BLAC: (4x1)^T
  _t13_40 = _t13_0;

  // AVX Loader:

  // 4-BLAC: 1x4 * 4x1
  _t13_37 = _mm256_add_pd(_mm256_blend_pd(_mm256_add_pd(_mm256_mul_pd(_t13_40, _t13_0), _mm256_permute2f128_pd(_mm256_mul_pd(_t13_40, _t13_0), _mm256_mul_pd(_t13_40, _t13_0), 129)), _mm256_setzero_pd(), 14), _mm256_shuffle_pd(_mm256_add_pd(_mm256_mul_pd(_t13_40, _t13_0), _mm256_permute2f128_pd(_mm256_mul_pd(_t13_40, _t13_0), _mm256_mul_pd(_t13_40, _t13_0), 129)), _mm256_add_pd(_mm256_mul_pd(_t13_40, _t13_0), _mm256_permute2f128_pd(_mm256_mul_pd(_t13_40, _t13_0), _mm256_mul_pd(_t13_40, _t13_0), 129)), 1));

  // 4-BLAC: 1x4 - 1x4
  _t13_38 = _mm256_sub_pd(_t13_36, _t13_37);

  // AVX Storer:
  _t13_8 = _t13_38;


  for( int j151 = 4; j151 <= 11; j151+=4 ) {
    _t14_0 = _mm256_loadu_pd(x + j151);

    // AVX Loader:

    // 4-BLAC: (4x1)^T
    _t14_3 = _t14_0;

    // AVX Loader:

    // 4-BLAC: 1x4 * 4x1
    _t14_2 = _mm256_add_pd(_mm256_blend_pd(_mm256_add_pd(_mm256_mul_pd(_t14_3, _t14_0), _mm256_permute2f128_pd(_mm256_mul_pd(_t14_3, _t14_0), _mm256_mul_pd(_t14_3, _t14_0), 129)), _mm256_setzero_pd(), 14), _mm256_shuffle_pd(_mm256_add_pd(_mm256_mul_pd(_t14_3, _t14_0), _mm256_permute2f128_pd(_mm256_mul_pd(_t14_3, _t14_0), _mm256_mul_pd(_t14_3, _t14_0), 129)), _mm256_add_pd(_mm256_mul_pd(_t14_3, _t14_0), _mm256_permute2f128_pd(_mm256_mul_pd(_t14_3, _t14_0), _mm256_mul_pd(_t14_3, _t14_0), 129)), 1));

    // AVX Loader:

    // 1x1 -> 1x4
    _t14_1 = _t13_8;

    // 4-BLAC: 1x4 + 1x4
    _t14_1 = _mm256_add_pd(_t14_1, _t14_2);

    // AVX Storer:
    _t13_8 = _t14_1;
  }

  _mm_store_sd(&(kx[8]), _mm256_castpd256_pd128(_t13_2));
  _mm_store_sd(&(kx[9]), _mm256_castpd256_pd128(_t13_4));
  _mm_store_sd(&(kx[10]), _mm256_castpd256_pd128(_t13_6));
  _mm_store_sd(&(kx[11]), _mm256_castpd256_pd128(_t13_7));

  for( int i150 = 4; i150 <= 11; i150+=4 ) {
    _t15_0 = _mm256_loadu_pd(kx + i150);

    // AVX Loader:

    // 4-BLAC: (4x1)^T
    _t15_3 = _t15_0;

    // AVX Loader:

    // 4-BLAC: 1x4 * 4x1
    _t15_2 = _mm256_add_pd(_mm256_blend_pd(_mm256_add_pd(_mm256_mul_pd(_t15_3, _t15_0), _mm256_permute2f128_pd(_mm256_mul_pd(_t15_3, _t15_0), _mm256_mul_pd(_t15_3, _t15_0), 129)), _mm256_setzero_pd(), 14), _mm256_shuffle_pd(_mm256_add_pd(_mm256_mul_pd(_t15_3, _t15_0), _mm256_permute2f128_pd(_mm256_mul_pd(_t15_3, _t15_0), _mm256_mul_pd(_t15_3, _t15_0), 129)), _mm256_add_pd(_mm256_mul_pd(_t15_3, _t15_0), _mm256_permute2f128_pd(_mm256_mul_pd(_t15_3, _t15_0), _mm256_mul_pd(_t15_3, _t15_0), 129)), 1));

    // AVX Loader:

    // 1x1 -> 1x4
    _t15_1 = _t13_8;

    // 4-BLAC: 1x4 - 1x4
    _t15_1 = _mm256_sub_pd(_t15_1, _t15_2);

    // AVX Storer:
    _t13_8 = _t15_1;
  }


  // Generating : lp[1,1] = ( S(h(1, 1, 0), ( T( G(h(4, 12, 0), y[12,1],h(1, 1, 0)) ) * G(h(4, 12, 0), y[12,1],h(1, 1, 0)) ),h(1, 1, 0)) + Sum_{i150} ( $(h(1, 1, 0), ( T( G(h(4, 12, i150), y[12,1],h(1, 1, 0)) ) * G(h(4, 12, i150), y[12,1],h(1, 1, 0)) ),h(1, 1, 0)) ) )

  // AVX Loader:

  // 4-BLAC: (4x1)^T
  _t16_2 = _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t6_5, _t6_4), _mm256_unpacklo_pd(_t6_2, _t6_0), 32);

  // AVX Loader:

  // 4-BLAC: 1x4 * 4x1
  _t16_1 = _mm256_add_pd(_mm256_blend_pd(_mm256_add_pd(_mm256_mul_pd(_t16_2, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t6_5, _t6_4), _mm256_unpacklo_pd(_t6_2, _t6_0), 32)), _mm256_permute2f128_pd(_mm256_mul_pd(_t16_2, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t6_5, _t6_4), _mm256_unpacklo_pd(_t6_2, _t6_0), 32)), _mm256_mul_pd(_t16_2, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t6_5, _t6_4), _mm256_unpacklo_pd(_t6_2, _t6_0), 32)), 129)), _mm256_setzero_pd(), 14), _mm256_shuffle_pd(_mm256_add_pd(_mm256_mul_pd(_t16_2, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t6_5, _t6_4), _mm256_unpacklo_pd(_t6_2, _t6_0), 32)), _mm256_permute2f128_pd(_mm256_mul_pd(_t16_2, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t6_5, _t6_4), _mm256_unpacklo_pd(_t6_2, _t6_0), 32)), _mm256_mul_pd(_t16_2, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t6_5, _t6_4), _mm256_unpacklo_pd(_t6_2, _t6_0), 32)), 129)), _mm256_add_pd(_mm256_mul_pd(_t16_2, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t6_5, _t6_4), _mm256_unpacklo_pd(_t6_2, _t6_0), 32)), _mm256_permute2f128_pd(_mm256_mul_pd(_t16_2, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t6_5, _t6_4), _mm256_unpacklo_pd(_t6_2, _t6_0), 32)), _mm256_mul_pd(_t16_2, _mm256_permute2f128_pd(_mm256_unpacklo_pd(_t6_5, _t6_4), _mm256_unpacklo_pd(_t6_2, _t6_0), 32)), 129)), 1));

  // AVX Storer:
  _t16_0 = _t16_1;


  for( int i150 = 4; i150 <= 11; i150+=4 ) {
    _t17_0 = _mm256_loadu_pd(y + i150);

    // AVX Loader:

    // 4-BLAC: (4x1)^T
    _t17_3 = _t17_0;

    // AVX Loader:

    // 4-BLAC: 1x4 * 4x1
    _t17_2 = _mm256_add_pd(_mm256_blend_pd(_mm256_add_pd(_mm256_mul_pd(_t17_3, _t17_0), _mm256_permute2f128_pd(_mm256_mul_pd(_t17_3, _t17_0), _mm256_mul_pd(_t17_3, _t17_0), 129)), _mm256_setzero_pd(), 14), _mm256_shuffle_pd(_mm256_add_pd(_mm256_mul_pd(_t17_3, _t17_0), _mm256_permute2f128_pd(_mm256_mul_pd(_t17_3, _t17_0), _mm256_mul_pd(_t17_3, _t17_0), 129)), _mm256_add_pd(_mm256_mul_pd(_t17_3, _t17_0), _mm256_permute2f128_pd(_mm256_mul_pd(_t17_3, _t17_0), _mm256_mul_pd(_t17_3, _t17_0), 129)), 1));

    // AVX Loader:

    // 1x1 -> 1x4
    _t17_1 = _t16_0;

    // 4-BLAC: 1x4 + 1x4
    _t17_1 = _mm256_add_pd(_t17_1, _t17_2);

    // AVX Storer:
    _t16_0 = _t17_1;
  }

  _mm_store_sd(&(y[3]), _mm256_castpd256_pd128(_t6_0));
  _mm_store_sd(&(y[2]), _mm256_castpd256_pd128(_t6_2));
  _mm_store_sd(&(y[1]), _mm256_castpd256_pd128(_t6_4));
  _mm_store_sd(&(y[0]), _mm256_castpd256_pd128(_t6_5));
  _mm_store_sd(&(f[0]), _mm256_castpd256_pd128(_t9_1));
  _mm_store_sd(&(var[0]), _mm256_castpd256_pd128(_t13_8));
  _mm_store_sd(&(lp[0]), _mm256_castpd256_pd128(_t16_0));

}
