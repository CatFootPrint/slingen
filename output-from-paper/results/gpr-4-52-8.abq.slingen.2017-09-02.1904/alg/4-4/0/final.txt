Using part. schemes: Assign_Mul_LowerTriangular_Matrix_Matrix_opt_m04_m21_Assign_Mul_LowerTriangular_T_LowerTriangular_Symmetric_opt_m03_Assign_Mul_T_LowerTriangular_Matrix_Matrix_opt_m04_m21_rdiv_ltn_ow_opt_m1_n4

================================================================================

  L[h(1, 4, 0),h(1, 4, 0)] = sqrt( L[h(1, 4, 0),h(1, 4, 0)] );
  L[h(1, 4, 1),h(1, 4, 0)] = ( L[h(1, 4, 1),h(1, 4, 0)] / L[h(1, 4, 0),h(1, 4, 0)] );
  L[h(1, 4, 2),h(1, 4, 0)] = ( L[h(1, 4, 2),h(1, 4, 0)] / L[h(1, 4, 0),h(1, 4, 0)] );
  L[h(1, 4, 3),h(1, 4, 0)] = ( L[h(1, 4, 3),h(1, 4, 0)] / L[h(1, 4, 0),h(1, 4, 0)] );
  L[h(3, 4, 1),h(3, 4, 1)] = ( L[h(3, 4, 1),h(3, 4, 1)] + ( -( L[h(3, 4, 1),h(1, 4, 0)] ) * trans( L[h(3, 4, 1),h(1, 4, 0)] ) ) );
  L[h(1, 4, 1),h(1, 4, 1)] = sqrt( L[h(1, 4, 1),h(1, 4, 1)] );
  L[h(1, 4, 2),h(1, 4, 1)] = ( L[h(1, 4, 2),h(1, 4, 1)] / L[h(1, 4, 1),h(1, 4, 1)] );
  L[h(1, 4, 3),h(1, 4, 1)] = ( L[h(1, 4, 3),h(1, 4, 1)] / L[h(1, 4, 1),h(1, 4, 1)] );
  L[h(2, 4, 2),h(2, 4, 2)] = ( L[h(2, 4, 2),h(2, 4, 2)] + ( -( L[h(2, 4, 2),h(1, 4, 1)] ) * trans( L[h(2, 4, 2),h(1, 4, 1)] ) ) );
  L[h(1, 4, 2),h(1, 4, 2)] = sqrt( L[h(1, 4, 2),h(1, 4, 2)] );
  L[h(1, 4, 3),h(1, 4, 2)] = ( L[h(1, 4, 3),h(1, 4, 2)] / L[h(1, 4, 2),h(1, 4, 2)] );
  L[h(1, 4, 3),h(1, 4, 3)] = ( L[h(1, 4, 3),h(1, 4, 3)] + ( -( L[h(1, 4, 3),h(1, 4, 2)] ) * trans( L[h(1, 4, 3),h(1, 4, 2)] ) ) );
  L[h(1, 4, 3),h(1, 4, 3)] = sqrt( L[h(1, 4, 3),h(1, 4, 3)] );
  t0[h(1, 4, 0),h(1, 1, 0)] = ( t0[h(1, 4, 0),h(1, 1, 0)] / L0[h(1, 4, 0),h(1, 4, 0)] );
  t0[h(3, 4, 1),h(1, 1, 0)] = ( t0[h(3, 4, 1),h(1, 1, 0)] + ( -( L0[h(3, 4, 1),h(1, 4, 0)] ) * t0[h(1, 4, 0),h(1, 1, 0)] ) );
  t0[h(1, 4, 1),h(1, 1, 0)] = ( t0[h(1, 4, 1),h(1, 1, 0)] / L0[h(1, 4, 1),h(1, 4, 1)] );
  t0[h(2, 4, 2),h(1, 1, 0)] = ( t0[h(2, 4, 2),h(1, 1, 0)] + ( -( L0[h(2, 4, 2),h(1, 4, 1)] ) * t0[h(1, 4, 1),h(1, 1, 0)] ) );
  t0[h(1, 4, 2),h(1, 1, 0)] = ( t0[h(1, 4, 2),h(1, 1, 0)] / L0[h(1, 4, 2),h(1, 4, 2)] );
  t0[h(1, 4, 3),h(1, 1, 0)] = ( t0[h(1, 4, 3),h(1, 1, 0)] + ( -( L0[h(1, 4, 3),h(1, 4, 2)] ) * t0[h(1, 4, 2),h(1, 1, 0)] ) );
  t0[h(1, 4, 3),h(1, 1, 0)] = ( t0[h(1, 4, 3),h(1, 1, 0)] / L0[h(1, 4, 3),h(1, 4, 3)] );
  a[h(1, 4, 3),h(1, 1, 0)] = ( a[h(1, 4, 3),h(1, 1, 0)] / L0[h(1, 4, 3),h(1, 4, 3)] );
  a[h(3, 4, 0),h(1, 1, 0)] = ( a[h(3, 4, 0),h(1, 1, 0)] + ( -( trans( L0[h(1, 4, 3),h(3, 4, 0)] ) ) * a[h(1, 4, 3),h(1, 1, 0)] ) );
  a[h(1, 4, 2),h(1, 1, 0)] = ( a[h(1, 4, 2),h(1, 1, 0)] / L0[h(1, 4, 2),h(1, 4, 2)] );
  a[h(2, 4, 0),h(1, 1, 0)] = ( a[h(2, 4, 0),h(1, 1, 0)] + ( -( trans( L0[h(1, 4, 2),h(2, 4, 0)] ) ) * a[h(1, 4, 2),h(1, 1, 0)] ) );
  a[h(1, 4, 1),h(1, 1, 0)] = ( a[h(1, 4, 1),h(1, 1, 0)] / L0[h(1, 4, 1),h(1, 4, 1)] );
  a[h(1, 4, 0),h(1, 1, 0)] = ( a[h(1, 4, 0),h(1, 1, 0)] + ( -( trans( L0[h(1, 4, 1),h(1, 4, 0)] ) ) * a[h(1, 4, 1),h(1, 1, 0)] ) );
  a[h(1, 4, 0),h(1, 1, 0)] = ( a[h(1, 4, 0),h(1, 1, 0)] / L0[h(1, 4, 0),h(1, 4, 0)] );
  kx = ( X * x );
  f = ( trans( kx ) * y );
  v[h(1, 4, 0),h(1, 1, 0)] = ( v[h(1, 4, 0),h(1, 1, 0)] / L0[h(1, 4, 0),h(1, 4, 0)] );
  v[h(3, 4, 1),h(1, 1, 0)] = ( v[h(3, 4, 1),h(1, 1, 0)] + ( -( L0[h(3, 4, 1),h(1, 4, 0)] ) * v[h(1, 4, 0),h(1, 1, 0)] ) );
  v[h(1, 4, 1),h(1, 1, 0)] = ( v[h(1, 4, 1),h(1, 1, 0)] / L0[h(1, 4, 1),h(1, 4, 1)] );
  v[h(2, 4, 2),h(1, 1, 0)] = ( v[h(2, 4, 2),h(1, 1, 0)] + ( -( L0[h(2, 4, 2),h(1, 4, 1)] ) * v[h(1, 4, 1),h(1, 1, 0)] ) );
  v[h(1, 4, 2),h(1, 1, 0)] = ( v[h(1, 4, 2),h(1, 1, 0)] / L0[h(1, 4, 2),h(1, 4, 2)] );
  v[h(1, 4, 3),h(1, 1, 0)] = ( v[h(1, 4, 3),h(1, 1, 0)] + ( -( L0[h(1, 4, 3),h(1, 4, 2)] ) * v[h(1, 4, 2),h(1, 1, 0)] ) );
  v[h(1, 4, 3),h(1, 1, 0)] = ( v[h(1, 4, 3),h(1, 1, 0)] / L0[h(1, 4, 3),h(1, 4, 3)] );
  var = ( ( trans( x ) * x ) - ( trans( kx ) * kx ) );
  lp = ( trans( y ) * y );
