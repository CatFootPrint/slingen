Using part. schemes: Assign_Add_Mul_LowerTriangular_SquaredMatrix_Mul_SquaredMatrix_UpperTriangular_SquaredMatrix_opt_m04_m22

================================================================================

  X[h(1, 4, 0),h(1, 4, 0)] = ( X[h(1, 4, 0),h(1, 4, 0)] / ( L[h(1, 4, 0),h(1, 4, 0)] + U[h(1, 4, 0),h(1, 4, 0)] ) );
  X[h(1, 4, 0),h(3, 4, 1)] = ( ( -( X[h(1, 4, 0),h(1, 4, 0)] ) * U[h(1, 4, 0),h(3, 4, 1)] ) + X[h(1, 4, 0),h(3, 4, 1)] );
  X[h(1, 4, 0),h(1, 4, 1)] = ( X[h(1, 4, 0),h(1, 4, 1)] / ( L[h(1, 4, 0),h(1, 4, 0)] + U[h(1, 4, 1),h(1, 4, 1)] ) );
  X[h(1, 4, 0),h(2, 4, 2)] = ( ( -( X[h(1, 4, 0),h(1, 4, 1)] ) * U[h(1, 4, 1),h(2, 4, 2)] ) + X[h(1, 4, 0),h(2, 4, 2)] );
  X[h(1, 4, 0),h(1, 4, 2)] = ( X[h(1, 4, 0),h(1, 4, 2)] / ( L[h(1, 4, 0),h(1, 4, 0)] + U[h(1, 4, 2),h(1, 4, 2)] ) );
  X[h(1, 4, 0),h(1, 4, 3)] = ( ( -( X[h(1, 4, 0),h(1, 4, 2)] ) * U[h(1, 4, 2),h(1, 4, 3)] ) + X[h(1, 4, 0),h(1, 4, 3)] );
  X[h(1, 4, 0),h(1, 4, 3)] = ( X[h(1, 4, 0),h(1, 4, 3)] / ( L[h(1, 4, 0),h(1, 4, 0)] + U[h(1, 4, 3),h(1, 4, 3)] ) );
  X[h(3, 4, 1),h(4, 4, 0)] = ( ( -( L[h(3, 4, 1),h(1, 4, 0)] ) * X[h(1, 4, 0),h(4, 4, 0)] ) + X[h(3, 4, 1),h(4, 4, 0)] );
  X[h(1, 4, 1),h(1, 4, 0)] = ( X[h(1, 4, 1),h(1, 4, 0)] / ( L[h(1, 4, 1),h(1, 4, 1)] + U[h(1, 4, 0),h(1, 4, 0)] ) );
  X[h(1, 4, 1),h(3, 4, 1)] = ( ( -( X[h(1, 4, 1),h(1, 4, 0)] ) * U[h(1, 4, 0),h(3, 4, 1)] ) + X[h(1, 4, 1),h(3, 4, 1)] );
  X[h(1, 4, 1),h(1, 4, 1)] = ( X[h(1, 4, 1),h(1, 4, 1)] / ( L[h(1, 4, 1),h(1, 4, 1)] + U[h(1, 4, 1),h(1, 4, 1)] ) );
  X[h(1, 4, 1),h(2, 4, 2)] = ( ( -( X[h(1, 4, 1),h(1, 4, 1)] ) * U[h(1, 4, 1),h(2, 4, 2)] ) + X[h(1, 4, 1),h(2, 4, 2)] );
  X[h(1, 4, 1),h(1, 4, 2)] = ( X[h(1, 4, 1),h(1, 4, 2)] / ( L[h(1, 4, 1),h(1, 4, 1)] + U[h(1, 4, 2),h(1, 4, 2)] ) );
  X[h(1, 4, 1),h(1, 4, 3)] = ( ( -( X[h(1, 4, 1),h(1, 4, 2)] ) * U[h(1, 4, 2),h(1, 4, 3)] ) + X[h(1, 4, 1),h(1, 4, 3)] );
  X[h(1, 4, 1),h(1, 4, 3)] = ( X[h(1, 4, 1),h(1, 4, 3)] / ( L[h(1, 4, 1),h(1, 4, 1)] + U[h(1, 4, 3),h(1, 4, 3)] ) );
  X[h(2, 4, 2),h(4, 4, 0)] = ( ( -( L[h(2, 4, 2),h(1, 4, 1)] ) * X[h(1, 4, 1),h(4, 4, 0)] ) + X[h(2, 4, 2),h(4, 4, 0)] );
  X[h(1, 4, 2),h(1, 4, 0)] = ( X[h(1, 4, 2),h(1, 4, 0)] / ( L[h(1, 4, 2),h(1, 4, 2)] + U[h(1, 4, 0),h(1, 4, 0)] ) );
  X[h(1, 4, 2),h(3, 4, 1)] = ( ( -( X[h(1, 4, 2),h(1, 4, 0)] ) * U[h(1, 4, 0),h(3, 4, 1)] ) + X[h(1, 4, 2),h(3, 4, 1)] );
  X[h(1, 4, 2),h(1, 4, 1)] = ( X[h(1, 4, 2),h(1, 4, 1)] / ( L[h(1, 4, 2),h(1, 4, 2)] + U[h(1, 4, 1),h(1, 4, 1)] ) );
  X[h(1, 4, 2),h(2, 4, 2)] = ( ( -( X[h(1, 4, 2),h(1, 4, 1)] ) * U[h(1, 4, 1),h(2, 4, 2)] ) + X[h(1, 4, 2),h(2, 4, 2)] );
  X[h(1, 4, 2),h(1, 4, 2)] = ( X[h(1, 4, 2),h(1, 4, 2)] / ( L[h(1, 4, 2),h(1, 4, 2)] + U[h(1, 4, 2),h(1, 4, 2)] ) );
  X[h(1, 4, 2),h(1, 4, 3)] = ( ( -( X[h(1, 4, 2),h(1, 4, 2)] ) * U[h(1, 4, 2),h(1, 4, 3)] ) + X[h(1, 4, 2),h(1, 4, 3)] );
  X[h(1, 4, 2),h(1, 4, 3)] = ( X[h(1, 4, 2),h(1, 4, 3)] / ( L[h(1, 4, 2),h(1, 4, 2)] + U[h(1, 4, 3),h(1, 4, 3)] ) );
  X[h(1, 4, 3),h(4, 4, 0)] = ( ( -( L[h(1, 4, 3),h(1, 4, 2)] ) * X[h(1, 4, 2),h(4, 4, 0)] ) + X[h(1, 4, 3),h(4, 4, 0)] );
  X[h(1, 4, 3),h(1, 4, 0)] = ( X[h(1, 4, 3),h(1, 4, 0)] / ( L[h(1, 4, 3),h(1, 4, 3)] + U[h(1, 4, 0),h(1, 4, 0)] ) );
  X[h(1, 4, 3),h(3, 4, 1)] = ( ( -( X[h(1, 4, 3),h(1, 4, 0)] ) * U[h(1, 4, 0),h(3, 4, 1)] ) + X[h(1, 4, 3),h(3, 4, 1)] );
  X[h(1, 4, 3),h(1, 4, 1)] = ( X[h(1, 4, 3),h(1, 4, 1)] / ( L[h(1, 4, 3),h(1, 4, 3)] + U[h(1, 4, 1),h(1, 4, 1)] ) );
  X[h(1, 4, 3),h(2, 4, 2)] = ( ( -( X[h(1, 4, 3),h(1, 4, 1)] ) * U[h(1, 4, 1),h(2, 4, 2)] ) + X[h(1, 4, 3),h(2, 4, 2)] );
  X[h(1, 4, 3),h(1, 4, 2)] = ( X[h(1, 4, 3),h(1, 4, 2)] / ( L[h(1, 4, 3),h(1, 4, 3)] + U[h(1, 4, 2),h(1, 4, 2)] ) );
  X[h(1, 4, 3),h(1, 4, 3)] = ( ( -( X[h(1, 4, 3),h(1, 4, 2)] ) * U[h(1, 4, 2),h(1, 4, 3)] ) + X[h(1, 4, 3),h(1, 4, 3)] );
  X[h(1, 4, 3),h(1, 4, 3)] = ( X[h(1, 4, 3),h(1, 4, 3)] / ( L[h(1, 4, 3),h(1, 4, 3)] + U[h(1, 4, 3),h(1, 4, 3)] ) );
